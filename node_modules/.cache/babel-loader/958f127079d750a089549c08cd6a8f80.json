{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ImageLoader } from '@loaders.gl/images';\nimport { parseJSON, sliceArrayBuffer } from '@loaders.gl/loader-utils';\nimport { assert } from '../utils/assert';\nimport { resolveUrl } from '../gltf-utils/resolve-url';\nimport { getTypedArrayForBufferView } from '../gltf-utils/get-typed-array';\nimport { decodeExtensions } from '../extensions/gltf-extensions';\nimport { normalizeGLTFV1 } from '../api/normalize-gltf-v1';\nimport { postProcessGLTF } from '../api/post-process-gltf';\nimport parseGLBSync, { isGLB } from './parse-glb';\nexport function isGLTF(arrayBuffer, options) {\n  var byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\nexport function parseGLTF(_x, _x2) {\n  return _parseGLTF.apply(this, arguments);\n}\n\nfunction _parseGLTF() {\n  _parseGLTF = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltf, arrayBufferOrString) {\n    var byteOffset,\n        options,\n        context,\n        _options$gltf,\n        _options$gltf2,\n        _options$gltf3,\n        _options$gltf4,\n        promises,\n        _promise,\n        promise,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;\n            options = _args.length > 3 ? _args[3] : undefined;\n            context = _args.length > 4 ? _args[4] : undefined;\n            parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n            normalizeGLTFV1(gltf, {\n              normalize: options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.normalize\n            });\n            promises = [];\n\n            if (!(options !== null && options !== void 0 && (_options$gltf2 = options.gltf) !== null && _options$gltf2 !== void 0 && _options$gltf2.loadBuffers && gltf.json.buffers)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 9;\n            return loadBuffers(gltf, options, context);\n\n          case 9:\n            if (options !== null && options !== void 0 && (_options$gltf3 = options.gltf) !== null && _options$gltf3 !== void 0 && _options$gltf3.loadImages) {\n              _promise = loadImages(gltf, options, context);\n              promises.push(_promise);\n            }\n\n            promise = decodeExtensions(gltf, options, context);\n            promises.push(promise);\n            _context.next = 14;\n            return Promise.all(promises);\n\n          case 14:\n            return _context.abrupt(\"return\", options !== null && options !== void 0 && (_options$gltf4 = options.gltf) !== null && _options$gltf4 !== void 0 && _options$gltf4.postProcess ? postProcessGLTF(gltf, options) : gltf);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseGLTF.apply(this, arguments);\n}\n\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    var textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    var glb = {};\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n    assert(glb.type === 'glTF', \"Invalid GLB magic string \".concat(glb.type));\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  var buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    var binChunks = gltf._glb.binChunks;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n  }\n\n  var images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\nfunction loadBuffers(_x3, _x4, _x5) {\n  return _loadBuffers.apply(this, arguments);\n}\n\nfunction _loadBuffers() {\n  _loadBuffers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gltf, options, context) {\n    var i, buffer, _context$fetch, _response$arrayBuffer, fetch, uri, response, arrayBuffer;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            i = 0;\n\n          case 1:\n            if (!(i < gltf.json.buffers.length)) {\n              _context2.next = 18;\n              break;\n            }\n\n            buffer = gltf.json.buffers[i];\n\n            if (!buffer.uri) {\n              _context2.next = 15;\n              break;\n            }\n\n            fetch = context.fetch;\n            assert(fetch);\n            uri = resolveUrl(buffer.uri, options);\n            _context2.next = 9;\n            return context === null || context === void 0 ? void 0 : (_context$fetch = context.fetch) === null || _context$fetch === void 0 ? void 0 : _context$fetch.call(context, uri);\n\n          case 9:\n            response = _context2.sent;\n            _context2.next = 12;\n            return response === null || response === void 0 ? void 0 : (_response$arrayBuffer = response.arrayBuffer) === null || _response$arrayBuffer === void 0 ? void 0 : _response$arrayBuffer.call(response);\n\n          case 12:\n            arrayBuffer = _context2.sent;\n            gltf.buffers[i] = {\n              arrayBuffer: arrayBuffer,\n              byteOffset: 0,\n              byteLength: arrayBuffer.byteLength\n            };\n            delete buffer.uri;\n\n          case 15:\n            ++i;\n            _context2.next = 1;\n            break;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadBuffers.apply(this, arguments);\n}\n\nfunction loadImages(_x6, _x7, _x8) {\n  return _loadImages.apply(this, arguments);\n}\n\nfunction _loadImages() {\n  _loadImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(gltf, options, context) {\n    var images, promises, i;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            images = gltf.json.images || [];\n            promises = [];\n\n            for (i = 0; i < images.length; ++i) {\n              promises.push(loadImage(gltf, images[i], i, options, context));\n            }\n\n            _context3.next = 5;\n            return Promise.all(promises);\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadImages.apply(this, arguments);\n}\n\nfunction loadImage(_x9, _x10, _x11, _x12, _x13) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(gltf, image, index, options, context) {\n    var fetch, parse, arrayBuffer, uri, response, array, parsedImage;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            fetch = context.fetch, parse = context.parse;\n\n            if (!image.uri) {\n              _context4.next = 9;\n              break;\n            }\n\n            uri = resolveUrl(image.uri, options);\n            _context4.next = 5;\n            return fetch(uri);\n\n          case 5:\n            response = _context4.sent;\n            _context4.next = 8;\n            return response.arrayBuffer();\n\n          case 8:\n            arrayBuffer = _context4.sent;\n\n          case 9:\n            if (Number.isFinite(image.bufferView)) {\n              array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n              arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n            }\n\n            assert(arrayBuffer, 'glTF image has no data');\n            _context4.next = 13;\n            return parse(arrayBuffer, ImageLoader, {}, context);\n\n          case 13:\n            parsedImage = _context4.sent;\n            gltf.images[index] = parsedImage;\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _loadImage.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-gltf.ts"],"names":["byteOffset","isGLB","parseGLTFContainerSync","normalizeGLTFV1","normalize","options","promises","gltf","loadBuffers","promise","loadImages","decodeExtensions","Promise","postProcessGLTF","data","textDecoder","parseJSON","glb","parseGLBSync","assert","buffers","binChunks","arrayBuffer","byteLength","images","i","buffer","fetch","uri","resolveUrl","response","context","loadImage","parse","image","Number","array","getTypedArrayForBufferView","sliceArrayBuffer","parsedImage"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport type {GLB} from '../types/glb-types';\nimport type {GLBParseOptions} from './parse-glb';\n\nimport {ImageLoader} from '@loaders.gl/images';\nimport {parseJSON, sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {resolveUrl} from '../gltf-utils/resolve-url';\nimport {getTypedArrayForBufferView} from '../gltf-utils/get-typed-array';\nimport {decodeExtensions} from '../extensions/gltf-extensions';\nimport {normalizeGLTFV1} from '../api/normalize-gltf-v1';\nimport {postProcessGLTF} from '../api/post-process-gltf';\nimport parseGLBSync, {isGLB} from './parse-glb';\n\nexport type GLTFParseOptions = {\n  excludeExtensions?: string[];\n  decompressMeshes?: boolean;\n  normalize?: boolean;\n  loadBuffers?: boolean;\n  loadImages?: boolean;\n  postProcess?: boolean;\n};\n\n// export type GLTFOptions = {\n//   gltf?: GLTFParseOptions;\n// };\n\nexport function isGLTF(arrayBuffer, options?): boolean {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\n\nexport async function parseGLTF(\n  gltf,\n  arrayBufferOrString,\n  byteOffset = 0,\n  options: {\n    gltf?: GLTFParseOptions;\n    glb?: GLBParseOptions;\n  },\n  context: LoaderContext\n) {\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  normalizeGLTFV1(gltf, {normalize: options?.gltf?.normalize});\n\n  const promises: Promise<any>[] = [];\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options?.gltf?.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  if (options?.gltf?.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options?.gltf?.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    const glb: GLB = {} as GLB;\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n\n    assert(glb.type === 'glTF', `Invalid GLB magic string ${glb.type}`);\n\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {binChunks} = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n    // TODO - this modifies JSON and is a post processing thing\n    // gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    // gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n// Asynchronously fetch and parse buffers, store in buffers array outside of json\nasync function loadBuffers(gltf, options, context: LoaderContext) {\n  for (let i = 0; i < gltf.json.buffers.length; ++i) {\n    const buffer = gltf.json.buffers[i];\n    if (buffer.uri) {\n      const {fetch} = context;\n      assert(fetch);\n\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await context?.fetch?.(uri);\n      const arrayBuffer = await response?.arrayBuffer?.();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    }\n  }\n}\n\nasync function loadImages(gltf, options, context: LoaderContext) {\n  const images = gltf.json.images || [];\n\n  const promises: Promise<any>[] = [];\n  for (let i = 0; i < images.length; ++i) {\n    promises.push(loadImage(gltf, images[i], i, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\n// Asynchronously fetches and parses one image, store in images array outside of json\nasync function loadImage(gltf, image, index: number, options, context: LoaderContext) {\n  const {fetch, parse} = context;\n\n  let arrayBuffer;\n\n  if (image.uri) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n\n  // Call `parse`\n  const parsedImage = await parse(arrayBuffer, ImageLoader, {}, context);\n  // TODO making sure ImageLoader is overridable by using array of loaders\n  // const parsedImage = await parse(arrayBuffer, [ImageLoader]);\n\n  gltf.images[index] = parsedImage;\n}\n"]},"metadata":{},"sourceType":"module"}