{"ast":null,"code":"import _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from 'math.gl';\nvar MOVEMENT_SPEED = 20;\nvar DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nvar FirstPersonState = /*#__PURE__*/function (_ViewState) {\n  _inherits(FirstPersonState, _ViewState);\n\n  var _super = _createSuper(FirstPersonState);\n\n  function FirstPersonState(_ref) {\n    var _this;\n\n    var width = _ref.width,\n        height = _ref.height,\n        _ref$position = _ref.position,\n        position = _ref$position === void 0 ? DEFAULT_STATE.position : _ref$position,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        longitude = _ref.longitude,\n        latitude = _ref.latitude,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, FirstPersonState);\n\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      position: position,\n      bearing: bearing,\n      pitch: pitch,\n      longitude: longitude,\n      latitude: latitude,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    });\n    _this._state = {\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    return _this;\n  }\n\n  _createClass(FirstPersonState, [{\n    key: \"getDirection\",\n    value: function getDirection() {\n      var use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var spherical = new SphericalCoordinates({\n        bearing: this._viewportProps.bearing,\n        pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n      });\n      var direction = spherical.toVector3().normalize();\n      return direction;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart() {\n      return this;\n    }\n  }, {\n    key: \"pan\",\n    value: function pan() {\n      return this;\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this;\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref3) {\n      var pos = _ref3.pos,\n          _ref3$deltaAngleX = _ref3.deltaAngleX,\n          deltaAngleX = _ref3$deltaAngleX === void 0 ? 0 : _ref3$deltaAngleX,\n          _ref3$deltaAngleY = _ref3.deltaAngleY,\n          deltaAngleY = _ref3$deltaAngleY === void 0 ? 0 : _ref3$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n\n      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n        newRotation = {\n          bearing: startBearing - deltaScaleX * 180,\n          pitch: startPitch - deltaScaleY * 90\n        };\n      } else {\n        newRotation = {\n          bearing: startBearing - deltaAngleX,\n          pitch: startPitch - deltaAngleY\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotatePos: null,\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart() {\n      return this._getUpdatedState({\n        startZoomPosition: this._viewportProps.position,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref4) {\n      var scale = _ref4.scale;\n      var startZoomPosition = this._state.startZoomPosition;\n\n      if (!startZoomPosition) {\n        startZoomPosition = this._viewportProps.position;\n      }\n\n      var direction = this.getDirection();\n      return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: Math.PI / 2\n      }), speed);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: -Math.PI / 2\n      }), speed);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction, speed);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n      var direction = this.getDirection(true);\n      return this._move(direction.negate(), speed);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - speed\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this.zoom({\n        scale: speed\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this.zoom({\n        scale: 1 / speed\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_move\",\n    value: function _move(direction, speed) {\n      var fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;\n      var delta = direction.scale(speed);\n      return this._getUpdatedState({\n        position: new Vector3(fromPosition).add(delta)\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new FirstPersonState(_objectSpread(_objectSpread(_objectSpread({}, this._viewportProps), this._state), newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var pitch = props.pitch,\n          maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          longitude = props.longitude,\n          bearing = props.bearing;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n\n      if (longitude < -180 || longitude > 180) {\n        props.longitude = mod(longitude + 180, 360) - 180;\n      }\n\n      if (bearing < -180 || bearing > 180) {\n        props.bearing = mod(bearing + 180, 360) - 180;\n      }\n\n      return props;\n    }\n  }]);\n\n  return FirstPersonState;\n}(ViewState);\n\nvar FirstPersonController = /*#__PURE__*/function (_Controller) {\n  _inherits(FirstPersonController, _Controller);\n\n  var _super2 = _createSuper(FirstPersonController);\n\n  function FirstPersonController(props) {\n    _classCallCheck(this, FirstPersonController);\n\n    return _super2.call(this, FirstPersonState, props);\n  }\n\n  _createClass(FirstPersonController, [{\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['position', 'pitch', 'bearing'];\n    }\n  }]);\n\n  return FirstPersonController;\n}(Controller);\n\nexport { FirstPersonController as default };","map":{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["_SphericalCoordinates","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","constructor","startZoom","width","height","longitude","latitude","startRotatePos","startBearing","startPitch","startZoomPosition","getDirection","use2D","spherical","direction","panStart","pan","panEnd","rotateStart","pos","rotate","deltaAngleX","deltaAngleY","Number","deltaScaleX","deltaScaleY","newRotation","rotateEnd","zoomStart","zoom","scale","Math","zoomEnd","moveLeft","speed","radians","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","fromProps","viewState","props","_viewportProps","_move","fromPosition","delta","_getUpdatedState","newProps","_applyConstraints","clamp","mod"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._state;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}