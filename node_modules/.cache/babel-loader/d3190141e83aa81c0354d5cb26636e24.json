{"ast":null,"code":"import _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Resource from './resource';\n\nvar ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager(_ref) {\n    var gl = _ref.gl,\n        protocol = _ref.protocol;\n\n    _classCallCheck(this, ResourceManager);\n\n    this.protocol = protocol || 'resource://';\n    this._context = {\n      gl: gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n    this._pruneRequest = null;\n  }\n\n  _createClass(ResourceManager, [{\n    key: \"contains\",\n    value: function contains(resourceId) {\n      if (resourceId.startsWith(this.protocol)) {\n        return true;\n      }\n\n      return resourceId in this._resources;\n    }\n  }, {\n    key: \"add\",\n    value: function add(_ref2) {\n      var resourceId = _ref2.resourceId,\n          data = _ref2.data,\n          _ref2$forceUpdate = _ref2.forceUpdate,\n          forceUpdate = _ref2$forceUpdate === void 0 ? false : _ref2$forceUpdate,\n          _ref2$persistent = _ref2.persistent,\n          persistent = _ref2$persistent === void 0 ? true : _ref2$persistent;\n      var res = this._resources[resourceId];\n\n      if (res) {\n        res.setData(data, forceUpdate);\n      } else {\n        res = new Resource(resourceId, data, this._context);\n        this._resources[resourceId] = res;\n      }\n\n      res.persistent = persistent;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(resourceId) {\n      var res = this._resources[resourceId];\n\n      if (res) {\n        res.delete();\n        delete this._resources[resourceId];\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(_ref3) {\n      var consumerId = _ref3.consumerId;\n      var consumer = this._consumers[consumerId];\n\n      if (consumer) {\n        for (var requestId in consumer) {\n          var request = consumer[requestId];\n\n          if (request.resource) {\n            request.resource.unsubscribe(request);\n          }\n        }\n\n        delete this._consumers[consumerId];\n        this.prune();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(_ref4) {\n      var resourceId = _ref4.resourceId,\n          onChange = _ref4.onChange,\n          consumerId = _ref4.consumerId,\n          _ref4$requestId = _ref4.requestId,\n          requestId = _ref4$requestId === void 0 ? 'default' : _ref4$requestId;\n      var resources = this._resources,\n          protocol = this.protocol;\n\n      if (resourceId.startsWith(protocol)) {\n        resourceId = resourceId.replace(protocol, '');\n\n        if (!resources[resourceId]) {\n          this.add({\n            resourceId: resourceId,\n            data: null,\n            persistent: false\n          });\n        }\n      }\n\n      var res = resources[resourceId];\n\n      this._track(consumerId, requestId, res, onChange);\n\n      if (res) {\n        return res.getData();\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"prune\",\n    value: function prune() {\n      var _this = this;\n\n      if (!this._pruneRequest) {\n        this._pruneRequest = setTimeout(function () {\n          return _this._prune();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      for (var key in this._resources) {\n        this._resources[key].delete();\n      }\n    }\n  }, {\n    key: \"_track\",\n    value: function _track(consumerId, requestId, resource, onChange) {\n      var consumers = this._consumers;\n      var consumer = consumers[consumerId] = consumers[consumerId] || {};\n      var request = consumer[requestId] || {};\n\n      if (request.resource) {\n        request.resource.unsubscribe(request);\n        request.resource = null;\n        this.prune();\n      }\n\n      if (resource) {\n        consumer[requestId] = request;\n        request.onChange = onChange;\n        request.resource = resource;\n        resource.subscribe(request);\n      }\n    }\n  }, {\n    key: \"_prune\",\n    value: function _prune() {\n      this._pruneRequest = null;\n\n      for (var _i = 0, _Object$keys = Object.keys(this._resources); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var res = this._resources[key];\n\n        if (!res.persistent && !res.inUse()) {\n          res.delete();\n          delete this._resources[key];\n        }\n      }\n    }\n  }]);\n\n  return ResourceManager;\n}();\n\nexport { ResourceManager as default };","map":{"version":3,"sources":["../../../../src/lib/resource/resource-manager.js"],"names":["constructor","protocol","gl","resourceManager","contains","resourceId","add","forceUpdate","persistent","res","remove","unsubscribe","consumerId","consumer","request","subscribe","requestId","_resources","resources","data","prune","setTimeout","finalize","_track","consumers","resource","_prune","key","Object"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\n\nexport default class ResourceManager {\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({resourceId, data, forceUpdate = false, persistent = true}) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}) {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe({resourceId, onChange, consumerId, requestId = 'default'}) {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}