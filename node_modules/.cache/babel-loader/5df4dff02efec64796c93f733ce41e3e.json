{"ast":null,"code":"import _defineProperty from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION, getValueFunc } from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport { getFloatTexture } from '../utils/resource-utils.js';\n\nvar defaultProps = _objectSpread(_objectSpread({}, ScreenGridCellLayer.defaultProps), {}, {\n  getPosition: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM'\n});\n\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nvar ScreenGridLayer = /*#__PURE__*/function (_GridAggregationLayer) {\n  _inherits(ScreenGridLayer, _GridAggregationLayer);\n\n  var _super = _createSuper(ScreenGridLayer);\n\n  function ScreenGridLayer() {\n    _classCallCheck(this, ScreenGridLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ScreenGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      var gl = this.context.gl;\n\n      if (!ScreenGridCellLayer.isSupported(gl)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"ScreenGridLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS,\n        getCellSize: function getCellSize(props) {\n          return props.cellSizePixels;\n        }\n      });\n\n      var weights = {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM,\n          needMax: true,\n          maxTexture: getFloatTexture(gl, {\n            id: \"\".concat(this.id, \"-max-texture\")\n          })\n        }\n      };\n      this.setState({\n        supported: true,\n        projectPoints: true,\n        weights: weights,\n        subLayerData: {\n          attributes: {}\n        },\n        maxTexture: weights.count.maxTexture,\n        positionAttributeName: 'positions',\n        posOffset: [0, 0],\n        translation: [1, -1]\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, _defineProperty(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), _defineProperty(_attributeManager$add, \"count\", {\n        size: 3,\n        accessor: 'getWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return this.state.supported && changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"updateState\", this).call(this, opts);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          maxTexture = _this$state.maxTexture,\n          numRow = _this$state.numRow,\n          numCol = _this$state.numCol,\n          weights = _this$state.weights;\n      var updateTriggers = this.props.updateTriggers;\n      var aggregationBuffer = weights.count.aggregationBuffer;\n      var CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n      return new CellLayerClass(this.props, this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers: updateTriggers\n      }), {\n        data: {\n          attributes: {\n            instanceCounts: aggregationBuffer\n          }\n        },\n        maxTexture: maxTexture,\n        numInstances: numRow * numCol\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state2 = this.state,\n          aggregationBuffer = _this$state2.aggregationBuffer,\n          maxBuffer = _this$state2.maxBuffer,\n          maxTexture = _this$state2.maxTexture;\n      aggregationBuffer === null || aggregationBuffer === void 0 ? void 0 : aggregationBuffer.delete();\n      maxBuffer === null || maxBuffer === void 0 ? void 0 : maxBuffer.delete();\n      maxTexture === null || maxTexture === void 0 ? void 0 : maxTexture.delete();\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info,\n          mode = _ref2.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        var _this$state3 = this.state,\n            gpuGridAggregator = _this$state3.gpuGridAggregator,\n            gpuAggregation = _this$state3.gpuAggregation,\n            weights = _this$state3.weights;\n        var aggregationResults = gpuAggregation ? gpuGridAggregator.getData('count') : weights.count;\n        info.object = GPUGridAggregator.getAggregationData(_objectSpread({\n          pixelIndex: index\n        }, aggregationResults));\n      }\n\n      return info;\n    }\n  }, {\n    key: \"updateResults\",\n    value: function updateResults(_ref3) {\n      var aggregationData = _ref3.aggregationData,\n          maxData = _ref3.maxData;\n      var count = this.state.weights.count;\n      count.aggregationData = aggregationData;\n      count.aggregationBuffer.setData({\n        data: aggregationData\n      });\n      count.maxData = maxData;\n      count.maxTexture.setImageData({\n        data: maxData\n      });\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var cellSize = opts.props.cellSizePixels;\n      var cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n      var viewportChanged = opts.changeFlags.viewportChanged;\n      var gpuAggregation = opts.props.gpuAggregation;\n\n      if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n        if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n          log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n          gpuAggregation = false;\n        }\n      }\n\n      var gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n      this.setState({\n        gpuAggregation: gpuAggregation\n      });\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var dimensions = this.state.dimensions;\n      var data = dimensions.data,\n          weights = dimensions.weights;\n      var aggregationDataDirty = positionsChanged || gpuAggregationChanged || viewportChanged || this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation,\n        dimension: data\n      });\n      var aggregationWeightsDirty = this.isAggregationDirty(opts, {\n        dimension: weights\n      });\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty,\n        aggregationWeightsDirty: aggregationWeightsDirty\n      });\n      var viewport = this.context.viewport;\n\n      if (viewportChanged || cellSizeChanged) {\n        var width = viewport.width,\n            height = viewport.height;\n        var numCol = Math.ceil(width / cellSize);\n        var numRow = Math.ceil(height / cellSize);\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          scaling: [width / 2, -height / 2, 1],\n          gridOffset: {\n            xOffset: cellSize,\n            yOffset: cellSize\n          },\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      if (aggregationWeightsDirty) {\n        this._updateAccessors(opts);\n      }\n\n      if (aggregationDataDirty || aggregationWeightsDirty) {\n        this._resetResults();\n      }\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          getWeight = _opts$props.getWeight,\n          aggregation = _opts$props.aggregation,\n          data = _opts$props.data;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.getWeight = getWeight;\n        count.operation = AGGREGATION_OPERATION[aggregation];\n      }\n\n      this.setState({\n        getValue: getValueFunc(aggregation, getWeight, {\n          data: data\n        })\n      });\n    }\n  }, {\n    key: \"_resetResults\",\n    value: function _resetResults() {\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = null;\n      }\n    }\n  }]);\n\n  return ScreenGridLayer;\n}(GridAggregationLayer);\n\nexport { ScreenGridLayer as default };\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["defaultProps","ScreenGridCellLayer","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","initializeState","gl","supported","log","dimensions","getCellSize","cellSizePixels","count","size","operation","AGGREGATION_OPERATION","needMax","maxTexture","getFloatTexture","id","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","accessor","fp64","shouldUpdateState","changeFlags","updateState","renderLayers","updateTriggers","aggregationBuffer","CellLayerClass","instanceCounts","numInstances","numRow","numCol","finalizeState","maxBuffer","getPickingInfo","mode","index","aggregationResults","gpuGridAggregator","info","pixelIndex","updateResults","maxData","aggregationData","updateAggregationState","cellSize","opts","cellSizeChanged","viewportChanged","GPUGridAggregator","gpuAggregationChanged","positionsChanged","aggregationDataDirty","compareAll","dimension","aggregationWeightsDirty","viewport","height","Math","width","scaling","gridOffset","xOffset","yOffset","_updateAccessors","getValue","getValueFunc","_resetResults","ScreenGridLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ScreenGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS,\n      getCellSize: props => props.cellSizePixels\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}