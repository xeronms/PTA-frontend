{"ast":null,"code":"import _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport VectorTile from './mapbox-vector-tile/vector-tile';\nimport BinaryVectorTile from './binary-vector-tile/vector-tile';\nimport { featuresToBinary } from './binary-vector-tile/features-to-binary';\nimport Protobuf from 'pbf';\nexport default function parseMVT(arrayBuffer, options) {\n  options = normalizeOptions(options);\n  var binary = options.gis.format === 'binary';\n  var features = [];\n  var firstPassData = {\n    pointPositionsCount: 0,\n    pointFeaturesCount: 0,\n    linePositionsCount: 0,\n    linePathsCount: 0,\n    lineFeaturesCount: 0,\n    polygonPositionsCount: 0,\n    polygonObjectsCount: 0,\n    polygonRingsCount: 0,\n    polygonFeaturesCount: 0\n  };\n\n  if (arrayBuffer.byteLength > 0) {\n    var tile = binary ? new BinaryVectorTile(new Protobuf(arrayBuffer)) : new VectorTile(new Protobuf(arrayBuffer));\n    var loaderOptions = options.mvt;\n    var selectedLayers = Array.isArray(loaderOptions.layers) ? loaderOptions.layers : Object.keys(tile.layers);\n    selectedLayers.forEach(function (layerName) {\n      var vectorTileLayer = tile.layers[layerName];\n\n      var featureOptions = _objectSpread(_objectSpread({}, loaderOptions), {}, {\n        layerName: layerName\n      });\n\n      if (!vectorTileLayer) {\n        return;\n      }\n\n      for (var i = 0; i < vectorTileLayer.length; i++) {\n        var vectorTileFeature = vectorTileLayer.feature(i, firstPassData);\n        var decodedFeature = binary ? getDecodedFeatureBinary(vectorTileFeature, featureOptions) : getDecodedFeature(vectorTileFeature, featureOptions);\n        features.push(decodedFeature);\n      }\n    });\n  }\n\n  if (binary) {\n    var data = featuresToBinary(features, firstPassData, options.gis);\n    data.byteLength = arrayBuffer.byteLength;\n    return data;\n  }\n\n  return features;\n}\n\nfunction normalizeOptions(options) {\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    mvt: options.mvt || {},\n    gis: options.gis || {}\n  });\n  var wgs84Coordinates = options.coordinates === 'wgs84';\n  var _options = options,\n      tileIndex = _options.tileIndex;\n  var hasTileIndex = tileIndex && Number.isFinite(tileIndex.x) && Number.isFinite(tileIndex.y) && Number.isFinite(tileIndex.z);\n\n  if (wgs84Coordinates && !hasTileIndex) {\n    throw new Error('MVT Loader: WGS84 coordinates need tileIndex property. Check documentation.');\n  }\n\n  return options;\n}\n\nfunction getDecodedFeature(feature) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var decodedFeature = feature.toGeoJSON(options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinates);\n\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n\nfunction getDecodedFeatureBinary(feature) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var decodedFeature = feature.toBinaryCoordinates(options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinatesBinary);\n\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n\nfunction transformToLocalCoordinates(line, feature) {\n  var extent = feature.extent;\n\n  for (var i = 0; i < line.length; i++) {\n    var p = line[i];\n    p[0] /= extent;\n    p[1] /= extent;\n  }\n}\n\nfunction transformToLocalCoordinatesBinary(data, feature) {\n  var extent = feature.extent;\n\n  for (var i = 0, il = data.length; i < il; ++i) {\n    data[i] /= extent;\n  }\n}","map":{"version":3,"sources":["../../../src/lib/parse-mvt.js"],"names":["options","normalizeOptions","binary","features","firstPassData","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","arrayBuffer","tile","loaderOptions","selectedLayers","Array","Object","layerName","vectorTileLayer","featureOptions","i","vectorTileFeature","decodedFeature","getDecodedFeatureBinary","getDecodedFeature","data","featuresToBinary","mvt","gis","wgs84Coordinates","tileIndex","hasTileIndex","Number","feature","extent","line","p","il"],"mappings":"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","sourcesContent":["// import {VectorTile} from '@mapbox/vector-tile';\nimport VectorTile from './mapbox-vector-tile/vector-tile';\nimport BinaryVectorTile from './binary-vector-tile/vector-tile';\n\nimport {featuresToBinary} from './binary-vector-tile/features-to-binary';\nimport Protobuf from 'pbf';\n\n/*\n * Parse MVT arrayBuffer and return GeoJSON.\n *\n * @param {arrayBuffer} _ A MVT arrayBuffer\n * @return {?Object} A GeoJSON geometry object or a binary representation\n */\nexport default function parseMVT(arrayBuffer, options) {\n  options = normalizeOptions(options);\n\n  const binary = options.gis.format === 'binary';\n  const features = [];\n  const firstPassData = {\n    pointPositionsCount: 0,\n    pointFeaturesCount: 0,\n    linePositionsCount: 0,\n    linePathsCount: 0,\n    lineFeaturesCount: 0,\n    polygonPositionsCount: 0,\n    polygonObjectsCount: 0,\n    polygonRingsCount: 0,\n    polygonFeaturesCount: 0\n  };\n\n  if (arrayBuffer.byteLength > 0) {\n    const tile = binary\n      ? new BinaryVectorTile(new Protobuf(arrayBuffer))\n      : new VectorTile(new Protobuf(arrayBuffer));\n    const loaderOptions = options.mvt;\n\n    const selectedLayers = Array.isArray(loaderOptions.layers)\n      ? loaderOptions.layers\n      : Object.keys(tile.layers);\n\n    selectedLayers.forEach((layerName) => {\n      const vectorTileLayer = tile.layers[layerName];\n      const featureOptions = {...loaderOptions, layerName};\n\n      if (!vectorTileLayer) {\n        return;\n      }\n\n      for (let i = 0; i < vectorTileLayer.length; i++) {\n        const vectorTileFeature = vectorTileLayer.feature(i, firstPassData);\n\n        const decodedFeature = binary\n          ? getDecodedFeatureBinary(vectorTileFeature, featureOptions)\n          : getDecodedFeature(vectorTileFeature, featureOptions);\n        features.push(decodedFeature);\n      }\n    });\n  }\n\n  if (binary) {\n    const data = featuresToBinary(features, firstPassData, options.gis);\n    // Add the original byteLength (as a reasonable approximation of the size of the binary data)\n    // TODO decide where to store extra fields like byteLength (header etc) and document\n    // @ts-ignore\n    data.byteLength = arrayBuffer.byteLength;\n    return data;\n  }\n\n  return features;\n}\n\nfunction normalizeOptions(options) {\n  options = {\n    ...options,\n    mvt: options.mvt || {},\n    gis: options.gis || {}\n  };\n\n  // Validate\n  const wgs84Coordinates = options.coordinates === 'wgs84';\n  const {tileIndex} = options;\n  const hasTileIndex =\n    tileIndex &&\n    Number.isFinite(tileIndex.x) &&\n    Number.isFinite(tileIndex.y) &&\n    Number.isFinite(tileIndex.z);\n\n  if (wgs84Coordinates && !hasTileIndex) {\n    throw new Error('MVT Loader: WGS84 coordinates need tileIndex property. Check documentation.');\n  }\n\n  return options;\n}\n\nfunction getDecodedFeature(feature, options = {}) {\n  const decodedFeature = feature.toGeoJSON(\n    options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinates\n  );\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n\nfunction getDecodedFeatureBinary(feature, options = {}) {\n  const decodedFeature = feature.toBinaryCoordinates(\n    options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinatesBinary\n  );\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n\nfunction transformToLocalCoordinates(line, feature) {\n  // This function transforms local coordinates in a\n  // [0 - bufferSize, this.extent + bufferSize] range to a\n  // [0 - (bufferSize / this.extent), 1 + (bufferSize / this.extent)] range.\n  // The resulting extent would be 1.\n  const {extent} = feature;\n\n  for (let i = 0; i < line.length; i++) {\n    const p = line[i];\n    p[0] /= extent;\n    p[1] /= extent;\n  }\n}\n\nfunction transformToLocalCoordinatesBinary(data, feature) {\n  // For the binary code path, the feature data is just\n  // one big flat array, so we just divide each value\n  const {extent} = feature;\n  for (let i = 0, il = data.length; i < il; ++i) {\n    data[i] /= extent;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}