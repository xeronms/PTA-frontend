{"ast":null,"code":"import _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getTransferList } from '../worker-utils/get-transfer-list';\nvar onMessageWrapperMap = new Map();\n\nvar WorkerBody = /*#__PURE__*/function () {\n  function WorkerBody() {\n    _classCallCheck(this, WorkerBody);\n  }\n\n  _createClass(WorkerBody, null, [{\n    key: \"onmessage\",\n    set: function set(onMessage) {\n      self.onmessage = function (message) {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        var _message$data = message.data,\n            type = _message$data.type,\n            payload = _message$data.payload;\n        onMessage(type, payload);\n      };\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(onMessage) {\n      var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n      if (!onMessageWrapper) {\n        onMessageWrapper = function onMessageWrapper(message) {\n          if (!isKnownMessage(message)) {\n            return;\n          }\n\n          var _message$data2 = message.data,\n              type = _message$data2.type,\n              payload = _message$data2.payload;\n          onMessage(type, payload);\n        };\n      }\n\n      self.addEventListener('message', onMessageWrapper);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(onMessage) {\n      var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n      onMessageWrapperMap.delete(onMessage);\n      self.removeEventListener('message', onMessageWrapper);\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(type, payload) {\n      if (self) {\n        var data = {\n          source: 'loaders.gl',\n          type: type,\n          payload: payload\n        };\n        var transferList = getTransferList(payload);\n        self.postMessage(data, transferList);\n      }\n    }\n  }]);\n\n  return WorkerBody;\n}();\n\nexport { WorkerBody as default };\n\nfunction isKnownMessage(message) {\n  var type = message.type,\n      data = message.data;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["onMessageWrapperMap","onmessage","self","message","isKnownMessage","payload","onMessage","addEventListener","onMessageWrapper","removeEventListener","postMessage","data","source","type","transferList","getTransferList"],"mappings":";;AACA,SAAA,eAAA,QAAA,mCAAA;AAEA,IAAMA,mBAAmB,GAAG,IAA5B,GAA4B,EAA5B;;IAKe,U;;;;;;;SAIFC,aAAS,SAATA,EAAsF;AAE/FC,MAAAA,IAAI,CAAJA,SAAAA,GAAkBC,UAAAA,OAAD,EAAa;AAC5B,YAAI,CAACC,cAAc,CAAnB,OAAmB,CAAnB,EAA8B;AAC5B;AACD;;AAGD,4BAAwBD,OAAO,CAA/B,IAAA;AAAA,YAAM,IAAN,iBAAM,IAAN;AAAA,YAAaE,OAAb,iBAAaA,OAAb;AACAC,QAAAA,SAAS,CAAA,IAAA,EAATA,OAAS,CAATA;AAPFJ,OAAAA;AASD;;;WAEMK,0BAAgB,SAAhBA,EAEL;AACA,UAAIC,gBAAgB,GAAGR,mBAAmB,CAAnBA,GAAAA,CAAvB,SAAuBA,CAAvB;;AAEA,UAAI,CAAJ,gBAAA,EAAuB;AACrBQ,QAAAA,gBAAgB,GAAIL,0BAAAA,OAAD,EAAa;AAC9B,cAAI,CAACC,cAAc,CAAnB,OAAmB,CAAnB,EAA8B;AAC5B;AACD;;AAGD,+BAAwBD,OAAO,CAA/B,IAAA;AAAA,cAAM,IAAN,kBAAM,IAAN;AAAA,cAAaE,OAAb,kBAAaA,OAAb;AACAC,UAAAA,SAAS,CAAA,IAAA,EAATA,OAAS,CAATA;AAPFE,SAAAA;AASD;;AAGDN,MAAAA,IAAI,CAAJA,gBAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AACD;;;WAEMO,6BAAmB,SAAnBA,EAEL;AACA,UAAMD,gBAAgB,GAAGR,mBAAmB,CAAnBA,GAAAA,CAAzB,SAAyBA,CAAzB;AACAA,MAAAA,mBAAmB,CAAnBA,MAAAA,CAAAA,SAAAA;AAEAE,MAAAA,IAAI,CAAJA,mBAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AACD;;;WAOMQ,qBAAW,IAAXA,EAAW,OAAXA,EAA0E;AAC/E,UAAA,IAAA,EAAU;AACR,YAAMC,IAAuB,GAAG;AAACC,UAAAA,MAAM,EAAP,YAAA;AAAuBC,UAAAA,IAAvB,EAAuBA,IAAvB;AAA6BR,UAAAA,OAAAA,EAAAA;AAA7B,SAAhC;AACA,YAAMS,YAAY,GAAGC,eAAe,CAApC,OAAoC,CAApC;AAGAb,QAAAA,IAAI,CAAJA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA;AACD;AACF;;;;;;SA5DY,U;;AAgEf,SAAA,cAAA,CAAA,OAAA,EAAiC;AAC/B,MAAM,IAAN,GAAA,OAAA,CAAM,IAAN;AAAA,MAAaS,IAAb,GAAA,OAAA,CAAaA,IAAb;AACA,SACEE,IAAI,KAAJA,SAAAA,IAAAA,IAAAA,IAEA,OAAOF,IAAI,CAAX,MAAA,KAFAE,QAAAA,IAGAF,IAAI,CAAJA,MAAAA,CAAAA,UAAAA,CAJF,YAIEA,CAJF;AAMD","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}