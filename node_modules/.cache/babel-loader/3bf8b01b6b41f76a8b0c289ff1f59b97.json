{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar defaultGetValue = function defaultGetValue(points) {\n  return points.length;\n};\n\nimport { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';\nvar MAX_32_BIT_FLOAT = 3.402823466e38;\n\nvar defaultGetPoints = function defaultGetPoints(bin) {\n  return bin.points;\n};\n\nvar defaultGetIndex = function defaultGetIndex(bin) {\n  return bin.index;\n};\n\nvar ascending = function ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n};\n\nvar defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nvar BinSorter = /*#__PURE__*/function () {\n  function BinSorter() {\n    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps;\n\n    _classCallCheck(this, BinSorter);\n\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n\n    this._updateMinMaxValues();\n\n    this.binMap = this.getBinMap();\n  }\n\n  _createClass(BinSorter, [{\n    key: \"getAggregatedBins\",\n    value: function getAggregatedBins(bins, props) {\n      var _props$getValue = props.getValue,\n          getValue = _props$getValue === void 0 ? defaultGetValue : _props$getValue,\n          _props$getPoints = props.getPoints,\n          getPoints = _props$getPoints === void 0 ? defaultGetPoints : _props$getPoints,\n          _props$getIndex = props.getIndex,\n          getIndex = _props$getIndex === void 0 ? defaultGetIndex : _props$getIndex,\n          filterData = props.filterData;\n      var hasFilter = typeof filterData === 'function';\n      var binCount = bins.length;\n      var aggregatedBins = [];\n      var index = 0;\n\n      for (var binIndex = 0; binIndex < binCount; binIndex++) {\n        var bin = bins[binIndex];\n        var points = getPoints(bin);\n        var i = getIndex(bin);\n        var filteredPoints = hasFilter ? points.filter(filterData) : points;\n        bin.filteredPoints = hasFilter ? filteredPoints : null;\n        var value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n        if (value !== null && value !== undefined) {\n          aggregatedBins[index] = {\n            i: Number.isFinite(i) ? i : binIndex,\n            value: value,\n            counts: filteredPoints.length\n          };\n          index++;\n        }\n      }\n\n      return aggregatedBins;\n    }\n  }, {\n    key: \"_percentileToIndex\",\n    value: function _percentileToIndex(percentileRange) {\n      var len = this.sortedBins.length;\n\n      if (len < 2) {\n        return [0, 0];\n      }\n\n      var _percentileRange$map = percentileRange.map(function (n) {\n        return clamp(n, 0, 100);\n      }),\n          _percentileRange$map2 = _slicedToArray(_percentileRange$map, 2),\n          lower = _percentileRange$map2[0],\n          upper = _percentileRange$map2[1];\n\n      var lowerIdx = Math.ceil(lower / 100 * (len - 1));\n      var upperIdx = Math.floor(upper / 100 * (len - 1));\n      return [lowerIdx, upperIdx];\n    }\n  }, {\n    key: \"getBinMap\",\n    value: function getBinMap() {\n      var binMap = {};\n\n      var _iterator = _createForOfIteratorHelper(this.aggregatedBins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var bin = _step.value;\n          binMap[bin.i] = bin;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return binMap;\n    }\n  }, {\n    key: \"_updateMinMaxValues\",\n    value: function _updateMinMaxValues() {\n      var maxCount = 0;\n      var maxValue = 0;\n      var minValue = MAX_32_BIT_FLOAT;\n      var totalCount = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(this.aggregatedBins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var x = _step2.value;\n          maxCount = maxCount > x.counts ? maxCount : x.counts;\n          maxValue = maxValue > x.value ? maxValue : x.value;\n          minValue = minValue < x.value ? minValue : x.value;\n          totalCount += x.counts;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.maxCount = maxCount;\n      this.maxValue = maxValue;\n      this.minValue = minValue;\n      this.totalCount = totalCount;\n    }\n  }, {\n    key: \"getValueRange\",\n    value: function getValueRange(percentileRange) {\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n\n      if (!this.sortedBins.length) {\n        return [];\n      }\n\n      var lowerIdx = 0;\n      var upperIdx = this.sortedBins.length - 1;\n\n      if (Array.isArray(percentileRange)) {\n        var idxRange = this._percentileToIndex(percentileRange);\n\n        lowerIdx = idxRange[0];\n        upperIdx = idxRange[1];\n      }\n\n      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n  }, {\n    key: \"getValueDomainByScale\",\n    value: function getValueDomainByScale(scale) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [],\n          _ref2 = _slicedToArray(_ref, 2),\n          _ref2$ = _ref2[0],\n          lower = _ref2$ === void 0 ? 0 : _ref2$,\n          _ref2$2 = _ref2[1],\n          upper = _ref2$2 === void 0 ? 100 : _ref2$2;\n\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n\n      if (!this.sortedBins.length) {\n        return [];\n      }\n\n      var indexEdge = this._percentileToIndex([lower, upper]);\n\n      return this._getScaleDomain(scale, indexEdge);\n    }\n  }, {\n    key: \"_getScaleDomain\",\n    value: function _getScaleDomain(scaleType, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          lowerIdx = _ref4[0],\n          upperIdx = _ref4[1];\n\n      var bins = this.sortedBins;\n\n      switch (scaleType) {\n        case 'quantize':\n        case 'linear':\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n\n        case 'quantile':\n          return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), function (d) {\n            return d.value;\n          });\n\n        case 'ordinal':\n          return getOrdinalDomain(bins, function (d) {\n            return d.value;\n          });\n\n        default:\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n      }\n    }\n  }]);\n\n  return BinSorter;\n}();\n\nexport { BinSorter as default };","map":{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","MAX_32_BIT_FLOAT","defaultGetPoints","bin","defaultGetIndex","ascending","a","defaultProps","getValue","getPoints","getIndex","filterData","constructor","bins","props","getAggregatedBins","hasFilter","binCount","aggregatedBins","index","binIndex","i","filteredPoints","value","Number","counts","length","_percentileToIndex","len","percentileRange","n","clamp","lowerIdx","Math","lower","upperIdx","upper","getBinMap","binMap","_updateMinMaxValues","maxCount","maxValue","minValue","totalCount","x","getValueRange","b","Array","idxRange","getValueDomainByScale","indexEdge","_getScaleDomain","getQuantileDomain","d","getOrdinalDomain"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap() {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}