{"ast":null,"code":"import _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nvar DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\nexport var OrbitState = /*#__PURE__*/function (_ViewState) {\n  _inherits(OrbitState, _ViewState);\n\n  var _super = _createSuper(OrbitState);\n\n  function OrbitState(_ref) {\n    var _this;\n\n    var makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        _ref$rotationX = _ref.rotationX,\n        rotationX = _ref$rotationX === void 0 ? DEFAULT_STATE.rotationX : _ref$rotationX,\n        _ref$rotationOrbit = _ref.rotationOrbit,\n        rotationOrbit = _ref$rotationOrbit === void 0 ? DEFAULT_STATE.rotationOrbit : _ref$rotationOrbit,\n        _ref$target = _ref.target,\n        target = _ref$target === void 0 ? DEFAULT_STATE.target : _ref$target,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? DEFAULT_STATE.zoom : _ref$zoom,\n        _ref$minRotationX = _ref.minRotationX,\n        minRotationX = _ref$minRotationX === void 0 ? DEFAULT_STATE.minRotationX : _ref$minRotationX,\n        _ref$maxRotationX = _ref.maxRotationX,\n        maxRotationX = _ref$maxRotationX === void 0 ? DEFAULT_STATE.maxRotationX : _ref$maxRotationX,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n        startPanPosition = _ref.startPanPosition,\n        startRotatePos = _ref.startRotatePos,\n        startRotationX = _ref.startRotationX,\n        startRotationOrbit = _ref.startRotationOrbit,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, OrbitState);\n\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      rotationX: rotationX,\n      rotationOrbit: rotationOrbit,\n      target: target,\n      zoom: zoom,\n      minRotationX: minRotationX,\n      maxRotationX: maxRotationX,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n    _this._state = {\n      startPanPosition: startPanPosition,\n      startRotatePos: startRotatePos,\n      startRotationX: startRotationX,\n      startRotationOrbit: startRotationOrbit,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(OrbitState, [{\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanPosition: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPosition = _ref3.startPosition;\n      var startPanPosition = this._state.startPanPosition || startPosition;\n\n      if (!startPanPosition) {\n        return this;\n      }\n\n      var viewport = this.makeViewport(this._viewportProps);\n      var newProps = viewport.panByPosition(startPanPosition, pos);\n      return this._getUpdatedState(newProps);\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startRotationX: this._viewportProps.rotationX,\n        startRotationOrbit: this._viewportProps.rotationOrbit\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startRotationX = _this$_state.startRotationX,\n          startRotationOrbit = _this$_state.startRotationOrbit;\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n\n      if (!startRotatePos || !Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n        if (startRotationX < -90 || startRotationX > 90) {\n          deltaScaleX *= -1;\n        }\n\n        newRotation = {\n          rotationX: startRotationX + deltaScaleY * 180,\n          rotationOrbit: startRotationOrbit + deltaScaleX * 180\n        };\n      } else {\n        newRotation = {\n          rotationX: startRotationX + deltaAngleY,\n          rotationOrbit: startRotationOrbit + deltaAngleX\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotationX: null,\n        startRotationOrbit: null\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var rotationOrbit = props.rotationOrbit;\n\n      if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n        props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomPosition: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var zoom = this._viewportProps.zoom;\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomPosition = _this$_state2.startZoomPosition;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = zoom;\n        startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var newZoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread(_objectSpread({}, this._viewportProps), {}, {\n        zoom: newZoom\n      }));\n      return this._getUpdatedState(_objectSpread({\n        zoom: newZoom\n      }, zoomedViewport.panByPosition(startZoomPosition, pos)));\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: speed\n        })\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 1 / speed\n        })\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX - speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX + speed\n      });\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n          startZoom = _ref8.startZoom;\n      var _this$_viewportProps2 = this._viewportProps,\n          maxZoom = _this$_viewportProps2.maxZoom,\n          minZoom = _this$_viewportProps2.minZoom;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n      }\n\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps3 = this._viewportProps,\n          width = _this$_viewportProps3.width,\n          height = _this$_viewportProps3.height,\n          target = _this$_viewportProps3.target;\n      return this.pan({\n        startPosition: target,\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread(_objectSpread(_objectSpread({}, this._viewportProps), this._state), newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom,\n          maxRotationX = props.maxRotationX,\n          minRotationX = props.minRotationX,\n          rotationOrbit = props.rotationOrbit;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n\n      if (rotationOrbit < -180 || rotationOrbit > 180) {\n        props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n      }\n\n      return props;\n    }\n  }]);\n\n  return OrbitState;\n}(ViewState);\n\nvar OrbitController = /*#__PURE__*/function (_Controller) {\n  _inherits(OrbitController, _Controller);\n\n  var _super2 = _createSuper(OrbitController);\n\n  function OrbitController(props) {\n    _classCallCheck(this, OrbitController);\n\n    return _super2.call(this, OrbitState, props);\n  }\n\n  _createClass(OrbitController, [{\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['target', 'zoom', 'rotationX', 'rotationOrbit'];\n    }\n  }]);\n\n  return OrbitController;\n}(Controller);\n\nexport { OrbitController as default };","map":{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["DEFAULT_STATE","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","maxZoom","Infinity","constructor","startZoom","width","height","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","panStart","pos","pan","startPosition","viewport","newProps","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","Number","deltaScaleX","deltaScaleY","newRotation","rotateEnd","shortestPathFrom","fromProps","viewState","props","_viewportProps","Math","zoomStart","scale","newZoom","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","_unproject","_calculateNewZoom","clamp","_panFromCenter","offset","_getUpdatedState","_applyConstraints","mod"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}) {\n    const startPanPosition = this._state.startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom} = this._viewportProps;\n    let {startZoom, startZoomPosition} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed = 50) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed = 50) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed = 50) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this._viewportProps;\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom', 'rotationX', 'rotationOrbit'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}