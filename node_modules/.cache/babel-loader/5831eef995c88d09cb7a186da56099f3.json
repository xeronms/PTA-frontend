{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as fs from '../node/fs';\n\nvar NodeFileSystem = /*#__PURE__*/function () {\n  function NodeFileSystem(options) {\n    _classCallCheck(this, NodeFileSystem);\n\n    this.fetch = options._fetch;\n  }\n\n  _createClass(NodeFileSystem, [{\n    key: \"readdir\",\n    value: function () {\n      var _readdir = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dirname,\n            options,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dirname = _args.length > 0 && _args[0] !== undefined ? _args[0] : '.';\n                options = _args.length > 1 ? _args[1] : undefined;\n                _context.next = 4;\n                return fs.readdir(dirname, options);\n\n              case 4:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function readdir() {\n        return _readdir.apply(this, arguments);\n      }\n\n      return readdir;\n    }()\n  }, {\n    key: \"stat\",\n    value: function () {\n      var _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path, options) {\n        var info;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fs.stat(path, options);\n\n              case 2:\n                info = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  size: Number(info.size),\n                  isDirectory: function isDirectory() {\n                    return false;\n                  },\n                  info: info\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function stat(_x, _x2) {\n        return _stat.apply(this, arguments);\n      }\n\n      return stat;\n    }()\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(path, options) {\n        var fallbackFetch;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                fallbackFetch = options.fetch || this.fetch;\n                return _context3.abrupt(\"return\", fallbackFetch(path, options));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetch(_x3, _x4) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path, flags, mode) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return fs.open(path, flags);\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function open(_x5, _x6, _x7) {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(fd) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return fs.close(fd);\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function close(_x8) {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"fstat\",\n    value: function () {\n      var _fstat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fd) {\n        var info;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return fs.fstat(fd);\n\n              case 2:\n                info = _context6.sent;\n                return _context6.abrupt(\"return\", info);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function fstat(_x9) {\n        return _fstat.apply(this, arguments);\n      }\n\n      return fstat;\n    }()\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(fd, _ref) {\n        var _ref$buffer, buffer, _ref$offset, offset, _ref$length, length, _ref$position, position, totalBytesRead, _yield$fs$read, bytesRead;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _ref$buffer = _ref.buffer, buffer = _ref$buffer === void 0 ? null : _ref$buffer, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$length = _ref.length, length = _ref$length === void 0 ? buffer.byteLength : _ref$length, _ref$position = _ref.position, position = _ref$position === void 0 ? null : _ref$position;\n                totalBytesRead = 0;\n\n              case 2:\n                if (!(totalBytesRead < length)) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                _context7.next = 5;\n                return fs.read(fd, buffer, offset + totalBytesRead, length - totalBytesRead, position + totalBytesRead);\n\n              case 5:\n                _yield$fs$read = _context7.sent;\n                bytesRead = _yield$fs$read.bytesRead;\n                totalBytesRead += bytesRead;\n                _context7.next = 2;\n                break;\n\n              case 10:\n                return _context7.abrupt(\"return\", {\n                  bytesRead: totalBytesRead,\n                  buffer: buffer\n                });\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function read(_x10, _x11) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }]);\n\n  return NodeFileSystem;\n}();\n\nexport { NodeFileSystem as default };","map":{"version":3,"sources":["../../../../src/lib/filesystems/node-filesystem.ts"],"names":["constructor","options","readdir","dirname","fs","stat","info","size","Number","isDirectory","fetch","fallbackFetch","open","close","fstat","read","buffer","offset","length","position","totalBytesRead","bytesRead"],"mappings":"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","sourcesContent":["import * as fs from '../node/fs';\nimport {IFileSystem, IRandomAccessReadFileSystem} from '@loaders.gl/loader-utils';\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n\ntype Stat = {\n  size: number;\n  isDirectory: () => boolean;\n  info?: fs.Stats;\n};\n\ntype ReadOptions = {\n  buffer?: Buffer;\n  offset?: number;\n  length?: number;\n  position?: number;\n};\n\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @param options\n */\nexport default class NodeFileSystem implements IFileSystem, IRandomAccessReadFileSystem {\n  // implements IFileSystem\n  constructor(options: {[key: string]: any}) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir(dirname = '.', options?: {}): Promise<any[]> {\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path: string, options?: {}): Promise<Stat> {\n    const info = await fs.stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path: string, options: {[key: string]: any}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    // eslint-disable-next-line\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  // implements IRandomAccessFileSystem\n  async open(path: string, flags: string | number, mode?: any): Promise<number> {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd: number): Promise<void> {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd: number): Promise<Stat> {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(\n    fd: number,\n    // @ts-ignore Possibly null\n    {buffer = null, offset = 0, length = buffer.byteLength, position = null}: ReadOptions\n  ): Promise<{bytesRead: number; buffer: Buffer}> {\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fs.read(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}