{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TILE3D_TYPE } from '../constants';\nimport { getMagicString } from './helpers/parse-utils';\nimport { parsePointCloud3DTile } from './parse-3d-tile-point-cloud';\nimport { parseBatchedModel3DTile } from './parse-3d-tile-batched-model';\nimport { parseInstancedModel3DTile } from './parse-3d-tile-instanced-model';\nimport { parseComposite3DTile } from './parse-3d-tile-composite';\nexport function parse3DTile(_x) {\n  return _parse3DTile.apply(this, arguments);\n}\n\nfunction _parse3DTile() {\n  _parse3DTile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var byteOffset,\n        options,\n        context,\n        tile,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;\n            options = _args.length > 2 ? _args[2] : undefined;\n            context = _args.length > 3 ? _args[3] : undefined;\n            tile = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};\n            tile.byteOffset = byteOffset;\n            tile.type = getMagicString(arrayBuffer, byteOffset);\n            _context.t0 = tile.type;\n            _context.next = _context.t0 === TILE3D_TYPE.COMPOSITE ? 9 : _context.t0 === TILE3D_TYPE.BATCHED_3D_MODEL ? 12 : _context.t0 === TILE3D_TYPE.INSTANCED_3D_MODEL ? 15 : _context.t0 === TILE3D_TYPE.POINT_CLOUD ? 18 : 21;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 12:\n            _context.next = 14;\n            return parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            _context.next = 17;\n            return parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n          case 17:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 18:\n            _context.next = 20;\n            return parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n          case 20:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 21:\n            throw new Error(\"3DTileLoader: unknown type \".concat(tile.type));\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse3DTile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile.js"],"names":["byteOffset","tile","getMagicString","TILE3D_TYPE","parseComposite3DTile","parseBatchedModel3DTile","parseInstancedModel3DTile","parsePointCloud3DTile"],"mappings":";;AAGA,SAAA,WAAA,QAAA,cAAA;AACA,SAAA,cAAA,QAAA,uBAAA;AAEA,SAAA,qBAAA,QAAA,6BAAA;AACA,SAAA,uBAAA,QAAA,+BAAA;AACA,SAAA,yBAAA,QAAA,iCAAA;AACA,SAAA,oBAAA,QAAA,2BAAA;AAGA,gBAAO,WAAP;AAAA;AAAA;;;0EAAO,iBAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwCA,YAAAA,UAAxC,2DAAA,CAAA;AAAA,YAAA,OAAA;AAAA,YAAA,OAAA;AAA0EC,YAAAA,IAA1E,2DAAA,EAAA;AACLA,YAAAA,IAAI,CAAJA,UAAAA,GAAAA,UAAAA;AACAA,YAAAA,IAAI,CAAJA,IAAAA,GAAYC,cAAc,CAAA,WAAA,EAA1BD,UAA0B,CAA1BA;AAFK,0BAIGA,IAAI,CAAZ,IAJK;AAAA,4CAKEE,WAAW,CAAhB,SALG,uBAgBEA,WAAW,CAAhB,gBAhBG,wBAmBEA,WAAW,CAAhB,kBAnBG,wBAsBEA,WAAW,CAAhB,WAtBG;AAAA;;AAAA;AAAA;AAAA,mBAOYC,oBAAoB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAjC,WAAiC,CAPhC;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBYC,uBAAuB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAApC,OAAoC,CAjBnC;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAoBYC,yBAAyB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAtC,OAAsC,CApBrC;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAuBYC,qBAAqB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAlC,OAAkC,CAvBjC;;AAAA;AAAA;;AAAA;AAAA,kBA0BK,IAAA,KAAA,CAAA,8BAAA,MAAA,CAAwCN,IAAI,CAAlD,IAAM,CAAA,CA1BL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}