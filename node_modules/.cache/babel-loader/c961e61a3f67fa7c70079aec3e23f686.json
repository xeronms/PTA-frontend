{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; if (typeof Symbol !== \"undefined\") { async = Symbol.asyncIterator; sync = Symbol.iterator; } while (retry--) { if (async && (method = iterable[async]) != null) { return method.call(iterable); } if (sync && (method = iterable[sync]) != null) { return new AsyncFromSyncIterator(method.call(iterable)); } async = \"@@asyncIterator\"; sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s; this.n = s.next; }; AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; if (ret === undefined) { return Promise.resolve({ value: value, done: true }); } return AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; if (thr === undefined) return Promise.reject(value); return AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }; function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) { return Promise.reject(new TypeError(r + \" is not an object.\")); } var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return new AsyncFromSyncIterator(s); }\n\nimport { isAsyncIterable } from '../utils/iterable-utils';\nimport { PROP_SYMBOLS } from './constants';\nvar ASYNC_ORIGINAL = PROP_SYMBOLS.ASYNC_ORIGINAL,\n    ASYNC_RESOLVED = PROP_SYMBOLS.ASYNC_RESOLVED,\n    ASYNC_DEFAULTS = PROP_SYMBOLS.ASYNC_DEFAULTS;\nvar EMPTY_PROPS = Object.freeze({});\n\nvar ComponentState = /*#__PURE__*/function () {\n  function ComponentState() {\n    var component = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, ComponentState);\n\n    this.component = component;\n    this.asyncProps = {};\n\n    this.onAsyncPropUpdated = function () {};\n\n    this.oldProps = EMPTY_PROPS;\n    this.oldAsyncProps = null;\n  }\n\n  _createClass(ComponentState, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var propName in this.asyncProps) {\n        var asyncProp = this.asyncProps[propName];\n\n        if (asyncProp.type && asyncProp.type.release) {\n          asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n        }\n      }\n    }\n  }, {\n    key: \"getOldProps\",\n    value: function getOldProps() {\n      return this.oldAsyncProps || this.oldProps;\n    }\n  }, {\n    key: \"resetOldProps\",\n    value: function resetOldProps() {\n      this.oldAsyncProps = null;\n      this.oldProps = this.component.props;\n    }\n  }, {\n    key: \"freezeAsyncOldProps\",\n    value: function freezeAsyncOldProps() {\n      if (!this.oldAsyncProps) {\n        this.oldProps = this.oldProps || this.component.props;\n        this.oldAsyncProps = Object.create(this.oldProps);\n\n        for (var propName in this.asyncProps) {\n          Object.defineProperty(this.oldAsyncProps, propName, {\n            enumerable: true,\n            value: this.oldProps[propName]\n          });\n        }\n      }\n    }\n  }, {\n    key: \"hasAsyncProp\",\n    value: function hasAsyncProp(propName) {\n      return propName in this.asyncProps;\n    }\n  }, {\n    key: \"getAsyncProp\",\n    value: function getAsyncProp(propName) {\n      var asyncProp = this.asyncProps[propName];\n      return asyncProp && asyncProp.resolvedValue;\n    }\n  }, {\n    key: \"isAsyncPropLoading\",\n    value: function isAsyncPropLoading(propName) {\n      if (propName) {\n        var asyncProp = this.asyncProps[propName];\n        return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);\n      }\n\n      for (var key in this.asyncProps) {\n        if (this.isAsyncPropLoading(key)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"reloadAsyncProp\",\n    value: function reloadAsyncProp(propName, value) {\n      this._watchPromise(propName, Promise.resolve(value));\n    }\n  }, {\n    key: \"setAsyncProps\",\n    value: function setAsyncProps(props) {\n      var resolvedValues = props[ASYNC_RESOLVED] || {};\n      var originalValues = props[ASYNC_ORIGINAL] || props;\n      var defaultValues = props[ASYNC_DEFAULTS] || {};\n\n      for (var propName in resolvedValues) {\n        var value = resolvedValues[propName];\n\n        this._createAsyncPropData(propName, defaultValues[propName]);\n\n        this._updateAsyncProp(propName, value);\n\n        resolvedValues[propName] = this.getAsyncProp(propName);\n      }\n\n      for (var _propName in originalValues) {\n        var _value = originalValues[_propName];\n\n        this._createAsyncPropData(_propName, defaultValues[_propName]);\n\n        this._updateAsyncProp(_propName, _value);\n      }\n    }\n  }, {\n    key: \"_updateAsyncProp\",\n    value: function _updateAsyncProp(propName, value) {\n      if (!this._didAsyncInputValueChange(propName, value)) {\n        return;\n      }\n\n      if (typeof value === 'string') {\n        var _this$layer;\n\n        var fetch = (_this$layer = this.layer) === null || _this$layer === void 0 ? void 0 : _this$layer.props.fetch;\n        var url = value;\n\n        if (fetch) {\n          value = fetch(url, {\n            propName: propName,\n            layer: this.layer\n          });\n        }\n      }\n\n      if (value instanceof Promise) {\n        this._watchPromise(propName, value);\n\n        return;\n      }\n\n      if (isAsyncIterable(value)) {\n        this._resolveAsyncIterable(propName, value);\n\n        return;\n      }\n\n      this._setPropValue(propName, value);\n    }\n  }, {\n    key: \"_didAsyncInputValueChange\",\n    value: function _didAsyncInputValueChange(propName, value) {\n      var asyncProp = this.asyncProps[propName];\n\n      if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n        return false;\n      }\n\n      asyncProp.lastValue = value;\n      return true;\n    }\n  }, {\n    key: \"_setPropValue\",\n    value: function _setPropValue(propName, value) {\n      this.freezeAsyncOldProps();\n      var asyncProp = this.asyncProps[propName];\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }, {\n    key: \"_setAsyncPropValue\",\n    value: function _setAsyncPropValue(propName, value, loadCount) {\n      var asyncProp = this.asyncProps[propName];\n\n      if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n        this.freezeAsyncOldProps();\n        asyncProp.resolvedValue = value;\n        asyncProp.resolvedLoadCount = loadCount;\n        this.onAsyncPropUpdated(propName, value);\n      }\n    }\n  }, {\n    key: \"_watchPromise\",\n    value: function _watchPromise(propName, promise) {\n      var _this = this;\n\n      var asyncProp = this.asyncProps[propName];\n      asyncProp.pendingLoadCount++;\n      var loadCount = asyncProp.pendingLoadCount;\n      promise.then(function (data) {\n        var _this$layer2;\n\n        data = _this._postProcessValue(asyncProp, data);\n\n        _this._setAsyncPropValue(propName, data, loadCount);\n\n        var onDataLoad = (_this$layer2 = _this.layer) === null || _this$layer2 === void 0 ? void 0 : _this$layer2.props.onDataLoad;\n\n        if (propName === 'data' && onDataLoad) {\n          onDataLoad(data, {\n            propName: propName,\n            layer: _this.layer\n          });\n        }\n      }).catch(function (error) {\n        var _this$layer3;\n\n        (_this$layer3 = _this.layer) === null || _this$layer3 === void 0 ? void 0 : _this$layer3.raiseError(error, \"loading \".concat(propName, \" of \").concat(_this.layer));\n      });\n    }\n  }, {\n    key: \"_resolveAsyncIterable\",\n    value: function () {\n      var _resolveAsyncIterable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(propName, iterable) {\n        var _this$layer4, asyncProp, loadCount, data, count, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, _ref, dataTransform, onDataLoad;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (propName !== 'data') {\n                  this._setPropValue(propName, iterable);\n                }\n\n                asyncProp = this.asyncProps[propName];\n                asyncProp.pendingLoadCount++;\n                loadCount = asyncProp.pendingLoadCount;\n                data = [];\n                count = 0;\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context.prev = 8;\n                _iterator = _asyncIterator(iterable);\n\n              case 10:\n                _context.next = 12;\n                return _iterator.next();\n\n              case 12:\n                if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                chunk = _step.value;\n                _ref = this.component ? this.component.props : {}, dataTransform = _ref.dataTransform;\n\n                if (dataTransform) {\n                  data = dataTransform(chunk, data);\n                } else {\n                  data = data.concat(chunk);\n                }\n\n                Object.defineProperty(data, '__diff', {\n                  enumerable: false,\n                  value: [{\n                    startRow: count,\n                    endRow: data.length\n                  }]\n                });\n                count = data.length;\n\n                this._setAsyncPropValue(propName, data, loadCount);\n\n              case 19:\n                _iteratorAbruptCompletion = false;\n                _context.next = 10;\n                break;\n\n              case 22:\n                _context.next = 28;\n                break;\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context[\"catch\"](8);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 28:\n                _context.prev = 28;\n                _context.prev = 29;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context.next = 33;\n                  break;\n                }\n\n                _context.next = 33;\n                return _iterator.return();\n\n              case 33:\n                _context.prev = 33;\n\n                if (!_didIteratorError) {\n                  _context.next = 36;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 36:\n                return _context.finish(33);\n\n              case 37:\n                return _context.finish(28);\n\n              case 38:\n                onDataLoad = (_this$layer4 = this.layer) === null || _this$layer4 === void 0 ? void 0 : _this$layer4.props.onDataLoad;\n\n                if (onDataLoad) {\n                  onDataLoad(data, {\n                    propName: propName,\n                    layer: this.layer\n                  });\n                }\n\n              case 40:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 24, 28, 38], [29,, 33, 37]]);\n      }));\n\n      function _resolveAsyncIterable(_x, _x2) {\n        return _resolveAsyncIterable2.apply(this, arguments);\n      }\n\n      return _resolveAsyncIterable;\n    }()\n  }, {\n    key: \"_postProcessValue\",\n    value: function _postProcessValue(asyncProp, value) {\n      var propType = asyncProp.type;\n\n      if (propType) {\n        if (propType.release) {\n          propType.release(asyncProp.resolvedValue, propType, this.component);\n        }\n\n        if (propType.transform) {\n          return propType.transform(value, propType, this.component);\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_createAsyncPropData\",\n    value: function _createAsyncPropData(propName, defaultValue) {\n      var asyncProp = this.asyncProps[propName];\n\n      if (!asyncProp) {\n        var propTypes = this.component && this.component.constructor._propTypes;\n        this.asyncProps[propName] = {\n          type: propTypes && propTypes[propName],\n          lastValue: null,\n          resolvedValue: defaultValue,\n          pendingLoadCount: 0,\n          resolvedLoadCount: 0\n        };\n      }\n    }\n  }]);\n\n  return ComponentState;\n}();\n\nexport { ComponentState as default };","map":{"version":3,"sources":["../../../src/lifecycle/component-state.js"],"names":["ASYNC_DEFAULTS","EMPTY_PROPS","Object","constructor","component","finalize","asyncProp","getOldProps","resetOldProps","freezeAsyncOldProps","enumerable","value","hasAsyncProp","propName","getAsyncProp","isAsyncPropLoading","Boolean","reloadAsyncProp","Promise","setAsyncProps","resolvedValues","props","originalValues","defaultValues","_updateAsyncProp","fetch","url","layer","isAsyncIterable","_didAsyncInputValueChange","_setPropValue","_setAsyncPropValue","loadCount","_watchPromise","promise","data","onDataLoad","error","count","dataTransform","startRow","endRow","length","_postProcessValue","propType","_createAsyncPropData","propTypes","type","lastValue","resolvedValue","pendingLoadCount","resolvedLoadCount"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {PROP_SYMBOLS} from './constants';\nconst {ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\n\nconst EMPTY_PROPS = Object.freeze({});\n\nexport default class ComponentState {\n  constructor(component = null) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = EMPTY_PROPS; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n      }\n    }\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      // Make sure oldProps is set\n      this.oldProps = this.oldProps || this.component.props;\n\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // ASYNC PROP HANDLING\n  //\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName, value) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED] || {};\n    const originalValues = props[ASYNC_ORIGINAL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      const fetch = this.layer?.props.fetch;\n      const url = value;\n      if (fetch) {\n        value = fetch(url, {propName, layer: this.layer});\n      }\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  _setPropValue(propName, value) {\n    // Save the current value before overwriting so that diffProps can access both\n    this.freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    value = this._postProcessValue(asyncProp, value);\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  _setAsyncPropValue(propName, value, loadCount) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this.freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise\n      .then(data => {\n        data = this._postProcessValue(asyncProp, data);\n        this._setAsyncPropValue(propName, data, loadCount);\n\n        const onDataLoad = this.layer?.props.onDataLoad;\n        if (propName === 'data' && onDataLoad) {\n          onDataLoad(data, {propName, layer: this.layer});\n        }\n      })\n      .catch(error => {\n        this.layer?.raiseError(error, `loading ${propName} of ${this.layer}`);\n      });\n  }\n\n  async _resolveAsyncIterable(propName, iterable) {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      const {dataTransform} = this.component ? this.component.props : {};\n      if (dataTransform) {\n        data = dataTransform(chunk, data);\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    const onDataLoad = this.layer?.props.onDataLoad;\n    if (onDataLoad) {\n      onDataLoad(data, {propName, layer: this.layer});\n    }\n  }\n\n  // Give the app a chance to post process the loaded data\n  _postProcessValue(asyncProp, value) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  _createAsyncPropData(propName, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}