{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getBinaryImageMetadata } from '@loaders.gl/images';\nimport { padToNBytes, copyToArray } from '@loaders.gl/loader-utils';\nimport { assert } from '../utils/assert';\nimport { getAccessorArrayTypeAndLength, getAccessorTypeFromSize, getComponentTypeFromArray } from '../gltf-utils/gltf-utils';\nvar DEFAULT_GLTF_JSON = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\nvar GLTFScenegraph = /*#__PURE__*/function () {\n  function GLTFScenegraph(gltf) {\n    _classCallCheck(this, GLTFScenegraph);\n\n    _defineProperty(this, \"gltf\", void 0);\n\n    _defineProperty(this, \"sourceBuffers\", void 0);\n\n    _defineProperty(this, \"byteLength\", void 0);\n\n    this.gltf = gltf || {\n      json: _objectSpread({}, DEFAULT_GLTF_JSON),\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  _createClass(GLTFScenegraph, [{\n    key: \"json\",\n    get: function get() {\n      return this.gltf.json;\n    }\n  }, {\n    key: \"getApplicationData\",\n    value: function getApplicationData(key) {\n      var data = this.json[key];\n      return data;\n    }\n  }, {\n    key: \"getExtraData\",\n    value: function getExtraData(key) {\n      var extras = this.json.extras || {};\n      return extras[key];\n    }\n  }, {\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      var isExtension = this.getUsedExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      var extensions = this.json.extensions || {};\n      return isExtension ? extensions[extensionName] || true : null;\n    }\n  }, {\n    key: \"getRequiredExtension\",\n    value: function getRequiredExtension(extensionName) {\n      var isRequired = this.getRequiredExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      return isRequired ? this.getExtension(extensionName) : null;\n    }\n  }, {\n    key: \"getRequiredExtensions\",\n    value: function getRequiredExtensions() {\n      return this.json.extensionsRequired || [];\n    }\n  }, {\n    key: \"getUsedExtensions\",\n    value: function getUsedExtensions() {\n      return this.json.extensionsUsed || [];\n    }\n  }, {\n    key: \"getObjectExtension\",\n    value: function getObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      return extensions[extensionName];\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene(index) {\n      return this.getObject('scenes', index);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(index) {\n      return this.getObject('nodes', index);\n    }\n  }, {\n    key: \"getSkin\",\n    value: function getSkin(index) {\n      return this.getObject('skins', index);\n    }\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(index) {\n      return this.getObject('meshes', index);\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(index) {\n      return this.getObject('materials', index);\n    }\n  }, {\n    key: \"getAccessor\",\n    value: function getAccessor(index) {\n      return this.getObject('accessors', index);\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(index) {\n      return this.getObject('textures', index);\n    }\n  }, {\n    key: \"getSampler\",\n    value: function getSampler(index) {\n      return this.getObject('samplers', index);\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(index) {\n      return this.getObject('images', index);\n    }\n  }, {\n    key: \"getBufferView\",\n    value: function getBufferView(index) {\n      return this.getObject('bufferViews', index);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(index) {\n      return this.getObject('buffers', index);\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject(array, index) {\n      if (typeof index === 'object') {\n        return index;\n      }\n\n      var object = this.json[array] && this.json[array][index];\n\n      if (!object) {\n        throw new Error(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n      }\n\n      return object;\n    }\n  }, {\n    key: \"getTypedArrayForBufferView\",\n    value: function getTypedArrayForBufferView(bufferView) {\n      bufferView = this.getBufferView(bufferView);\n      var bufferIndex = bufferView.buffer;\n      var binChunk = this.gltf.buffers[bufferIndex];\n      assert(binChunk);\n      var byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n      return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"getTypedArrayForAccessor\",\n    value: function getTypedArrayForAccessor(accessor) {\n      accessor = this.getAccessor(accessor);\n      var bufferView = this.getBufferView(accessor.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n\n      var _getAccessorArrayType = getAccessorArrayTypeAndLength(accessor, bufferView),\n          ArrayType = _getAccessorArrayType.ArrayType,\n          length = _getAccessorArrayType.length;\n\n      var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n      return new ArrayType(arrayBuffer, byteOffset, length);\n    }\n  }, {\n    key: \"getTypedArrayForImageData\",\n    value: function getTypedArrayForImageData(image) {\n      image = this.getAccessor(image);\n      var bufferView = this.getBufferView(image.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n      var byteOffset = bufferView.byteOffset || 0;\n      return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      this.json[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addExtraData\",\n    value: function addExtraData(key, data) {\n      this.json.extras = this.json.extras || {};\n      this.json.extras[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addObjectExtension\",\n    value: function addObjectExtension(object, extensionName, data) {\n      object.extensions = object.extensions || {};\n      object.extensions[extensionName] = data;\n      this.registerUsedExtension(extensionName);\n      return this;\n    }\n  }, {\n    key: \"setObjectExtension\",\n    value: function setObjectExtension(object, extensionName, data) {\n      var extensions = object.extensions || {};\n      extensions[extensionName] = data;\n    }\n  }, {\n    key: \"removeObjectExtension\",\n    value: function removeObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      var extension = extensions[extensionName];\n      delete extensions[extensionName];\n      return extension;\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.json.extensions = this.json.extensions || {};\n      this.json.extensions[extensionName] = extensionData;\n      this.registerUsedExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"addRequiredExtension\",\n    value: function addRequiredExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.addExtension(extensionName, extensionData);\n      this.registerRequiredExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"registerUsedExtension\",\n    value: function registerUsedExtension(extensionName) {\n      this.json.extensionsUsed = this.json.extensionsUsed || [];\n\n      if (!this.json.extensionsUsed.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsUsed.push(extensionName);\n      }\n    }\n  }, {\n    key: \"registerRequiredExtension\",\n    value: function registerRequiredExtension(extensionName) {\n      this.registerUsedExtension(extensionName);\n      this.json.extensionsRequired = this.json.extensionsRequired || [];\n\n      if (!this.json.extensionsRequired.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsRequired.push(extensionName);\n      }\n    }\n  }, {\n    key: \"removeExtension\",\n    value: function removeExtension(extensionName) {\n      if (this.json.extensionsRequired) {\n        this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n      }\n\n      if (this.json.extensionsUsed) {\n        this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n      }\n\n      if (this.json.extensions) {\n        delete this.json.extensions[extensionName];\n      }\n    }\n  }, {\n    key: \"setDefaultScene\",\n    value: function setDefaultScene(sceneIndex) {\n      this.json.scene = sceneIndex;\n    }\n  }, {\n    key: \"addScene\",\n    value: function addScene(scene) {\n      var nodeIndices = scene.nodeIndices;\n      this.json.scenes = this.json.scenes || [];\n      this.json.scenes.push({\n        nodes: nodeIndices\n      });\n      return this.json.scenes.length - 1;\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(node) {\n      var meshIndex = node.meshIndex,\n          matrix = node.matrix;\n      this.json.nodes = this.json.nodes || [];\n      var nodeData = {\n        mesh: meshIndex\n      };\n\n      if (matrix) {\n        nodeData.matrix = matrix;\n      }\n\n      this.json.nodes.push(nodeData);\n      return this.json.nodes.length - 1;\n    }\n  }, {\n    key: \"addMesh\",\n    value: function addMesh(mesh) {\n      var attributes = mesh.attributes,\n          indices = mesh.indices,\n          material = mesh.material,\n          _mesh$mode = mesh.mode,\n          mode = _mesh$mode === void 0 ? 4 : _mesh$mode;\n\n      var accessors = this._addAttributes(attributes);\n\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessors,\n          mode: mode\n        }]\n      };\n\n      if (indices) {\n        var indicesAccessor = this._addIndices(indices);\n\n        glTFMesh.primitives[0].indices = indicesAccessor;\n      }\n\n      if (Number.isFinite(material)) {\n        glTFMesh.primitives[0].material = material;\n      }\n\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addPointCloud\",\n    value: function addPointCloud(attributes) {\n      var accessorIndices = this._addAttributes(attributes);\n\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessorIndices,\n          mode: 0\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(imageData, mimeTypeOpt) {\n      var metadata = getBinaryImageMetadata(imageData);\n      var mimeType = mimeTypeOpt || (metadata === null || metadata === void 0 ? void 0 : metadata.mimeType);\n      var bufferViewIndex = this.addBufferView(imageData);\n      var glTFImage = {\n        bufferView: bufferViewIndex,\n        mimeType: mimeType\n      };\n      this.json.images = this.json.images || [];\n      this.json.images.push(glTFImage);\n      return this.json.images.length - 1;\n    }\n  }, {\n    key: \"addBufferView\",\n    value: function addBufferView(buffer) {\n      var byteLength = buffer.byteLength;\n      assert(Number.isFinite(byteLength));\n      this.sourceBuffers = this.sourceBuffers || [];\n      this.sourceBuffers.push(buffer);\n      var glTFBufferView = {\n        buffer: 0,\n        byteOffset: this.byteLength,\n        byteLength: byteLength\n      };\n      this.byteLength += padToNBytes(byteLength, 4);\n      this.json.bufferViews = this.json.bufferViews || [];\n      this.json.bufferViews.push(glTFBufferView);\n      return this.json.bufferViews.length - 1;\n    }\n  }, {\n    key: \"addAccessor\",\n    value: function addAccessor(bufferViewIndex, accessor) {\n      var glTFAccessor = {\n        bufferView: bufferViewIndex,\n        type: getAccessorTypeFromSize(accessor.size),\n        componentType: accessor.componentType,\n        count: accessor.count,\n        max: accessor.max,\n        min: accessor.min\n      };\n      this.json.accessors = this.json.accessors || [];\n      this.json.accessors.push(glTFAccessor);\n      return this.json.accessors.length - 1;\n    }\n  }, {\n    key: \"addBinaryBuffer\",\n    value: function addBinaryBuffer(sourceBuffer) {\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        size: 3\n      };\n      var bufferViewIndex = this.addBufferView(sourceBuffer);\n      var minMax = {\n        min: accessor.min,\n        max: accessor.max\n      };\n\n      if (!minMax.min || !minMax.max) {\n        minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n      }\n\n      var accessorDefaults = {\n        size: accessor.size,\n        componentType: getComponentTypeFromArray(sourceBuffer),\n        count: Math.round(sourceBuffer.length / accessor.size),\n        min: minMax.min,\n        max: minMax.max\n      };\n      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n    }\n  }, {\n    key: \"addTexture\",\n    value: function addTexture(texture) {\n      var imageIndex = texture.imageIndex;\n      var glTFTexture = {\n        source: imageIndex\n      };\n      this.json.textures = this.json.textures || [];\n      this.json.textures.push(glTFTexture);\n      return this.json.textures.length - 1;\n    }\n  }, {\n    key: \"addMaterial\",\n    value: function addMaterial(pbrMaterialInfo) {\n      this.json.materials = this.json.materials || [];\n      this.json.materials.push(pbrMaterialInfo);\n      return this.json.materials.length - 1;\n    }\n  }, {\n    key: \"createBinaryChunk\",\n    value: function createBinaryChunk() {\n      var _this$json, _this$json$buffers;\n\n      this.gltf.buffers = [];\n      var totalByteLength = this.byteLength;\n      var arrayBuffer = new ArrayBuffer(totalByteLength);\n      var targetArray = new Uint8Array(arrayBuffer);\n      var dstByteOffset = 0;\n\n      var _iterator = _createForOfIteratorHelper(this.sourceBuffers || []),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var sourceBuffer = _step.value;\n          dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if ((_this$json = this.json) !== null && _this$json !== void 0 && (_this$json$buffers = _this$json.buffers) !== null && _this$json$buffers !== void 0 && _this$json$buffers[0]) {\n        this.json.buffers[0].byteLength = totalByteLength;\n      } else {\n        this.json.buffers = [{\n          byteLength: totalByteLength\n        }];\n      }\n\n      this.gltf.binary = arrayBuffer;\n      this.sourceBuffers = [arrayBuffer];\n    }\n  }, {\n    key: \"_removeStringFromArray\",\n    value: function _removeStringFromArray(array, string) {\n      var found = true;\n\n      while (found) {\n        var index = array.indexOf(string);\n\n        if (index > -1) {\n          array.splice(index, 1);\n        } else {\n          found = false;\n        }\n      }\n    }\n  }, {\n    key: \"_addAttributes\",\n    value: function _addAttributes() {\n      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var result = {};\n\n      for (var attributeKey in attributes) {\n        var attributeData = attributes[attributeKey];\n\n        var attrName = this._getGltfAttributeName(attributeKey);\n\n        var accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n        result[attrName] = accessor;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_addIndices\",\n    value: function _addIndices(indices) {\n      return this.addBinaryBuffer(indices, {\n        size: 1\n      });\n    }\n  }, {\n    key: \"_getGltfAttributeName\",\n    value: function _getGltfAttributeName(attributeName) {\n      switch (attributeName.toLowerCase()) {\n        case 'position':\n        case 'positions':\n        case 'vertices':\n          return 'POSITION';\n\n        case 'normal':\n        case 'normals':\n          return 'NORMAL';\n\n        case 'color':\n        case 'colors':\n          return 'COLOR_0';\n\n        case 'texcoord':\n        case 'texcoords':\n          return 'TEXCOORD_0';\n\n        default:\n          return attributeName;\n      }\n    }\n  }, {\n    key: \"_getAccessorMinMax\",\n    value: function _getAccessorMinMax(buffer, size) {\n      var result = {\n        min: null,\n        max: null\n      };\n\n      if (buffer.length < size) {\n        return result;\n      }\n\n      result.min = [];\n      result.max = [];\n      var initValues = buffer.subarray(0, size);\n\n      var _iterator2 = _createForOfIteratorHelper(initValues),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var value = _step2.value;\n          result.min.push(value);\n          result.max.push(value);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      for (var index = size; index < buffer.length; index += size) {\n        for (var componentIndex = 0; componentIndex < size; componentIndex++) {\n          result.min[0 + componentIndex] = Math.min(result.min[0 + componentIndex], buffer[index + componentIndex]);\n          result.max[0 + componentIndex] = Math.max(result.max[0 + componentIndex], buffer[index + componentIndex]);\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return GLTFScenegraph;\n}();\n\nexport { GLTFScenegraph as default };","map":{"version":3,"sources":["../../../../src/lib/api/gltf-scenegraph.ts"],"names":["DEFAULT_GLTF_JSON","asset","version","generator","buffers","constructor","gltf","json","getApplicationData","data","getExtraData","extras","getExtension","isExtension","name","extensions","getRequiredExtension","isRequired","getRequiredExtensions","getUsedExtensions","getObjectExtension","object","getScene","getNode","getSkin","getMesh","getMaterial","getAccessor","getTexture","getSampler","getImage","getBufferView","getBuffer","getObject","getTypedArrayForBufferView","bufferView","bufferIndex","binChunk","assert","byteOffset","getTypedArrayForAccessor","accessor","buffer","arrayBuffer","length","getAccessorArrayTypeAndLength","getTypedArrayForImageData","image","addApplicationData","addExtraData","addObjectExtension","setObjectExtension","removeObjectExtension","extension","addExtension","extensionData","addRequiredExtension","registerUsedExtension","ext","registerRequiredExtension","removeExtension","setDefaultScene","addScene","nodeIndices","nodes","addNode","matrix","nodeData","mesh","meshIndex","addMesh","mode","accessors","glTFMesh","primitives","attributes","indicesAccessor","Number","addPointCloud","accessorIndices","addImage","metadata","getBinaryImageMetadata","mimeType","mimeTypeOpt","bufferViewIndex","glTFImage","addBufferView","byteLength","glTFBufferView","padToNBytes","addAccessor","glTFAccessor","type","getAccessorTypeFromSize","componentType","count","max","min","addBinaryBuffer","size","minMax","accessorDefaults","getComponentTypeFromArray","Math","sourceBuffer","Object","addTexture","imageIndex","glTFTexture","source","addMaterial","createBinaryChunk","totalByteLength","targetArray","dstByteOffset","copyToArray","_removeStringFromArray","found","index","array","_addAttributes","result","attributeData","attrName","_addIndices","_getGltfAttributeName","attributeName","_getAccessorMinMax","initValues","componentIndex"],"mappings":"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","sourcesContent":["import type {\n  GLTF,\n  GLTFScene,\n  GLTFNode,\n  GLTFMesh,\n  GLTFSkin,\n  GLTFMaterial,\n  GLTFAccessor,\n  GLTFSampler,\n  GLTFTexture,\n  GLTFImage,\n  GLTFBuffer,\n  GLTFBufferView\n} from '../types/gltf-types';\n\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {padToNBytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '../gltf-utils/gltf-utils';\n\ntype GLTFWithBuffers = {\n  json: GLTF;\n  buffers: any[];\n  binary?: ArrayBuffer;\n};\n\nconst DEFAULT_GLTF_JSON: GLTF = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\n/**\n * Class for structured access to GLTF data\n */\nexport default class GLTFScenegraph {\n  // internal\n  gltf: GLTFWithBuffers;\n  sourceBuffers: any[];\n  byteLength: number;\n\n  constructor(gltf?: {json: GLTF; buffers?: any[]}) {\n    // @ts-ignore\n    this.gltf = gltf || {\n      json: {...DEFAULT_GLTF_JSON},\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    // Initialize buffers\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  // Accessors\n\n  get json(): GLTF {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName: string): {[key: string]: any} | null {\n    const isExtension = this.getUsedExtensions().find((name) => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName: string): {[key: string]: any} | null {\n    const isRequired = this.getRequiredExtensions().find((name) => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions(): string[] {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions(): string[] {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(\n    object: {[key: string]: any},\n    extensionName: string\n  ): {[key: string]: any} | null {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index: number): GLTFScene {\n    return this.getObject('scenes', index) as GLTFScene;\n  }\n\n  getNode(index: number): GLTFNode {\n    return this.getObject('nodes', index) as GLTFNode;\n  }\n\n  getSkin(index: number): GLTFSkin {\n    return this.getObject('skins', index) as GLTFSkin;\n  }\n\n  getMesh(index: number): GLTFMesh {\n    return this.getObject('meshes', index) as GLTFMesh;\n  }\n\n  getMaterial(index: number): GLTFMaterial {\n    return this.getObject('materials', index) as GLTFMaterial;\n  }\n\n  getAccessor(index: number): GLTFAccessor {\n    return this.getObject('accessors', index) as GLTFAccessor;\n  }\n\n  // getCamera(index: number): object | null {\n  //   return null; // TODO: fix thi: object  as null;\n  // }\n\n  getTexture(index: number): GLTFTexture {\n    return this.getObject('textures', index) as GLTFTexture;\n  }\n\n  getSampler(index: number): GLTFSampler {\n    return this.getObject('samplers', index) as GLTFSampler;\n  }\n\n  getImage(index: number): GLTFImage {\n    return this.getObject('images', index) as GLTFImage;\n  }\n\n  getBufferView(index: number | object): GLTFBufferView {\n    return this.getObject('bufferViews', index) as GLTFBufferView;\n  }\n\n  getBuffer(index: number): GLTFBuffer {\n    return this.getObject('buffers', index) as GLTFBuffer;\n  }\n\n  getObject(array: string, index: number | object): object {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  /**\n   * Accepts buffer view index or buffer view object\n   * @returns a `Uint8Array`\n   */\n  getTypedArrayForBufferView(bufferView: number | object): Uint8Array {\n    bufferView = this.getBufferView(bufferView);\n    // @ts-ignore\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    // @ts-ignore\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    // @ts-ignore\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  /** Accepts accessor index or accessor object\n   * @returns a typed array with type that matches the types\n   */\n  getTypedArrayForAccessor(accessor: number | object): any {\n    // @ts-ignore\n    accessor = this.getAccessor(accessor);\n    // @ts-ignore\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    // @ts-ignore\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  /** accepts accessor index or accessor object\n   * returns a `Uint8Array`\n   */\n  getTypedArrayForImageData(image: number | object): Uint8Array {\n    // @ts-ignore\n    image = this.getAccessor(image);\n    // @ts-ignore\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  /**\n   * Add an extra application-defined key to the top-level data structure\n   */\n  addApplicationData(key: string, data: object): GLTFScenegraph {\n    this.json[key] = data;\n    return this;\n  }\n\n  /**\n   * `extras` - Standard GLTF field for storing application specific data\n   */\n  addExtraData(key: string, data: object): GLTFScenegraph {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object: object, extensionName: string, data: object): GLTFScenegraph {\n    // @ts-ignore\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    // @ts-ignore\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object: object, extensionName: string, data: object): void {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object: object, extensionName: string): object {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  /**\n   * Add to standard GLTF top level extension object, mark as used\n   */\n  addExtension(extensionName: string, extensionData: object = {}): object {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Standard GLTF top level extension object, mark as used and required\n   */\n  addRequiredExtension(extensionName, extensionData: object = {}): object {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Add extensionName to list of used extensions\n   */\n  registerUsedExtension(extensionName: string): void {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  /**\n   * Add extensionName to list of required extensions\n   */\n  registerRequiredExtension(extensionName: string): void {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  /**\n   * Removes an extension from the top-level list\n   */\n  removeExtension(extensionName: string): void {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  /**\n   *  Set default scene which is to be displayed at load time\n   */\n  setDefaultScene(sceneIndex: number): void {\n    this.json.scene = sceneIndex;\n  }\n\n  /**\n   * @todo: add more properties for scene initialization:\n   *   name`, `extensions`, `extras`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene\n   */\n  addScene(scene: {nodeIndices: number[]}): number {\n    const {nodeIndices} = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({nodes: nodeIndices});\n    return this.json.scenes.length - 1;\n  }\n\n  /**\n   * @todo: add more properties for node initialization:\n   *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node\n   */\n  addNode(node: {meshIndex: number; matrix: number[]}): number {\n    const {meshIndex, matrix} = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {mesh: meshIndex};\n    if (matrix) {\n      // @ts-ignore\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  /** Adds a mesh to the json part */\n  addMesh(mesh: {attributes: object; indices: object; material: number; mode: number}): number {\n    const {attributes, indices, material, mode = 4} = mesh;\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          mode\n        }\n      ]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      // @ts-ignore\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      // @ts-ignore\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes: object): number {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  /**\n   * Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes as glTF image\n   * @param imageData\n   * @param mimeType\n   */\n  addImage(imageData: any, mimeTypeOpt?: string): number {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || metadata?.mimeType;\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  /**\n   * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n   * @param buffer\n   */\n  addBufferView(buffer: any): number {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  /**\n   * Adds an accessor to a bufferView\n   * @param bufferViewIndex\n   * @param accessor\n   */\n  addAccessor(bufferViewIndex: number, accessor: object): number {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      // @ts-ignore\n      type: getAccessorTypeFromSize(accessor.size),\n      // @ts-ignore\n      componentType: accessor.componentType,\n      // @ts-ignore\n      count: accessor.count,\n      // @ts-ignore\n      max: accessor.max,\n      // @ts-ignore\n      min: accessor.min\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  /**\n   * Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes buffers as glTF accessors, but this could be optimized\n   * @param sourceBuffer\n   * @param accessor\n   */\n  addBinaryBuffer(sourceBuffer: any, accessor: object = {size: 3}): number {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    // @ts-ignore\n    let minMax = {min: accessor.min, max: accessor.max};\n    if (!minMax.min || !minMax.max) {\n      // @ts-ignore\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      // @ts-ignore\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      // @ts-ignore\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  /**\n   * Adds a texture to the json part\n   * @todo: add more properties for texture initialization\n   * `sampler`, `name`, `extensions`, `extras`\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\n   */\n  addTexture(texture: {imageIndex: number}): number {\n    const {imageIndex} = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  /** Adds a material to the json part */\n  addMaterial(pbrMaterialInfo: Object): number {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  /** Pack the binary chunk */\n  createBinaryChunk(): void {\n    // Encoder expects this array undefined or empty\n    this.gltf.buffers = [];\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    if (this.json?.buffers?.[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{byteLength: totalByteLength}];\n    }\n\n    // Save generated arrayBuffer\n    this.gltf.binary = arrayBuffer;\n\n    // Put arrayBuffer to sourceBuffers for possible additional writing data in the chunk\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  /**\n   * Add attributes to buffers and create `attributes` object which is part of `mesh`\n   */\n  _addAttributes(attributes = {}) {\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  /**\n   * Add indices to buffers\n   */\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {size: 1});\n  }\n\n  /**\n   * Deduce gltf specific attribue name from input attribute name\n   */\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  /**\n   * Calculate `min` and `max` arrays of accessor according to spec:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor\n   */\n  _getAccessorMinMax(buffer, size) {\n    const result = {min: null, max: null};\n    if (buffer.length < size) {\n      return result;\n    }\n    // @ts-ignore\n    result.min = [];\n    // @ts-ignore\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      // @ts-ignore\n      result.min.push(value);\n      // @ts-ignore\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        // @ts-ignore\n        result.min[0 + componentIndex] = Math.min(\n          // @ts-ignore\n          result.min[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n        // @ts-ignore\n        result.max[0 + componentIndex] = Math.max(\n          // @ts-ignore\n          result.max[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n      }\n    }\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}