{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _awaitAsyncGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; if (typeof Symbol !== \"undefined\") { async = Symbol.asyncIterator; sync = Symbol.iterator; } while (retry--) { if (async && (method = iterable[async]) != null) { return method.call(iterable); } if (sync && (method = iterable[sync]) != null) { return new AsyncFromSyncIterator(method.call(iterable)); } async = \"@@asyncIterator\"; sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s; this.n = s.next; }; AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; if (ret === undefined) { return Promise.resolve({ value: value, done: true }); } return AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; if (thr === undefined) return Promise.reject(value); return AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }; function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) { return Promise.reject(new TypeError(r + \" is not an object.\")); } var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return new AsyncFromSyncIterator(s); }\n\nvar VERSION = typeof \"3.0.13\" !== 'undefined' ? \"3.0.13\" : 'latest';\nexport var NullWorkerLoader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  worker: true,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  tests: [function () {\n    return false;\n  }],\n  options: {\n    null: {}\n  }\n};\nexport var NullLoader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: function () {\n    var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", arrayBuffer);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  parseSync: function parseSync(arrayBuffer) {\n    return arrayBuffer;\n  },\n  parseInBatches: function () {\n    var _generator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(asyncIterator) {\n      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 2;\n              _iterator = _asyncIterator(asyncIterator);\n\n            case 4:\n              _context2.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 13;\n                break;\n              }\n\n              batch = _step.value;\n              _context2.next = 10;\n              return batch;\n\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 4;\n              break;\n\n            case 13:\n              _context2.next = 19;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context2.t0;\n\n            case 19:\n              _context2.prev = 19;\n              _context2.prev = 20;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 24;\n                break;\n              }\n\n              _context2.next = 24;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 24:\n              _context2.prev = 24;\n\n              if (!_didIteratorError) {\n                _context2.next = 27;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 27:\n              return _context2.finish(24);\n\n            case 28:\n              return _context2.finish(19);\n\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n    }));\n\n    function generator(_x) {\n      return _generator.apply(this, arguments);\n    }\n\n    return generator;\n  }(),\n  tests: [function () {\n    return false;\n  }],\n  options: {\n    null: {}\n  }\n};","map":{"version":3,"sources":["../../src/null-loader.ts"],"names":["VERSION","NullWorkerLoader","name","id","module","version","worker","mimeTypes","extensions","tests","options","null","NullLoader","parse","parseSync","arrayBuffer","parseInBatches"],"mappings":";;;;;;;;;AAEA,IAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,QAAA;AAOA,OAAO,IAAMC,gBAAwB,GAAG;AACtCC,EAAAA,IAAI,EADkC,aAAA;AAEtCC,EAAAA,EAAE,EAFoC,MAAA;AAGtCC,EAAAA,MAAM,EAHgC,MAAA;AAItCC,EAAAA,OAAO,EAJ+B,OAAA;AAKtCC,EAAAA,MAAM,EALgC,IAAA;AAMtCC,EAAAA,SAAS,EAAE,CAN2B,qBAM3B,CAN2B;AAOtCC,EAAAA,UAAU,EAAE,CAP0B,MAO1B,CAP0B;AAQtCC,EAAAA,KAAK,EAAE,CAAC;AAAA,WAR8B,KAQ9B;AAAA,GAAD,CAR+B;AAStCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AAT6B,CAAjC;AAiBP,OAAO,IAAMC,UAA4B,GAAG;AAC1CV,EAAAA,IAAI,EADsC,aAAA;AAE1CC,EAAAA,EAAE,EAFwC,MAAA;AAG1CC,EAAAA,MAAM,EAHoC,MAAA;AAI1CC,EAAAA,OAAO,EAJmC,OAAA;AAK1CE,EAAAA,SAAS,EAAE,CAL+B,qBAK/B,CAL+B;AAM1CC,EAAAA,UAAU,EAAE,CAN8B,MAM9B,CAN8B;AAO1CK,EAAAA,KAAK;AAAA,0EAAE,iBAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAPmC,WAOnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAPqC;AAQ1CC,EAAAA,SAAS,EAAGC,mBAAAA,WAAD;AAAA,WAR+B,WAQ/B;AAAA,GAR+B;AAS1CC,EAAAA,cAAc;AAAA,gFAAE,kBAAA,aAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCACd,aADc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACd,cAAA,KADc;AAAA;AAEZ,qBAAA,KAAA;;AAFY;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,aAAE,SAAF;AAAA;AAAA;;AAAA,WAAE,SAAF;AAAA,KAT4B;AAc1CP,EAAAA,KAAK,EAAE,CAAC;AAAA,WAdkC,KAclC;AAAA,GAAD,CAdmC;AAe1CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AAfiC,CAArC","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nimport {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullWorkerLoader: Loader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  worker: true,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  tests: [() => false],\n  options: {\n    null: {}\n  }\n};\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullLoader: LoaderWithParser = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: async (arrayBuffer) => arrayBuffer,\n  parseSync: (arrayBuffer) => arrayBuffer,\n  parseInBatches: async function* generator(asyncIterator) {\n    for await (const batch of asyncIterator) {\n      yield batch;\n    }\n  },\n  tests: [() => false],\n  options: {\n    null: {}\n  }\n};\n"]},"metadata":{},"sourceType":"module"}