{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Pass from './pass';\nimport { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';\n\nvar LayersPass = /*#__PURE__*/function (_Pass) {\n  _inherits(LayersPass, _Pass);\n\n  var _super = _createSuper(LayersPass);\n\n  function LayersPass() {\n    _classCallCheck(this, LayersPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LayersPass, [{\n    key: \"render\",\n    value: function render(props) {\n      var gl = this.gl;\n      setParameters(gl, {\n        framebuffer: props.target\n      });\n      return this._drawLayers(props);\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(props) {\n      var viewports = props.viewports,\n          views = props.views,\n          onViewportActive = props.onViewportActive,\n          _props$clearCanvas = props.clearCanvas,\n          clearCanvas = _props$clearCanvas === void 0 ? true : _props$clearCanvas;\n      props.pass = props.pass || 'unknown';\n      var gl = this.gl;\n\n      if (clearCanvas) {\n        clearGLCanvas(gl);\n      }\n\n      var renderStats = [];\n\n      var _iterator = _createForOfIteratorHelper(viewports),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var viewportOrDescriptor = _step.value;\n          var viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;\n          var view = views && views[viewport.id];\n          onViewportActive(viewport);\n\n          var drawLayerParams = this._getDrawLayerParams(viewport, props);\n\n          props.view = view;\n          var subViewports = viewport.subViewports || [viewport];\n\n          var _iterator2 = _createForOfIteratorHelper(subViewports),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var subViewport = _step2.value;\n              props.viewport = subViewport;\n\n              var stats = this._drawLayersInViewport(gl, props, drawLayerParams);\n\n              renderStats.push(stats);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return renderStats;\n    }\n  }, {\n    key: \"_getDrawLayerParams\",\n    value: function _getDrawLayerParams(viewport, _ref) {\n      var layers = _ref.layers,\n          pass = _ref.pass,\n          layerFilter = _ref.layerFilter,\n          effects = _ref.effects,\n          moduleParameters = _ref.moduleParameters;\n      var drawLayerParams = [];\n      var indexResolver = layerIndexResolver();\n      var drawContext = {\n        viewport: viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass\n      };\n      var layerFilterCache = {};\n\n      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n        var layer = layers[layerIndex];\n\n        var shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);\n\n        var layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n        var layerParam = {\n          shouldDrawLayer: shouldDrawLayer,\n          layerRenderIndex: layerRenderIndex\n        };\n\n        if (shouldDrawLayer) {\n          layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n          layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n        }\n\n        drawLayerParams[layerIndex] = layerParam;\n      }\n\n      return drawLayerParams;\n    }\n  }, {\n    key: \"_drawLayersInViewport\",\n    value: function _drawLayersInViewport(gl, _ref2, drawLayerParams) {\n      var layers = _ref2.layers,\n          pass = _ref2.pass,\n          viewport = _ref2.viewport,\n          view = _ref2.view;\n      var glViewport = getGLViewport(gl, {\n        viewport: viewport\n      });\n\n      if (view && view.props.clear) {\n        var clearOpts = view.props.clear === true ? {\n          color: true,\n          depth: true\n        } : view.props.clear;\n        withParameters(gl, {\n          scissorTest: true,\n          scissor: glViewport\n        }, function () {\n          return clear(gl, clearOpts);\n        });\n      }\n\n      var renderStatus = {\n        totalCount: layers.length,\n        visibleCount: 0,\n        compositeCount: 0,\n        pickableCount: 0\n      };\n      setParameters(gl, {\n        viewport: glViewport\n      });\n\n      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n        var layer = layers[layerIndex];\n        var _drawLayerParams$laye = drawLayerParams[layerIndex],\n            shouldDrawLayer = _drawLayerParams$laye.shouldDrawLayer,\n            layerRenderIndex = _drawLayerParams$laye.layerRenderIndex,\n            moduleParameters = _drawLayerParams$laye.moduleParameters,\n            layerParameters = _drawLayerParams$laye.layerParameters;\n\n        if (shouldDrawLayer && layer.props.pickable) {\n          renderStatus.pickableCount++;\n        }\n\n        if (layer.isComposite) {\n          renderStatus.compositeCount++;\n        } else if (shouldDrawLayer) {\n          renderStatus.visibleCount++;\n          moduleParameters.viewport = viewport;\n\n          try {\n            layer.drawLayer({\n              moduleParameters: moduleParameters,\n              uniforms: {\n                layerIndex: layerRenderIndex\n              },\n              parameters: layerParameters\n            });\n          } catch (err) {\n            layer.raiseError(err, \"drawing \".concat(layer, \" to \").concat(pass));\n          }\n        }\n      }\n\n      return renderStatus;\n    }\n  }, {\n    key: \"shouldDrawLayer\",\n    value: function shouldDrawLayer(layer) {\n      return true;\n    }\n  }, {\n    key: \"getModuleParameters\",\n    value: function getModuleParameters(layer, effects) {\n      return null;\n    }\n  }, {\n    key: \"getLayerParameters\",\n    value: function getLayerParameters(layer, layerIndex) {\n      return layer.props.parameters;\n    }\n  }, {\n    key: \"_shouldDrawLayer\",\n    value: function _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n      var shouldDrawLayer = this.shouldDrawLayer(layer) && layer.props.visible;\n\n      if (!shouldDrawLayer) {\n        return false;\n      }\n\n      drawContext.layer = layer;\n      var parent = layer.parent;\n\n      while (parent) {\n        if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n          return false;\n        }\n\n        drawContext.layer = parent;\n        parent = parent.parent;\n      }\n\n      if (layerFilter) {\n        var rootLayerId = drawContext.layer.id;\n\n        if (!(rootLayerId in layerFilterCache)) {\n          layerFilterCache[rootLayerId] = layerFilter(drawContext);\n        }\n\n        if (!layerFilterCache[rootLayerId]) {\n          return false;\n        }\n      }\n\n      layer.activateViewport(drawContext.viewport);\n      return true;\n    }\n  }, {\n    key: \"_getModuleParameters\",\n    value: function _getModuleParameters(layer, effects, pass, overrides) {\n      var moduleParameters = Object.assign(Object.create(layer.props), {\n        autoWrapLongitude: layer.wrapLongitude,\n        viewport: layer.context.viewport,\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      });\n\n      if (effects) {\n        var _iterator3 = _createForOfIteratorHelper(effects),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var effect = _step3.value;\n            Object.assign(moduleParameters, effect.getModuleParameters(layer));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n    }\n  }]);\n\n  return LayersPass;\n}(Pass);\n\nexport { LayersPass as default };\nexport function layerIndexResolver() {\n  var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var layerIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var resolvers = {};\n\n  var resolveLayerIndex = function resolveLayerIndex(layer, isDrawn) {\n    var indexOverride = layer.props._offset;\n    var layerId = layer.id;\n    var parentId = layer.parent && layer.parent.id;\n    var index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      var resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n\n  return resolveLayerIndex;\n}\n\nfunction getGLViewport(gl, _ref3) {\n  var viewport = _ref3.viewport;\n  var height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n  var dimensions = viewport;\n  var pixelRatio = cssToDeviceRatio(gl);\n  return [dimensions.x * pixelRatio, (height - dimensions.y - dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];\n}\n\nfunction clearGLCanvas(gl) {\n  var width = gl.drawingBufferWidth;\n  var height = gl.drawingBufferHeight;\n  setParameters(gl, {\n    viewport: [0, 0, width, height]\n  });\n  gl.clear(16384 | 256);\n}","map":{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["render","gl","setParameters","framebuffer","props","target","_drawLayers","clearCanvas","clearGLCanvas","renderStats","viewport","viewportOrDescriptor","view","views","onViewportActive","drawLayerParams","subViewports","stats","_getDrawLayerParams","moduleParameters","indexResolver","layerIndexResolver","drawContext","isPicking","pass","renderPass","layerFilterCache","layerIndex","layers","layer","shouldDrawLayer","layerRenderIndex","layerParam","_drawLayersInViewport","glViewport","getGLViewport","clearOpts","color","depth","withParameters","scissorTest","scissor","clear","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","layerParameters","uniforms","parameters","getModuleParameters","getLayerParameters","_shouldDrawLayer","parent","rootLayerId","layerFilter","_getModuleParameters","Object","autoWrapLongitude","mousePosition","pickingActive","devicePixelRatio","cssToDeviceRatio","effect","startIndex","layerIndices","resolvers","resolveLayerIndex","indexOverride","layerId","parentId","resolver","index","Number","isDrawn","height","dimensions","pixelRatio","width"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: props.target});\n    return this._drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  _drawLayers(props) {\n    const {viewports, views, onViewportActive, clearCanvas = true} = props;\n    props.pass = props.pass || 'unknown';\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    for (const viewportOrDescriptor of viewports) {\n      // Get a viewport from a viewport descriptor (which can be a plain viewport)\n      const viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, props);\n\n      props.view = view;\n\n      // render this viewport\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        props.viewport = subViewport;\n\n        const stats = this._drawLayersInViewport(gl, props, drawLayerParams);\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Resolve the parameters needed to draw each layer\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  _getDrawLayerParams(viewport, {layers, pass, layerFilter, effects, moduleParameters}) {\n    const drawLayerParams = [];\n    const indexResolver = layerIndexResolver();\n    const drawContext = {\n      viewport,\n      isPicking: pass.startsWith('picking'),\n      renderPass: pass\n    };\n    const layerFilterCache = {};\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(\n        layer,\n        drawContext,\n        layerFilter,\n        layerFilterCache\n      );\n\n      // This is the \"logical\" index for ordering this layer in the stack\n      // used to calculate polygon offsets\n      // It can be the same as another layer\n      const layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n      const layerParam = {\n        shouldDrawLayer,\n        layerRenderIndex\n      };\n\n      if (shouldDrawLayer) {\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  _drawLayersInViewport(gl, {layers, pass, viewport, view}, drawLayerParams) {\n    const glViewport = getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {\n        shouldDrawLayer,\n        layerRenderIndex,\n        moduleParameters,\n        layerParameters\n      } = drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer.drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, `drawing ${layer} to ${pass}`);\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n    const shouldDrawLayer = this.shouldDrawLayer(layer) && layer.props.visible;\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n\n    let parent = layer.parent;\n    while (parent) {\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n      drawContext.layer = parent;\n      parent = parent.parent;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    // If a layer is drawn, update its viewportChanged flag\n    layer.activateViewport(drawContext.viewport);\n\n    return true;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      autoWrapLongitude: layer.wrapLongitude,\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(startIndex = 0, layerIndices = {}) {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(gl, {viewport}) {\n  // TODO - dummy default for node\n  // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n  const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  const pixelRatio = cssToDeviceRatio(gl);\n  return [\n    dimensions.x * pixelRatio,\n    (height - dimensions.y - dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"]},"metadata":{},"sourceType":"module"}