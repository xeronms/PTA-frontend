{"ast":null,"code":"import _slicedToArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\nvar RESOLUTION = 2;\nvar TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n  dataFormat: 6408\n};\nvar DEFAULT_COLOR_DOMAIN = [0, 0];\nvar AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nvar defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM',\n  weightsTextureSize: {\n    type: 'number',\n    min: 128,\n    max: 2048,\n    value: 2048\n  },\n  debounceTimeout: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 500\n  }\n};\nvar REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nvar DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nvar HeatmapLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(HeatmapLayer, _AggregationLayer);\n\n  var _super = _createSuper(HeatmapLayer);\n\n  function HeatmapLayer() {\n    _classCallCheck(this, HeatmapLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HeatmapLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n\n      if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"initializeState\", this).call(this, DIMENSIONS);\n\n      this.setState({\n        supported: true,\n        colorDomain: DEFAULT_COLOR_DOMAIN\n      });\n\n      this._setupTextureParams();\n\n      this._setupAttributes();\n\n      this._setupResources();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (!this.state.supported) {\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this._updateHeatmapState(opts);\n    }\n  }, {\n    key: \"_updateHeatmapState\",\n    value: function _updateHeatmapState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n\n      var changeFlags = this._getChangeFlags(opts);\n\n      if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n        changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n\n        this._updateTextureRenderingBounds();\n      }\n\n      if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n        clearTimeout(this.state.updateTimer);\n        this.setState({\n          isWeightMapDirty: true\n        });\n      } else if (changeFlags.viewportZoomChanged) {\n        this._debouncedUpdateWeightmap();\n      }\n\n      if (props.colorRange !== oldProps.colorRange) {\n        this._updateColorTexture(opts);\n      }\n\n      if (this.state.isWeightMapDirty) {\n        this._updateWeightmap();\n      }\n\n      this.setState({\n        zoom: opts.context.viewport.zoom\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          weightsTexture = _this$state.weightsTexture,\n          triPositionBuffer = _this$state.triPositionBuffer,\n          triTexCoordBuffer = _this$state.triTexCoordBuffer,\n          maxWeightsTexture = _this$state.maxWeightsTexture,\n          colorTexture = _this$state.colorTexture,\n          colorDomain = _this$state.colorDomain;\n      var _this$props = this.props,\n          updateTriggers = _this$props.updateTriggers,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold,\n          aggregation = _this$props.aggregation;\n      var TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n      return new TriangleLayerClass(this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers: updateTriggers\n      }), {\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture: colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state2 = this.state,\n          weightsTransform = _this$state2.weightsTransform,\n          weightsTexture = _this$state2.weightsTexture,\n          maxWeightTransform = _this$state2.maxWeightTransform,\n          maxWeightsTexture = _this$state2.maxWeightsTexture,\n          triPositionBuffer = _this$state2.triPositionBuffer,\n          triTexCoordBuffer = _this$state2.triTexCoordBuffer,\n          colorTexture = _this$state2.colorTexture,\n          updateTimer = _this$state2.updateTimer;\n      weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n      weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n      maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n      maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n      triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n      triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n      colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n      updateTimer && clearTimeout(updateTimer);\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }, {\n    key: \"_getChangeFlags\",\n    value: function _getChangeFlags(opts) {\n      var changeFlags = {};\n      var dimensions = this.state.dimensions;\n      changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n      var zoom = this.state.zoom;\n\n      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n        changeFlags.viewportZoomChanged = true;\n      }\n\n      return changeFlags;\n    }\n  }, {\n    key: \"_createTextures\",\n    value: function _createTextures() {\n      var gl = this.context.gl;\n      var _this$state3 = this.state,\n          textureSize = _this$state3.textureSize,\n          format = _this$state3.format,\n          type = _this$state3.type;\n      this.setState({\n        weightsTexture: new Texture2D(gl, _objectSpread({\n          width: textureSize,\n          height: textureSize,\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS)),\n        maxWeightsTexture: new Texture2D(gl, _objectSpread({\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS))\n      });\n    }\n  }, {\n    key: \"_setupAttributes\",\n    value: function _setupAttributes() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          type: 5130,\n          accessor: 'getPosition'\n        },\n        weights: {\n          size: 1,\n          accessor: 'getWeight'\n        }\n      });\n      this.setState({\n        positionAttributeName: 'positions'\n      });\n    }\n  }, {\n    key: \"_setupTextureParams\",\n    value: function _setupTextureParams() {\n      var gl = this.context.gl;\n      var weightsTextureSize = this.props.weightsTextureSize;\n      var textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));\n      var floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n\n      var _getTextureParams = getTextureParams({\n        gl: gl,\n        floatTargetSupport: floatTargetSupport\n      }),\n          format = _getTextureParams.format,\n          type = _getTextureParams.type;\n\n      var weightsScale = floatTargetSupport ? 1 : 1 / 255;\n      this.setState({\n        textureSize: textureSize,\n        format: format,\n        type: type,\n        weightsScale: weightsScale\n      });\n\n      if (!floatTargetSupport) {\n        log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n      }\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(type) {\n      return _get(_getPrototypeOf(HeatmapLayer.prototype), \"getShaders\", this).call(this, type === 'max-weights-transform' ? {\n        vs: vs_max,\n        _fs: fs_max\n      } : {\n        vs: weights_vs,\n        _fs: weights_fs\n      });\n    }\n  }, {\n    key: \"_createWeightsTransform\",\n    value: function _createWeightsTransform() {\n      var shaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _weightsTransform;\n\n      var gl = this.context.gl;\n      var weightsTransform = this.state.weightsTransform;\n      var weightsTexture = this.state.weightsTexture;\n      (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n      weightsTransform = new Transform(gl, _objectSpread({\n        id: \"\".concat(this.id, \"-weights-transform\"),\n        elementCount: 1,\n        _targetTexture: weightsTexture,\n        _targetTextureVarying: 'weightsTexture'\n      }, shaders));\n      this.setState({\n        weightsTransform: weightsTransform\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var gl = this.context.gl;\n\n      this._createTextures();\n\n      var _this$state4 = this.state,\n          textureSize = _this$state4.textureSize,\n          weightsTexture = _this$state4.weightsTexture,\n          maxWeightsTexture = _this$state4.maxWeightsTexture;\n      var weightsTransformShaders = this.getShaders('weights-transform');\n\n      this._createWeightsTransform(weightsTransformShaders);\n\n      var maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n      var maxWeightTransform = new Transform(gl, _objectSpread(_objectSpread({\n        id: \"\".concat(this.id, \"-max-weights-transform\"),\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture'\n      }, maxWeightsTransformShaders), {}, {\n        elementCount: textureSize * textureSize\n      }));\n      this.setState({\n        weightsTexture: weightsTexture,\n        maxWeightsTexture: maxWeightsTexture,\n        maxWeightTransform: maxWeightTransform,\n        zoom: null,\n        triPositionBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 3\n          }\n        }),\n        triTexCoordBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 2\n          }\n        })\n      });\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaderOptions) {\n      this._createWeightsTransform(shaderOptions);\n    }\n  }, {\n    key: \"_updateMaxWeightValue\",\n    value: function _updateMaxWeightValue() {\n      var maxWeightTransform = this.state.maxWeightTransform;\n      maxWeightTransform.run({\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32776\n        }\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var viewport = this.context.viewport;\n      var viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map(function (p) {\n        return p.map(Math.fround);\n      });\n      var visibleWorldBounds = getBounds(viewportCorners);\n      var newState = {\n        visibleWorldBounds: visibleWorldBounds,\n        viewportCorners: viewportCorners\n      };\n      var boundsChanged = false;\n\n      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n        var scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n        var worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n          worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n          worldBounds[0] = Math.max(worldBounds[0], -360);\n          worldBounds[2] = Math.min(worldBounds[2], 360);\n        }\n\n        var normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n        newState.worldBounds = worldBounds;\n        newState.normalizedCommonBounds = normalizedCommonBounds;\n        boundsChanged = true;\n      }\n\n      this.setState(newState);\n      return boundsChanged;\n    }\n  }, {\n    key: \"_updateTextureRenderingBounds\",\n    value: function _updateTextureRenderingBounds() {\n      var _this$state5 = this.state,\n          triPositionBuffer = _this$state5.triPositionBuffer,\n          triTexCoordBuffer = _this$state5.triTexCoordBuffer,\n          normalizedCommonBounds = _this$state5.normalizedCommonBounds,\n          viewportCorners = _this$state5.viewportCorners;\n      var viewport = this.context.viewport;\n      triPositionBuffer.subData(packVertices(viewportCorners, 3));\n      var textureBounds = viewportCorners.map(function (p) {\n        return getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds);\n      });\n      triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n    }\n  }, {\n    key: \"_updateColorTexture\",\n    value: function _updateColorTexture(opts) {\n      var colorRange = opts.props.colorRange;\n      var colorTexture = this.state.colorTexture;\n      var colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n      if (colorTexture) {\n        colorTexture.setImageData({\n          data: colors,\n          width: colorRange.length\n        });\n      } else {\n        colorTexture = new Texture2D(this.context.gl, _objectSpread({\n          data: colors,\n          width: colorRange.length,\n          height: 1\n        }, TEXTURE_OPTIONS));\n      }\n\n      this.setState({\n        colorTexture: colorTexture\n      });\n    }\n  }, {\n    key: \"_updateWeightmap\",\n    value: function _updateWeightmap() {\n      var _weightsTexture$setPa;\n\n      var _this$props2 = this.props,\n          radiusPixels = _this$props2.radiusPixels,\n          colorDomain = _this$props2.colorDomain,\n          aggregation = _this$props2.aggregation;\n      var _this$state6 = this.state,\n          weightsTransform = _this$state6.weightsTransform,\n          worldBounds = _this$state6.worldBounds,\n          textureSize = _this$state6.textureSize,\n          weightsTexture = _this$state6.weightsTexture,\n          weightsScale = _this$state6.weightsScale;\n      this.state.isWeightMapDirty = false;\n\n      var commonBounds = this._worldToCommonBounds(worldBounds, {\n        useLayerCoordinateSystem: true\n      });\n\n      if (colorDomain && aggregation === 'SUM') {\n        var viewport = this.context.viewport;\n        var metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n        this.state.colorDomain = colorDomain.map(function (x) {\n          return x * metersPerPixel * weightsScale;\n        });\n      } else {\n        this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n      }\n\n      var uniforms = {\n        radiusPixels: radiusPixels,\n        commonBounds: commonBounds,\n        textureWidth: textureSize,\n        weightsScale: weightsScale\n      };\n      weightsTransform.update({\n        elementCount: this.getNumInstances()\n      });\n      weightsTransform.run({\n        uniforms: uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n\n      this._updateMaxWeightValue();\n\n      weightsTexture.setParameters((_weightsTexture$setPa = {}, _defineProperty(_weightsTexture$setPa, 10240, 9729), _defineProperty(_weightsTexture$setPa, 10241, 9729), _weightsTexture$setPa));\n    }\n  }, {\n    key: \"_debouncedUpdateWeightmap\",\n    value: function _debouncedUpdateWeightmap() {\n      var fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var updateTimer = this.state.updateTimer;\n      var debounceTimeout = this.props.debounceTimeout;\n\n      if (fromTimer) {\n        updateTimer = null;\n\n        this._updateBounds(true);\n\n        this._updateTextureRenderingBounds();\n\n        this.setState({\n          isWeightMapDirty: true\n        });\n      } else {\n        this.setState({\n          isWeightMapDirty: false\n        });\n        clearTimeout(updateTimer);\n        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n      }\n\n      this.setState({\n        updateTimer: updateTimer\n      });\n    }\n  }, {\n    key: \"_worldToCommonBounds\",\n    value: function _worldToCommonBounds(worldBounds) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$useLayerCoordin = opts.useLayerCoordinateSystem,\n          useLayerCoordinateSystem = _opts$useLayerCoordin === void 0 ? false : _opts$useLayerCoordin;\n\n      var _worldBounds = _slicedToArray(worldBounds, 4),\n          minLong = _worldBounds[0],\n          minLat = _worldBounds[1],\n          maxLong = _worldBounds[2],\n          maxLat = _worldBounds[3];\n\n      var viewport = this.context.viewport;\n      var textureSize = this.state.textureSize;\n      var coordinateSystem = this.props.coordinateSystem;\n      var offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n      var offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n      var size = textureSize * RESOLUTION / viewport.scale;\n      var bottomLeftCommon;\n      var topRightCommon;\n\n      if (useLayerCoordinateSystem && !offsetMode) {\n        bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n        topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n      } else {\n        bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n        topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n      }\n\n      return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n    }\n  }, {\n    key: \"_commonToWorldBounds\",\n    value: function _commonToWorldBounds(commonBounds) {\n      var _commonBounds = _slicedToArray(commonBounds, 4),\n          xMin = _commonBounds[0],\n          yMin = _commonBounds[1],\n          xMax = _commonBounds[2],\n          yMax = _commonBounds[3];\n\n      var viewport = this.context.viewport;\n      var bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n      var topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n      return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n    }\n  }]);\n\n  return HeatmapLayer;\n}(AggregationLayer);\n\nexport { HeatmapLayer as default };\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","FEATURES","DIMENSIONS","data","props","initializeState","gl","hasFeatures","supported","log","shouldUpdateState","changeFlags","updateState","_updateHeatmapState","oldProps","clearTimeout","isWeightMapDirty","zoom","opts","renderLayers","TriangleLayerClass","id","updateTriggers","coordinateSystem","COORDINATE_SYSTEM","attributes","positions","texCoords","triTexCoordBuffer","vertexCount","maxTexture","colorTexture","aggregationMode","texture","finalizeState","updateTimer","weightsTransform","weightsTexture","maxWeightTransform","maxWeightsTexture","triPositionBuffer","_getAttributeManager","stats","_getChangeFlags","dimensions","compareAll","dimension","_createTextures","width","height","format","_setupAttributes","attributeManager","size","accessor","weights","positionAttributeName","_setupTextureParams","textureSize","Math","getParameters","floatTargetSupport","getTextureParams","weightsScale","getShaders","vs","_fs","fs_max","weights_fs","_createWeightsTransform","shaders","elementCount","_targetTexture","_targetTextureVarying","_setupResources","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","byteLength","updateShaders","_updateMaxWeightValue","blend","depthTest","blendFunc","blendEquation","_updateBounds","forceUpdate","viewport","viewportCorners","p","visibleWorldBounds","getBounds","newState","boundsChanged","boundsContain","scaledCommonBounds","worldBounds","normalizedCommonBounds","_updateTextureRenderingBounds","packVertices","textureBounds","getTextureCoordinates","_updateColorTexture","colors","colorRangeToFlatArray","length","_updateWeightmap","commonBounds","useLayerCoordinateSystem","metersPerPixel","uniforms","textureWidth","clearRenderTarget","moduleSettings","_debouncedUpdateWeightmap","fromTimer","setTimeout","_worldToCommonBounds","offsetMode","offsetOriginCommon","bottomLeftCommon","topRightCommon","scaleToAspectRatio","_commonToWorldBounds","bottomLeftWorld","topRightWorld","HeatmapLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    updateTimer && clearTimeout(updateTimer);\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vs_max,\n            _fs: fs_max\n          }\n        : {\n            vs: weights_vs,\n            _fs: weights_fs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}