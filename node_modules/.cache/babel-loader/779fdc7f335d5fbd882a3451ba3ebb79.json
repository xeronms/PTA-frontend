{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { log } from '@deck.gl/core';\nimport { Matrix4 } from 'math.gl';\nimport { MVTWorkerLoader } from '@loaders.gl/mvt';\nimport { binaryToGeojson } from '@loaders.gl/gis';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { ClipExtension } from '@deck.gl/extensions';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { getURLFromTemplate, isURLTemplate } from '../tile-layer/utils';\nimport { transform } from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nvar WORLD_SIZE = 512;\nvar defaultProps = {\n  uniqueIdProperty: {\n    type: 'string',\n    value: ''\n  },\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n};\n\nvar MVTLayer = /*#__PURE__*/function (_TileLayer) {\n  _inherits(MVTLayer, _TileLayer);\n\n  var _super = _createSuper(MVTLayer);\n\n  function MVTLayer() {\n    _classCallCheck(this, MVTLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MVTLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      _get(_getPrototypeOf(MVTLayer.prototype), \"initializeState\", this).call(this);\n\n      this.setState({\n        data: null,\n        tileJSON: null\n      });\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this.state.data && this.state.tileset && _get(_getPrototypeOf(MVTLayer.prototype), \"isLoaded\", this);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          context = _ref.context,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged) {\n        this._updateTileData();\n      }\n\n      if (this.state.data) {\n        _get(_getPrototypeOf(MVTLayer.prototype), \"updateState\", this).call(this, {\n          props: props,\n          oldProps: oldProps,\n          context: context,\n          changeFlags: changeFlags\n        });\n\n        this._setWGS84PropertyForTiles();\n      }\n    }\n  }, {\n    key: \"_updateTileData\",\n    value: function () {\n      var _updateTileData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data, tileJSON, _this$props, onDataLoad, fetch;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = this.props.data;\n                tileJSON = null;\n\n                if (!(typeof data === 'string' && !isURLTemplate(data))) {\n                  _context.next = 18;\n                  break;\n                }\n\n                _this$props = this.props, onDataLoad = _this$props.onDataLoad, fetch = _this$props.fetch;\n                this.setState({\n                  data: null,\n                  tileJSON: null\n                });\n                _context.prev = 5;\n                _context.next = 8;\n                return fetch(data, {\n                  propName: 'data',\n                  layer: this,\n                  loaders: []\n                });\n\n              case 8:\n                tileJSON = _context.sent;\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](5);\n                this.raiseError(_context.t0, 'loading TileJSON');\n                data = null;\n\n              case 15:\n                if (onDataLoad) {\n                  onDataLoad(tileJSON);\n                }\n\n                _context.next = 19;\n                break;\n\n              case 18:\n                if (data.tilejson) {\n                  tileJSON = data;\n                }\n\n              case 19:\n                if (tileJSON) {\n                  data = tileJSON.tiles;\n                }\n\n                this.setState({\n                  data: data,\n                  tileJSON: tileJSON\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 11]]);\n      }));\n\n      function _updateTileData() {\n        return _updateTileData2.apply(this, arguments);\n      }\n\n      return _updateTileData;\n    }()\n  }, {\n    key: \"_getTilesetOptions\",\n    value: function _getTilesetOptions(props) {\n      var opts = _get(_getPrototypeOf(MVTLayer.prototype), \"_getTilesetOptions\", this).call(this, props);\n\n      var tileJSON = this.state.tileJSON;\n\n      if (tileJSON) {\n        if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > props.minZoom) {\n          opts.minZoom = tileJSON.minzoom;\n        }\n\n        if (Number.isFinite(tileJSON.maxzoom) && (!Number.isFinite(props.maxZoom) || tileJSON.maxzoom < props.maxZoom)) {\n          opts.maxZoom = tileJSON.maxzoom;\n        }\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.data) return null;\n      return _get(_getPrototypeOf(MVTLayer.prototype), \"renderLayers\", this).call(this);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var _loadOptions;\n\n      var url = getURLFromTemplate(this.state.data, tile);\n\n      if (!url) {\n        return Promise.reject('Invalid URL');\n      }\n\n      var loadOptions = this.getLoadOptions();\n      var _this$props2 = this.props,\n          binary = _this$props2.binary,\n          fetch = _this$props2.fetch;\n      var signal = tile.signal,\n          x = tile.x,\n          y = tile.y,\n          z = tile.z;\n      loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {\n        mimeType: 'application/x-protobuf',\n        mvt: _objectSpread(_objectSpread({}, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.mvt), {}, {\n          coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n          tileIndex: {\n            x: x,\n            y: y,\n            z: z\n          }\n        }),\n        gis: binary ? {\n          format: 'binary'\n        } : {}\n      });\n      return fetch(url, {\n        propName: 'data',\n        layer: this,\n        loadOptions: loadOptions,\n        signal: signal\n      });\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var tile = props.tile;\n      var worldScale = Math.pow(2, tile.z);\n      var xScale = WORLD_SIZE / worldScale;\n      var yScale = -xScale;\n      var xOffset = WORLD_SIZE * tile.x / worldScale;\n      var yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n      var modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n      props.autoHighlight = false;\n\n      if (!this.context.viewport.resolution) {\n        props.modelMatrix = modelMatrix;\n        props.coordinateOrigin = [xOffset, yOffset, 0];\n        props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n        props.extensions = [].concat(_toConsumableArray(props.extensions || []), [new ClipExtension()]);\n      }\n\n      var subLayers = _get(_getPrototypeOf(MVTLayer.prototype), \"renderSubLayers\", this).call(this, props);\n\n      if (this.props.binary && !(subLayers instanceof GeoJsonLayer)) {\n        log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n      }\n\n      return subLayers;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      var uniqueIdProperty = this.props.uniqueIdProperty;\n      var _this$state = this.state,\n          hoveredFeatureId = _this$state.hoveredFeatureId,\n          hoveredFeatureLayerName = _this$state.hoveredFeatureLayerName;\n      var hoveredFeature = info.object;\n      var newHoveredFeatureId;\n      var newHoveredFeatureLayerName;\n\n      if (hoveredFeature) {\n        newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n        newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n      }\n\n      if (hoveredFeatureId !== newHoveredFeatureId || hoveredFeatureLayerName !== newHoveredFeatureLayerName) {\n        this.setState({\n          hoveredFeatureId: newHoveredFeatureId,\n          hoveredFeatureLayerName: newHoveredFeatureLayerName\n        });\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(MVTLayer.prototype), \"getPickingInfo\", this).call(this, params);\n\n      var isWGS84 = this.context.viewport.resolution;\n\n      if (this.props.binary && info.index !== -1) {\n        var data = params.sourceLayer.props.data;\n        info.object = binaryToGeojson(data, {\n          globalFeatureId: info.index\n        });\n      }\n\n      if (info.object && !isWGS84) {\n        info.object = transformTileCoordsToWGS84(info.object, info.tile.bbox, this.context.viewport);\n      }\n\n      return info;\n    }\n  }, {\n    key: \"getHighlightedObjectIndex\",\n    value: function getHighlightedObjectIndex(tile) {\n      var _this$state2 = this.state,\n          hoveredFeatureId = _this$state2.hoveredFeatureId,\n          hoveredFeatureLayerName = _this$state2.hoveredFeatureLayerName;\n      var _this$props3 = this.props,\n          uniqueIdProperty = _this$props3.uniqueIdProperty,\n          highlightedFeatureId = _this$props3.highlightedFeatureId,\n          binary = _this$props3.binary;\n      var data = tile.content;\n      var isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n      var isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n\n      if (!isFeatureIdPresent) {\n        return -1;\n      }\n\n      var featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n\n      if (Array.isArray(data)) {\n        return data.findIndex(function (feature) {\n          var isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n          var isMatchingLayer = isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n          return isMatchingId && isMatchingLayer;\n        });\n      } else if (data && binary) {\n        return findIndexBinary(data, uniqueIdProperty, featureIdToHighlight, isHighlighted ? '' : hoveredFeatureLayerName);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_pickObjects\",\n    value: function _pickObjects(maxObjects) {\n      var _this$context = this.context,\n          deck = _this$context.deck,\n          viewport = _this$context.viewport;\n      var width = viewport.width;\n      var height = viewport.height;\n      var x = viewport.x;\n      var y = viewport.y;\n      var layerIds = [this.id];\n      return deck.pickObjects({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        layerIds: layerIds,\n        maxObjects: maxObjects\n      });\n    }\n  }, {\n    key: \"getRenderedFeatures\",\n    value: function getRenderedFeatures() {\n      var maxFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var features = this._pickObjects(maxFeatures);\n\n      var featureCache = new Set();\n      var renderedFeatures = [];\n\n      var _iterator = _createForOfIteratorHelper(features),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var f = _step.value;\n          var featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n          if (featureId === undefined) {\n            renderedFeatures.push(f.object);\n          } else if (!featureCache.has(featureId)) {\n            featureCache.add(featureId);\n            renderedFeatures.push(f.object);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return renderedFeatures;\n    }\n  }, {\n    key: \"_setWGS84PropertyForTiles\",\n    value: function _setWGS84PropertyForTiles() {\n      var _this = this;\n\n      var propName = 'dataInWGS84';\n      var tileset = this.state.tileset;\n      tileset.selectedTiles.forEach(function (tile) {\n        if (!tile.hasOwnProperty(propName)) {\n          Object.defineProperty(tile, propName, {\n            get: function get() {\n              if (!tile.content) {\n                return null;\n              }\n\n              if (_this.props.binary && Array.isArray(tile.content) && !tile.content.length) {\n                return [];\n              }\n\n              if (tile._contentWGS84 === undefined) {\n                var content = _this.props.binary ? binaryToGeojson(tile.content) : tile.content;\n                tile._contentWGS84 = content.map(function (feature) {\n                  return transformTileCoordsToWGS84(feature, tile.bbox, _this.context.viewport);\n                });\n              }\n\n              return tile._contentWGS84;\n            }\n          });\n        }\n      });\n    }\n  }]);\n\n  return MVTLayer;\n}(TileLayer);\n\nexport { MVTLayer as default };\n\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return undefined;\n}\n\nfunction getFeatureLayerName(feature) {\n  var _feature$properties;\n\n  return ((_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.layerName) || null;\n}\n\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\nfunction transformTileCoordsToWGS84(object, bbox, viewport) {\n  var feature = _objectSpread(_objectSpread({}, object), {}, {\n    geometry: {\n      type: object.geometry.type\n    }\n  });\n\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: function get() {\n      var wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n  return feature;\n}\n\nMVTLayer.layerName = 'MVTLayer';\nMVTLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/mvt-layer/mvt-layer.js"],"names":["WORLD_SIZE","defaultProps","uniqueIdProperty","type","value","highlightedFeatureId","loaders","binary","initializeState","data","tileJSON","updateState","changeFlags","props","oldProps","context","isURLTemplate","fetch","propName","layer","onDataLoad","_getTilesetOptions","opts","Number","renderLayers","getTileData","url","getURLFromTemplate","Promise","loadOptions","z","mimeType","mvt","coordinates","tileIndex","x","y","gis","format","signal","renderSubLayers","tile","worldScale","Math","xScale","yScale","xOffset","yOffset","modelMatrix","COORDINATE_SYSTEM","subLayers","log","_updateAutoHighlight","hoveredFeatureLayerName","hoveredFeature","info","newHoveredFeatureId","getFeatureUniqueId","newHoveredFeatureLayerName","getFeatureLayerName","hoveredFeatureId","getPickingInfo","isWGS84","params","binaryToGeojson","globalFeatureId","index","transformTileCoordsToWGS84","getHighlightedObjectIndex","isHighlighted","isFeatureIdDefined","isFeatureIdPresent","featureIdToHighlight","Array","feature","isMatchingId","isMatchingLayer","findIndexBinary","_pickObjects","viewport","width","height","layerIds","maxObjects","getRenderedFeatures","maxFeatures","features","featureCache","renderedFeatures","featureId","f","_setWGS84PropertyForTiles","tileset","Object","get","content","geometry","object","wgs84Geom","transform","MVTLayer"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\nimport {Matrix4} from 'math.gl';\nimport {MVTWorkerLoader} from '@loaders.gl/mvt';\nimport {binaryToGeojson} from '@loaders.gl/gis';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {ClipExtension} from '@deck.gl/extensions';\n\nimport TileLayer from '../tile-layer/tile-layer';\nimport {getURLFromTemplate, isURLTemplate} from '../tile-layer/utils';\nimport {transform} from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\n\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nconst WORLD_SIZE = 512;\n\nconst defaultProps = {\n  uniqueIdProperty: {type: 'string', value: ''},\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n};\n\nexport default class MVTLayer extends TileLayer {\n  initializeState() {\n    super.initializeState();\n    this.setState({\n      data: null,\n      tileJSON: null\n    });\n  }\n\n  get isLoaded() {\n    return this.state.data && this.state.tileset && super.isLoaded;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      this._updateTileData();\n    }\n\n    if (this.state.data) {\n      super.updateState({props, oldProps, context, changeFlags});\n      this._setWGS84PropertyForTiles();\n    }\n  }\n\n  /* eslint-disable complexity */\n  async _updateTileData() {\n    let {data} = this.props;\n    let tileJSON = null;\n\n    if (typeof data === 'string' && !isURLTemplate(data)) {\n      const {onDataLoad, fetch} = this.props;\n      this.setState({data: null, tileJSON: null});\n      try {\n        tileJSON = await fetch(data, {propName: 'data', layer: this, loaders: []});\n      } catch (error) {\n        this.raiseError(error, 'loading TileJSON');\n        data = null;\n      }\n\n      if (onDataLoad) {\n        onDataLoad(tileJSON);\n      }\n    } else if (data.tilejson) {\n      tileJSON = data;\n    }\n\n    if (tileJSON) {\n      data = tileJSON.tiles;\n    }\n\n    this.setState({data, tileJSON});\n  }\n\n  _getTilesetOptions(props) {\n    const opts = super._getTilesetOptions(props);\n    const {tileJSON} = this.state;\n\n    if (tileJSON) {\n      if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > props.minZoom) {\n        opts.minZoom = tileJSON.minzoom;\n      }\n\n      if (\n        Number.isFinite(tileJSON.maxzoom) &&\n        (!Number.isFinite(props.maxZoom) || tileJSON.maxzoom < props.maxZoom)\n      ) {\n        opts.maxZoom = tileJSON.maxzoom;\n      }\n    }\n    return opts;\n  }\n\n  /* eslint-disable complexity */\n\n  renderLayers() {\n    if (!this.state.data) return null;\n    return super.renderLayers();\n  }\n\n  getTileData(tile) {\n    const url = getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    let loadOptions = this.getLoadOptions();\n    const {binary, fetch} = this.props;\n    const {signal, x, y, z} = tile;\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf',\n      mvt: {\n        ...loadOptions?.mvt,\n        coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n        tileIndex: {x, y, z}\n        // Local worker debug\n        // workerUrl: `modules/mvt/dist/mvt-loader.worker.js`\n        // Set worker to null to skip web workers\n        // workerUrl: null\n      },\n      gis: binary ? {format: 'binary'} : {}\n    };\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(props) {\n    const {tile} = props;\n    const worldScale = Math.pow(2, tile.z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n\n    props.autoHighlight = false;\n\n    if (!this.context.viewport.resolution) {\n      props.modelMatrix = modelMatrix;\n      props.coordinateOrigin = [xOffset, yOffset, 0];\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [...(props.extensions || []), new ClipExtension()];\n    }\n\n    const subLayers = super.renderSubLayers(props);\n\n    if (this.props.binary && !(subLayers instanceof GeoJsonLayer)) {\n      log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n    }\n\n    return subLayers;\n  }\n\n  _updateAutoHighlight(info) {\n    const {uniqueIdProperty} = this.props;\n\n    const {hoveredFeatureId, hoveredFeatureLayerName} = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId;\n    let newHoveredFeatureLayerName;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n    }\n\n    if (\n      hoveredFeatureId !== newHoveredFeatureId ||\n      hoveredFeatureLayerName !== newHoveredFeatureLayerName\n    ) {\n      this.setState({\n        hoveredFeatureId: newHoveredFeatureId,\n        hoveredFeatureLayerName: newHoveredFeatureLayerName\n      });\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n\n    const isWGS84 = this.context.viewport.resolution;\n\n    if (this.props.binary && info.index !== -1) {\n      const {data} = params.sourceLayer.props;\n      info.object = binaryToGeojson(data, {globalFeatureId: info.index});\n    }\n    if (info.object && !isWGS84) {\n      info.object = transformTileCoordsToWGS84(info.object, info.tile.bbox, this.context.viewport);\n    }\n\n    return info;\n  }\n\n  getHighlightedObjectIndex(tile) {\n    const {hoveredFeatureId, hoveredFeatureLayerName} = this.state;\n    const {uniqueIdProperty, highlightedFeatureId, binary} = this.props;\n    const data = tile.content;\n\n    const isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n\n    if (!isFeatureIdPresent) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n\n    // Iterable data\n    if (Array.isArray(data)) {\n      return data.findIndex(feature => {\n        const isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n        const isMatchingLayer =\n          isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n        return isMatchingId && isMatchingLayer;\n      });\n\n      // Non-iterable data\n    } else if (data && binary) {\n      // Get the feature index of the selected item to highlight\n      return findIndexBinary(\n        data,\n        uniqueIdProperty,\n        featureIdToHighlight,\n        isHighlighted ? '' : hoveredFeatureLayerName\n      );\n    }\n\n    return -1;\n  }\n\n  _pickObjects(maxObjects) {\n    const {deck, viewport} = this.context;\n    const width = viewport.width;\n    const height = viewport.height;\n    const x = viewport.x;\n    const y = viewport.y;\n    const layerIds = [this.id];\n    return deck.pickObjects({x, y, width, height, layerIds, maxObjects});\n  }\n\n  getRenderedFeatures(maxFeatures = null) {\n    const features = this._pickObjects(maxFeatures);\n    const featureCache = new Set();\n    const renderedFeatures = [];\n\n    for (const f of features) {\n      const featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n      if (featureId === undefined) {\n        // we have no id for the feature, we just add to the list\n        renderedFeatures.push(f.object);\n      } else if (!featureCache.has(featureId)) {\n        // Add removing duplicates\n        featureCache.add(featureId);\n        renderedFeatures.push(f.object);\n      }\n    }\n\n    return renderedFeatures;\n  }\n\n  _setWGS84PropertyForTiles() {\n    const propName = 'dataInWGS84';\n    const {tileset} = this.state;\n\n    tileset.selectedTiles.forEach(tile => {\n      if (!tile.hasOwnProperty(propName)) {\n        // eslint-disable-next-line accessor-pairs\n        Object.defineProperty(tile, propName, {\n          get: () => {\n            // Still loading or encountered an error\n            if (!tile.content) {\n              return null;\n            }\n\n            if (this.props.binary && Array.isArray(tile.content) && !tile.content.length) {\n              // TODO: @loaders.gl/mvt returns [] when no content. It should return a valid empty binary.\n              // https://github.com/visgl/loaders.gl/pull/1137\n              return [];\n            }\n\n            if (tile._contentWGS84 === undefined) {\n              // Create a cache to transform only once\n              const content = this.props.binary ? binaryToGeojson(tile.content) : tile.content;\n              tile._contentWGS84 = content.map(feature =>\n                transformTileCoordsToWGS84(feature, tile.bbox, this.context.viewport)\n              );\n            }\n            return tile._contentWGS84;\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return undefined;\n}\n\nfunction getFeatureLayerName(feature) {\n  return feature.properties?.layerName || null;\n}\n\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\nfunction transformTileCoordsToWGS84(object, bbox, viewport) {\n  const feature = {\n    ...object,\n    geometry: {\n      type: object.geometry.type\n    }\n  };\n\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: () => {\n      const wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n\n  return feature;\n}\n\nMVTLayer.layerName = 'MVTLayer';\nMVTLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}