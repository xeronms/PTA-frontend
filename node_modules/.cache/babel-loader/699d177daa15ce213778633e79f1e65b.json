{"ast":null,"code":"import _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Accessor from './accessor';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\n\nvar ProgramConfiguration = /*#__PURE__*/function () {\n  function ProgramConfiguration(program) {\n    _classCallCheck(this, ProgramConfiguration);\n\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n\n    this._readAttributesFromProgram(program);\n\n    this._readVaryingsFromProgram(program);\n  }\n\n  _createClass(ProgramConfiguration, [{\n    key: \"getAttributeInfo\",\n    value: function getAttributeInfo(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return this.attributeInfosByLocation[location];\n      }\n\n      return this.attributeInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.location : -1;\n    }\n  }, {\n    key: \"getAttributeAccessor\",\n    value: function getAttributeAccessor(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.accessor : null;\n    }\n  }, {\n    key: \"getVaryingInfo\",\n    value: function getVaryingInfo(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return this.varyingInfos[location];\n      }\n\n      return this.varyingInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getVaryingIndex\",\n    value: function getVaryingIndex(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.location : -1;\n    }\n  }, {\n    key: \"getVaryingAccessor\",\n    value: function getVaryingAccessor(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.accessor : null;\n    }\n  }, {\n    key: \"_readAttributesFromProgram\",\n    value: function _readAttributesFromProgram(program) {\n      var gl = program.gl;\n      var count = gl.getProgramParameter(program.handle, 35721);\n\n      for (var index = 0; index < count; index++) {\n        var _gl$getActiveAttrib = gl.getActiveAttrib(program.handle, index),\n            name = _gl$getActiveAttrib.name,\n            type = _gl$getActiveAttrib.type,\n            size = _gl$getActiveAttrib.size;\n\n        var location = gl.getAttribLocation(program.handle, name);\n\n        if (location >= 0) {\n          this._addAttribute(location, name, type, size);\n        }\n      }\n\n      this.attributeInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_readVaryingsFromProgram\",\n    value: function _readVaryingsFromProgram(program) {\n      var gl = program.gl;\n\n      if (!isWebGL2(gl)) {\n        return;\n      }\n\n      var count = gl.getProgramParameter(program.handle, 35971);\n\n      for (var location = 0; location < count; location++) {\n        var _gl$getTransformFeedb = gl.getTransformFeedbackVarying(program.handle, location),\n            name = _gl$getTransformFeedb.name,\n            type = _gl$getTransformFeedb.type,\n            size = _gl$getTransformFeedb.size;\n\n        this._addVarying(location, name, type, size);\n      }\n\n      this.varyingInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_addAttribute\",\n    value: function _addAttribute(location, name, compositeType, size) {\n      var _decomposeCompositeGL = decomposeCompositeGLType(compositeType),\n          type = _decomposeCompositeGL.type,\n          components = _decomposeCompositeGL.components;\n\n      var accessor = {\n        type: type,\n        size: size * components\n      };\n\n      this._inferProperties(location, name, accessor);\n\n      var attributeInfo = {\n        location: location,\n        name: name,\n        accessor: new Accessor(accessor)\n      };\n      this.attributeInfos.push(attributeInfo);\n      this.attributeInfosByLocation[location] = attributeInfo;\n      this.attributeInfosByName[attributeInfo.name] = attributeInfo;\n    }\n  }, {\n    key: \"_inferProperties\",\n    value: function _inferProperties(location, name, accessor) {\n      if (/instance/i.test(name)) {\n        accessor.divisor = 1;\n      }\n    }\n  }, {\n    key: \"_addVarying\",\n    value: function _addVarying(location, name, compositeType, size) {\n      var _decomposeCompositeGL2 = decomposeCompositeGLType(compositeType),\n          type = _decomposeCompositeGL2.type,\n          components = _decomposeCompositeGL2.components;\n\n      var accessor = new Accessor({\n        type: type,\n        size: size * components\n      });\n      var varying = {\n        location: location,\n        name: name,\n        accessor: accessor\n      };\n      this.varyingInfos.push(varying);\n      this.varyingInfosByName[varying.name] = varying;\n    }\n  }]);\n\n  return ProgramConfiguration;\n}();\n\nexport { ProgramConfiguration as default };","map":{"version":3,"sources":["../../../src/classes/program-configuration.js"],"names":["constructor","program","Object","getAttributeInfo","location","Number","getAttributeLocation","attributeInfo","getAttributeAccessor","getVaryingInfo","getVaryingIndex","varying","getVaryingAccessor","_readAttributesFromProgram","gl","count","index","size","a","b","_readVaryingsFromProgram","isWebGL2","_addAttribute","components","decomposeCompositeGLType","accessor","type","name","_inferProperties","_addVarying"],"mappings":";;AAEA,OAAA,QAAA,MAAA,YAAA;AACA,SAAA,QAAA,QAAA,kBAAA;AACA,SAAA,wBAAA,QAAA,gCAAA;;IAEe,oB;AACbA,gCAAW,OAAXA,EAAqB;AAAA;;AACnB,SAAA,EAAA,GAAUC,OAAO,CAAjB,EAAA;AACA,SAAA,cAAA,GAAA,EAAA;AACA,SAAA,oBAAA,GAAA,EAAA;AAIA,SAAA,wBAAA,GAAA,EAAA;AACA,SAAA,YAAA,GAAA,EAAA;AACA,SAAA,kBAAA,GAAA,EAAA;AACAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;;AACA,SAAA,0BAAA,CAAA,OAAA;;AACA,SAAA,wBAAA,CAAA,OAAA;AACD;;;;WAEDC,0BAAgB,cAAhBA,EAAiC;AAC/B,UAAMC,QAAQ,GAAGC,MAAM,CAAvB,cAAuB,CAAvB;;AACA,UAAIA,MAAM,CAANA,QAAAA,CAAJ,QAAIA,CAAJ,EAA+B;AAC7B,eAAO,KAAA,wBAAA,CAAP,QAAO,CAAP;AACD;;AACD,aAAO,KAAA,oBAAA,CAAA,cAAA,KAAP,IAAA;AACD;;;WAGDC,8BAAoB,cAApBA,EAAqC;AACnC,UAAMC,aAAa,GAAG,KAAA,gBAAA,CAAtB,cAAsB,CAAtB;AACA,aAAOA,aAAa,GAAGA,aAAa,CAAhB,QAAA,GAA4B,CAAhD,CAAA;AACD;;;WAEDC,8BAAoB,cAApBA,EAAqC;AACnC,UAAMD,aAAa,GAAG,KAAA,gBAAA,CAAtB,cAAsB,CAAtB;AACA,aAAOA,aAAa,GAAGA,aAAa,CAAhB,QAAA,GAApB,IAAA;AACD;;;WAEDE,wBAAc,cAAdA,EAA+B;AAC7B,UAAML,QAAQ,GAAGC,MAAM,CAAvB,cAAuB,CAAvB;;AACA,UAAIA,MAAM,CAANA,QAAAA,CAAJ,QAAIA,CAAJ,EAA+B;AAC7B,eAAO,KAAA,YAAA,CAAP,QAAO,CAAP;AACD;;AACD,aAAO,KAAA,kBAAA,CAAA,cAAA,KAAP,IAAA;AACD;;;WAEDK,yBAAe,cAAfA,EAAgC;AAC9B,UAAMC,OAAO,GAAG,KAAhB,cAAgB,EAAhB;AACA,aAAOA,OAAO,GAAGA,OAAO,CAAV,QAAA,GAAsB,CAApC,CAAA;AACD;;;WAEDC,4BAAkB,cAAlBA,EAAmC;AACjC,UAAMD,OAAO,GAAG,KAAhB,cAAgB,EAAhB;AACA,aAAOA,OAAO,GAAGA,OAAO,CAAV,QAAA,GAAd,IAAA;AACD;;;WAKDE,oCAA0B,OAA1BA,EAAoC;AAClC,UAAOC,EAAP,GAAA,OAAA,CAAOA,EAAP;AACA,UAAMC,KAAK,GAAGD,EAAE,CAAFA,mBAAAA,CAAuBb,OAAO,CAA9Ba,MAAAA,EAAd,KAAcA,CAAd;;AAEA,WAAK,IAAIE,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAzB,KAAA,EAAmCA,KAAnC,EAAA,EAA4C;AAC1C,kCAA2BF,EAAE,CAAFA,eAAAA,CAAmBb,OAAO,CAA1Ba,MAAAA,EAA3B,KAA2BA,CAA3B;AAAA,YAAM,IAAN,uBAAM,IAAN;AAAA,YAAM,IAAN,uBAAM,IAAN;AAAA,YAAmBG,IAAnB,uBAAmBA,IAAnB;;AACA,YAAMb,QAAQ,GAAGU,EAAE,CAAFA,iBAAAA,CAAqBb,OAAO,CAA5Ba,MAAAA,EAAjB,IAAiBA,CAAjB;;AAGA,YAAIV,QAAQ,IAAZ,CAAA,EAAmB;AACjB,eAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA;AACD;AACF;;AAED,WAAA,cAAA,CAAA,IAAA,CAAyB,UAAA,CAAA,EAAA,CAAA;AAAA,eAAUc,CAAC,CAADA,QAAAA,GAAaC,CAAC,CAAjD,QAAyB;AAAA,OAAzB;AACD;;;WAGDC,kCAAwB,OAAxBA,EAAkC;AAChC,UAAON,EAAP,GAAA,OAAA,CAAOA,EAAP;;AACA,UAAI,CAACO,QAAQ,CAAb,EAAa,CAAb,EAAmB;AACjB;AACD;;AAED,UAAMN,KAAK,GAAGD,EAAE,CAAFA,mBAAAA,CAAuBb,OAAO,CAA9Ba,MAAAA,EAAd,KAAcA,CAAd;;AACA,WAAK,IAAIV,QAAQ,GAAjB,CAAA,EAAuBA,QAAQ,GAA/B,KAAA,EAAyCA,QAAzC,EAAA,EAAqD;AACnD,oCAA2BU,EAAE,CAAFA,2BAAAA,CAA+Bb,OAAO,CAAtCa,MAAAA,EAA3B,QAA2BA,CAA3B;AAAA,YAAM,IAAN,yBAAM,IAAN;AAAA,YAAM,IAAN,yBAAM,IAAN;AAAA,YAAmBG,IAAnB,yBAAmBA,IAAnB;;AACA,aAAA,WAAA,CAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA;AACD;;AAED,WAAA,YAAA,CAAA,IAAA,CAAuB,UAAA,CAAA,EAAA,CAAA;AAAA,eAAUC,CAAC,CAADA,QAAAA,GAAaC,CAAC,CAA/C,QAAuB;AAAA,OAAvB;AACD;;;WAEDG,uBAAa,QAAbA,EAAa,IAAbA,EAAa,aAAbA,EAAa,IAAbA,EAAmD;AACjD,kCAA2BE,wBAAwB,CAAnD,aAAmD,CAAnD;AAAA,UAAM,IAAN,yBAAM,IAAN;AAAA,UAAaD,UAAb,yBAAaA,UAAb;;AACA,UAAME,QAAQ,GAAG;AAACC,QAAAA,IAAD,EAACA,IAAD;AAAOT,QAAAA,IAAI,EAAEA,IAAI,GAAGM;AAApB,OAAjB;;AACA,WAAA,gBAAA,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA;;AAEA,UAAMhB,aAAa,GAAG;AAACH,QAAAA,QAAD,EAACA,QAAD;AAAWuB,QAAAA,IAAX,EAAWA,IAAX;AAAiBF,QAAAA,QAAQ,EAAE,IAAA,QAAA,CAAA,QAAA;AAA3B,OAAtB;AACA,WAAA,cAAA,CAAA,IAAA,CAAA,aAAA;AACA,WAAA,wBAAA,CAAA,QAAA,IAAA,aAAA;AACA,WAAA,oBAAA,CAA0BlB,aAAa,CAAvC,IAAA,IAAA,aAAA;AACD;;;WAGDqB,0BAAgB,QAAhBA,EAAgB,IAAhBA,EAAgB,QAAhBA,EAA2C;AACzC,UAAI,YAAA,IAAA,CAAJ,IAAI,CAAJ,EAA4B;AAE1BH,QAAAA,QAAQ,CAARA,OAAAA,GAAAA,CAAAA;AACD;AACF;;;WAEDI,qBAAW,QAAXA,EAAW,IAAXA,EAAW,aAAXA,EAAW,IAAXA,EAAiD;AAC/C,mCAA2BL,wBAAwB,CAAnD,aAAmD,CAAnD;AAAA,UAAM,IAAN,0BAAM,IAAN;AAAA,UAAaD,UAAb,0BAAaA,UAAb;;AACA,UAAME,QAAQ,GAAG,IAAA,QAAA,CAAa;AAACC,QAAAA,IAAD,EAACA,IAAD;AAAOT,QAAAA,IAAI,EAAEA,IAAI,GAAGM;AAApB,OAAb,CAAjB;AAEA,UAAMZ,OAAO,GAAG;AAACP,QAAAA,QAAD,EAACA,QAAD;AAAWuB,QAAAA,IAAX,EAAWA,IAAX;AAAiBF,QAAAA,QAAAA,EAAAA;AAAjB,OAAhB;AACA,WAAA,YAAA,CAAA,IAAA,CAAA,OAAA;AACA,WAAA,kBAAA,CAAwBd,OAAO,CAA/B,IAAA,IAAA,OAAA;AACD;;;;;;SAnHY,oB","sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n"]},"metadata":{},"sourceType":"module"}