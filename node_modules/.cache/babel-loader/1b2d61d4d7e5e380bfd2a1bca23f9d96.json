{"ast":null,"code":"import _slicedToArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport MathArray from './base/math-array';\nimport { clamp } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport Quaternion from './quaternion';\nvar ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nvar ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n\n  return value;\n}\n\nvar Euler = /*#__PURE__*/function (_MathArray) {\n  _inherits(Euler, _MathArray);\n\n  var _super = _createSuper(Euler);\n\n  function Euler() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;\n\n    _classCallCheck(this, Euler);\n\n    _this = _super.call(this, -0, -0, -0, -0);\n\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      var _this2;\n\n      (_this2 = _this).fromVector3.apply(_this2, arguments);\n    } else {\n      _this.set(x, y, z, order);\n    }\n\n    return _this;\n  }\n\n  _createClass(Euler, [{\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(quaternion) {\n      var _quaternion = _slicedToArray(quaternion, 4),\n          x = _quaternion[0],\n          y = _quaternion[1],\n          z = _quaternion[2],\n          w = _quaternion[3];\n\n      var ysqr = y * y;\n      var t0 = -2.0 * (ysqr + z * z) + 1.0;\n      var t1 = +2.0 * (x * y + w * z);\n      var t2 = -2.0 * (x * z - w * y);\n      var t3 = +2.0 * (y * z + w * x);\n      var t4 = -2.0 * (x * x + ysqr) + 1.0;\n      t2 = t2 > 1.0 ? 1.0 : t2;\n      t2 = t2 < -1.0 ? -1.0 : t2;\n      var roll = Math.atan2(t3, t4);\n      var pitch = Math.asin(t2);\n      var yaw = Math.atan2(t1, t0);\n      return new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = Number.isFinite(array[3]) || this.order;\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var order = arguments.length > 3 ? arguments[3] : undefined;\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = Number.isFinite(order) ? order : this[3];\n      return this.check();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this[0];\n      array[offset + 1] = this[1];\n      array[offset + 2] = this[2];\n      return array;\n    }\n  }, {\n    key: \"toArray4\",\n    value: function toArray4() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this[0];\n      array[offset + 1] = this[1];\n      array[offset + 2] = this[2];\n      array[offset + 3] = this[3];\n      return array;\n    }\n  }, {\n    key: \"toVector3\",\n    value: function toVector3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[0];\n      result[1] = this[1];\n      result[2] = this[2];\n      return result;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"beta\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"gamma\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"phi\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"theta\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"psi\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"roll\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"yaw\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      this[3] = checkOrder(value);\n    }\n  }, {\n    key: \"fromVector3\",\n    value: function fromVector3(v, order) {\n      return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this[0] = array[0 + offset];\n      this[1] = array[1 + offset];\n      this[2] = array[2 + offset];\n\n      if (array[3] !== undefined) {\n        this[3] = array[3];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"fromRollPitchYaw\",\n    value: function fromRollPitchYaw(roll, pitch, yaw) {\n      return this.set(roll, pitch, yaw, Euler.ZYX);\n    }\n  }, {\n    key: \"fromRotationMatrix\",\n    value: function fromRotationMatrix(m) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n\n      this._fromRotationMatrix(m, order);\n\n      return this.check();\n    }\n  }, {\n    key: \"getRotationMatrix\",\n    value: function getRotationMatrix(m) {\n      return this._getRotationMatrix(m);\n    }\n  }, {\n    key: \"getQuaternion\",\n    value: function getQuaternion() {\n      var q = new Quaternion();\n\n      switch (this[3]) {\n        case Euler.XYZ:\n          return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n\n        case Euler.YXZ:\n          return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n\n        case Euler.ZXY:\n          return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n\n        case Euler.ZYX:\n          return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n\n        case Euler.YZX:\n          return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n\n        case Euler.XZY:\n          return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n    }\n  }, {\n    key: \"_fromRotationMatrix\",\n    value: function _fromRotationMatrix(m) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n      var te = m.elements;\n      var m11 = te[0],\n          m12 = te[4],\n          m13 = te[8];\n      var m21 = te[1],\n          m22 = te[5],\n          m23 = te[9];\n      var m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n      order = order || this[3];\n\n      switch (order) {\n        case Euler.XYZ:\n          this[1] = Math.asin(clamp(m13, -1, 1));\n\n          if (Math.abs(m13) < ALMOST_ONE) {\n            this[0] = Math.atan2(-m23, m33);\n            this[2] = Math.atan2(-m12, m11);\n          } else {\n            this[0] = Math.atan2(m32, m22);\n            this[2] = 0;\n          }\n\n          break;\n\n        case Euler.YXZ:\n          this[0] = Math.asin(-clamp(m23, -1, 1));\n\n          if (Math.abs(m23) < ALMOST_ONE) {\n            this[1] = Math.atan2(m13, m33);\n            this[2] = Math.atan2(m21, m22);\n          } else {\n            this[1] = Math.atan2(-m31, m11);\n            this[2] = 0;\n          }\n\n          break;\n\n        case Euler.ZXY:\n          this[0] = Math.asin(clamp(m32, -1, 1));\n\n          if (Math.abs(m32) < ALMOST_ONE) {\n            this[1] = Math.atan2(-m31, m33);\n            this[2] = Math.atan2(-m12, m22);\n          } else {\n            this[1] = 0;\n            this[2] = Math.atan2(m21, m11);\n          }\n\n          break;\n\n        case Euler.ZYX:\n          this[1] = Math.asin(-clamp(m31, -1, 1));\n\n          if (Math.abs(m31) < ALMOST_ONE) {\n            this[0] = Math.atan2(m32, m33);\n            this[2] = Math.atan2(m21, m11);\n          } else {\n            this[0] = 0;\n            this[2] = Math.atan2(-m12, m22);\n          }\n\n          break;\n\n        case Euler.YZX:\n          this[2] = Math.asin(clamp(m21, -1, 1));\n\n          if (Math.abs(m21) < ALMOST_ONE) {\n            this[0] = Math.atan2(-m23, m22);\n            this[1] = Math.atan2(-m31, m11);\n          } else {\n            this[0] = 0;\n            this[1] = Math.atan2(m13, m33);\n          }\n\n          break;\n\n        case Euler.XZY:\n          this[2] = Math.asin(-clamp(m12, -1, 1));\n\n          if (Math.abs(m12) < ALMOST_ONE) {\n            this[0] = Math.atan2(m32, m22);\n            this[1] = Math.atan2(m13, m11);\n          } else {\n            this[0] = Math.atan2(-m23, m33);\n            this[1] = 0;\n          }\n\n          break;\n\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n\n      this[3] = order;\n      return this;\n    }\n  }, {\n    key: \"_getRotationMatrix\",\n    value: function _getRotationMatrix(result) {\n      var te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var a = Math.cos(x);\n      var c = Math.cos(y);\n      var e = Math.cos(z);\n      var b = Math.sin(x);\n      var d = Math.sin(y);\n      var f = Math.sin(z);\n\n      switch (this[3]) {\n        case Euler.XYZ:\n          {\n            var ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.YXZ:\n          {\n            var ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.ZXY:\n          {\n            var _ce = c * e,\n                _cf = c * f,\n                _de = d * e,\n                _df = d * f;\n\n            te[0] = _ce - _df * b;\n            te[4] = -a * f;\n            te[8] = _de + _cf * b;\n            te[1] = _cf + _de * b;\n            te[5] = a * e;\n            te[9] = _df - _ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.ZYX:\n          {\n            var _ae = a * e,\n                _af = a * f,\n                _be = b * e,\n                _bf = b * f;\n\n            te[0] = c * e;\n            te[4] = _be * d - _af;\n            te[8] = _ae * d + _bf;\n            te[1] = c * f;\n            te[5] = _bf * d + _ae;\n            te[9] = _af * d - _be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.YZX:\n          {\n            var ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n            break;\n          }\n\n        case Euler.XZY:\n          {\n            var _ac = a * c,\n                _ad = a * d,\n                _bc = b * c,\n                _bd = b * d;\n\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = _ac * f + _bd;\n            te[5] = a * e;\n            te[9] = _ad * f - _bc;\n            te[2] = _bc * f - _ad;\n            te[6] = b * e;\n            te[10] = _bd * f + _ac;\n            break;\n          }\n\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return te;\n    }\n  }, {\n    key: \"toQuaternion\",\n    value: function toQuaternion() {\n      var cy = Math.cos(this.yaw * 0.5);\n      var sy = Math.sin(this.yaw * 0.5);\n      var cr = Math.cos(this.roll * 0.5);\n      var sr = Math.sin(this.roll * 0.5);\n      var cp = Math.cos(this.pitch * 0.5);\n      var sp = Math.sin(this.pitch * 0.5);\n      var w = cy * cr * cp + sy * sr * sp;\n      var x = cy * sr * cp - sy * cr * sp;\n      var y = cy * cr * sp + sy * sr * cp;\n      var z = sy * cr * cp - cy * sr * sp;\n      return new Quaternion(x, y, z, w);\n    }\n  }], [{\n    key: \"ZYX\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"YXZ\",\n    get: function get() {\n      return 1;\n    }\n  }, {\n    key: \"XZY\",\n    get: function get() {\n      return 2;\n    }\n  }, {\n    key: \"ZXY\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"YZX\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"XYZ\",\n    get: function get() {\n      return 5;\n    }\n  }, {\n    key: \"RollPitchYaw\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"DefaultOrder\",\n    get: function get() {\n      return Euler.ZYX;\n    }\n  }, {\n    key: \"RotationOrders\",\n    get: function get() {\n      return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n    }\n  }, {\n    key: \"rotationOrder\",\n    value: function rotationOrder(order) {\n      return Euler.RotationOrders[order];\n    }\n  }]);\n\n  return Euler;\n}(MathArray);\n\nexport { Euler as default };","map":{"version":3,"sources":["../../../src/classes/euler.js"],"names":["ERR_UNKNOWN_ORDER","ALMOST_ONE","value","ZYX","YXZ","XZY","ZXY","YZX","XYZ","RollPitchYaw","DefaultOrder","Euler","RotationOrders","rotationOrder","ELEMENTS","constructor","x","y","z","order","arguments","Array","fromQuaternion","ysqr","t0","t1","w","t2","t3","t4","roll","Math","pitch","yaw","copy","array","Number","set","validate","validateOrder","toArray","offset","toArray4","toVector3","result","checkNumber","alpha","beta","gamma","phi","theta","psi","checkOrder","fromVector3","v","fromArray","fromRollPitchYaw","fromRotationMatrix","getRotationMatrix","getQuaternion","q","_fromRotationMatrix","te","m","m11","m12","m13","m21","m22","m23","m31","m32","m33","clamp","_getRotationMatrix","a","c","e","b","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './base/math-array';\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport Quaternion from './quaternion';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n\nexport default class Euler extends MathArray {\n  // static XYZ = 0;\n  // static YZX = 1;\n  // static ZXY = 2;\n  // static XZY = 3;\n  // static YXZ = 4;\n  // static ZYX = 5;\n  // static RollPitchYaw = 0;\n  // static DefaultOrder = 0;\n\n  // Constants\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  static get ZYX() {\n    return 0;\n  }\n\n  static get YXZ() {\n    return 1;\n  }\n\n  static get XZY() {\n    return 2;\n  }\n\n  static get ZXY() {\n    return 3;\n  }\n\n  static get YZX() {\n    return 4;\n  }\n\n  static get XYZ() {\n    return 5;\n  }\n\n  static get RollPitchYaw() {\n    return 0;\n  }\n\n  static get DefaultOrder() {\n    return Euler.ZYX;\n  }\n\n  static get RotationOrders() {\n    return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n  }\n\n  static rotationOrder(order) {\n    return Euler.RotationOrders[order];\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      // @ts-ignore error TS2345: Argument of type 'number | [number, number, number, number]' not assignable to 'number'\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2.0 * (ysqr + z * z) + 1.0;\n    const t1 = +2.0 * (x * y + w * z);\n    let t2 = -2.0 * (x * z - w * y);\n    const t3 = +2.0 * (y * z + w * x);\n    const t4 = -2.0 * (x * x + ysqr) + 1.0;\n\n    t2 = t2 > 1.0 ? 1.0 : t2;\n    t2 = t2 < -1.0 ? -1.0 : t2;\n\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n\n    return new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate() {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result = [-0, -0, -0]) {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n  /** @type {number} */\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // alpha, beta, gamma angle notation\n  get alpha() {\n    return this[0];\n  }\n\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta() {\n    return this[1];\n  }\n\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma() {\n    return this[2];\n  }\n\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi() {\n    return this[0];\n  }\n\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta() {\n    return this[1];\n  }\n\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi() {\n    return this[2];\n  }\n\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // roll, pitch, yaw angle notation\n  /** @type {number} */\n  get roll() {\n    return this[0];\n  }\n\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get pitch() {\n    return this[1];\n  }\n\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get yaw() {\n    return this[2];\n  }\n\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order() {\n    return this[3];\n  }\n\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // Constructors\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, Euler.ZYX);\n  }\n\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case Euler.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case Euler.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case Euler.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case Euler.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case Euler.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case Euler.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n\n  // Concersion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements;\n    const m11 = te[0],\n      m12 = te[4],\n      m13 = te[8];\n    const m21 = te[1],\n      m22 = te[5],\n      m23 = te[9];\n    const m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n\n    order = order || this[3];\n\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    this[3] = order;\n\n    return this;\n  }\n\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n\n    return te;\n  }\n\n  toQuaternion() {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n\n    return new Quaternion(x, y, z, w);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}