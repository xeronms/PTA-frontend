{"ast":null,"code":"import _slicedToArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nvar noop = function noop() {};\n\nvar DracoBuilder = /*#__PURE__*/function () {\n  function DracoBuilder(draco) {\n    _classCallCheck(this, DracoBuilder);\n\n    _defineProperty(this, \"draco\", void 0);\n\n    _defineProperty(this, \"dracoEncoder\", void 0);\n\n    _defineProperty(this, \"dracoMeshBuilder\", void 0);\n\n    _defineProperty(this, \"dracoMetadataBuilder\", void 0);\n\n    _defineProperty(this, \"log\", void 0);\n\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  _createClass(DracoBuilder, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyEncodedObject(this.dracoMeshBuilder);\n      this.destroyEncodedObject(this.dracoEncoder);\n      this.destroyEncodedObject(this.dracoMetadataBuilder);\n      this.dracoMeshBuilder = null;\n      this.dracoEncoder = null;\n      this.draco = null;\n    }\n  }, {\n    key: \"destroyEncodedObject\",\n    value: function destroyEncodedObject(object) {\n      if (object) {\n        this.draco.destroy(object);\n      }\n    }\n  }, {\n    key: \"encodeSync\",\n    value: function encodeSync(mesh) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.log = noop;\n\n      this._setOptions(options);\n\n      return options.pointcloud ? this._encodePointCloud(mesh, options) : this._encodeMesh(mesh, options);\n    }\n  }, {\n    key: \"_getAttributesFromMesh\",\n    value: function _getAttributesFromMesh(mesh) {\n      var attributes = _objectSpread(_objectSpread({}, mesh), mesh.attributes);\n\n      if (mesh.indices) {\n        attributes.indices = mesh.indices;\n      }\n\n      return attributes;\n    }\n  }, {\n    key: \"_encodePointCloud\",\n    value: function _encodePointCloud(pointcloud, options) {\n      var dracoPointCloud = new this.draco.PointCloud();\n\n      if (options.metadata) {\n        this._addGeometryMetadata(dracoPointCloud, options.metadata);\n      }\n\n      var attributes = this._getAttributesFromMesh(pointcloud);\n\n      this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n      var dracoData = new this.draco.DracoInt8Array();\n\n      try {\n        var encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(dracoPointCloud, false, dracoData);\n\n        if (!(encodedLen > 0)) {\n          throw new Error('Draco encoding failed.');\n        }\n\n        this.log(\"DRACO encoded \".concat(dracoPointCloud.num_points(), \" points\\n        with \").concat(dracoPointCloud.num_attributes(), \" attributes into \").concat(encodedLen, \" bytes\"));\n        return dracoInt8ArrayToArrayBuffer(dracoData);\n      } finally {\n        this.destroyEncodedObject(dracoData);\n        this.destroyEncodedObject(dracoPointCloud);\n      }\n    }\n  }, {\n    key: \"_encodeMesh\",\n    value: function _encodeMesh(mesh, options) {\n      var dracoMesh = new this.draco.Mesh();\n\n      if (options.metadata) {\n        this._addGeometryMetadata(dracoMesh, options.metadata);\n      }\n\n      var attributes = this._getAttributesFromMesh(mesh);\n\n      this._createDracoMesh(dracoMesh, attributes, options);\n\n      var dracoData = new this.draco.DracoInt8Array();\n\n      try {\n        var encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n\n        if (encodedLen <= 0) {\n          throw new Error('Draco encoding failed.');\n        }\n\n        this.log(\"DRACO encoded \".concat(dracoMesh.num_points(), \" points\\n        with \").concat(dracoMesh.num_attributes(), \" attributes into \").concat(encodedLen, \" bytes\"));\n        return dracoInt8ArrayToArrayBuffer(dracoData);\n      } finally {\n        this.destroyEncodedObject(dracoData);\n        this.destroyEncodedObject(dracoMesh);\n      }\n    }\n  }, {\n    key: \"_setOptions\",\n    value: function _setOptions(options) {\n      if ('speed' in options) {\n        var _this$dracoEncoder;\n\n        (_this$dracoEncoder = this.dracoEncoder).SetSpeedOptions.apply(_this$dracoEncoder, _toConsumableArray(options.speed));\n      }\n\n      if ('method' in options) {\n        var dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n        this.dracoEncoder.SetEncodingMethod(dracoMethod);\n      }\n\n      if ('quantization' in options) {\n        for (var attribute in options.quantization) {\n          var bits = options.quantization[attribute];\n          var dracoPosition = this.draco[attribute];\n          this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n        }\n      }\n    }\n  }, {\n    key: \"_createDracoMesh\",\n    value: function _createDracoMesh(dracoMesh, attributes, options) {\n      var optionalMetadata = options.attributesMetadata || {};\n\n      try {\n        var positions = this._getPositionAttribute(attributes);\n\n        if (!positions) {\n          throw new Error('positions');\n        }\n\n        var vertexCount = positions.length / 3;\n\n        for (var attributeName in attributes) {\n          var attribute = attributes[attributeName];\n          attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n\n          var uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n          if (uniqueId !== -1) {\n            this._addAttributeMetadata(dracoMesh, uniqueId, _objectSpread({\n              name: attributeName\n            }, optionalMetadata[attributeName] || {}));\n          }\n        }\n      } catch (error) {\n        this.destroyEncodedObject(dracoMesh);\n        throw error;\n      }\n\n      return dracoMesh;\n    }\n  }, {\n    key: \"_createDracoPointCloud\",\n    value: function _createDracoPointCloud(dracoPointCloud, attributes, options) {\n      var optionalMetadata = options.attributesMetadata || {};\n\n      try {\n        var positions = this._getPositionAttribute(attributes);\n\n        if (!positions) {\n          throw new Error('positions');\n        }\n\n        var vertexCount = positions.length / 3;\n\n        for (var attributeName in attributes) {\n          var attribute = attributes[attributeName];\n          attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n\n          var uniqueId = this._addAttributeToMesh(dracoPointCloud, attributeName, attribute, vertexCount);\n\n          if (uniqueId !== -1) {\n            this._addAttributeMetadata(dracoPointCloud, uniqueId, _objectSpread({\n              name: attributeName\n            }, optionalMetadata[attributeName] || {}));\n          }\n        }\n      } catch (error) {\n        this.destroyEncodedObject(dracoPointCloud);\n        throw error;\n      }\n\n      return dracoPointCloud;\n    }\n  }, {\n    key: \"_addAttributeToMesh\",\n    value: function _addAttributeToMesh(mesh, attributeName, attribute, vertexCount) {\n      if (!ArrayBuffer.isView(attribute)) {\n        return -1;\n      }\n\n      var type = this._getDracoAttributeType(attributeName);\n\n      var size = attribute.length / vertexCount;\n\n      if (type === 'indices') {\n        var numFaces = attribute.length / 3;\n        this.log(\"Adding attribute \".concat(attributeName, \", size \").concat(numFaces));\n        this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n        return -1;\n      }\n\n      this.log(\"Adding attribute \".concat(attributeName, \", size \").concat(size));\n      var builder = this.dracoMeshBuilder;\n      var buffer = attribute.buffer;\n\n      switch (attribute.constructor) {\n        case Int8Array:\n          return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n        case Int16Array:\n          return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n        case Int32Array:\n          return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n\n        case Uint8Array:\n        case Uint8ClampedArray:\n          return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n        case Uint16Array:\n          return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n        case Uint32Array:\n          return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n        case Float32Array:\n        default:\n          return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n      }\n    }\n  }, {\n    key: \"_getDracoAttributeType\",\n    value: function _getDracoAttributeType(attributeName) {\n      switch (attributeName.toLowerCase()) {\n        case 'indices':\n          return 'indices';\n\n        case 'position':\n        case 'positions':\n        case 'vertices':\n          return this.draco.POSITION;\n\n        case 'normal':\n        case 'normals':\n          return this.draco.NORMAL;\n\n        case 'color':\n        case 'colors':\n          return this.draco.COLOR;\n\n        case 'texcoord':\n        case 'texcoords':\n          return this.draco.TEX_COORD;\n\n        default:\n          return this.draco.GENERIC;\n      }\n    }\n  }, {\n    key: \"_getPositionAttribute\",\n    value: function _getPositionAttribute(attributes) {\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n\n        var dracoType = this._getDracoAttributeType(attributeName);\n\n        if (dracoType === this.draco.POSITION) {\n          return attribute;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_addGeometryMetadata\",\n    value: function _addGeometryMetadata(dracoGeometry, metadata) {\n      var dracoMetadata = new this.draco.Metadata();\n\n      this._populateDracoMetadata(dracoMetadata, metadata);\n\n      this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n    }\n  }, {\n    key: \"_addAttributeMetadata\",\n    value: function _addAttributeMetadata(dracoGeometry, uniqueAttributeId, metadata) {\n      var dracoAttributeMetadata = new this.draco.Metadata();\n\n      this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n\n      this.dracoMeshBuilder.SetMetadataForAttribute(dracoGeometry, uniqueAttributeId, dracoAttributeMetadata);\n    }\n  }, {\n    key: \"_populateDracoMetadata\",\n    value: function _populateDracoMetadata(dracoMetadata, metadata) {\n      var _iterator = _createForOfIteratorHelper(getEntries(metadata)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n          switch (typeof value) {\n            case 'number':\n              if (Math.trunc(value) === value) {\n                this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n              } else {\n                this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n              }\n\n              break;\n\n            case 'object':\n              if (value instanceof Int32Array) {\n                this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n              }\n\n              break;\n\n            case 'string':\n            default:\n              this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return DracoBuilder;\n}();\n\nexport { DracoBuilder as default };\n\nfunction dracoInt8ArrayToArrayBuffer(dracoData) {\n  var byteLength = dracoData.size();\n  var outputBuffer = new ArrayBuffer(byteLength);\n  var outputData = new Int8Array(outputBuffer);\n\n  for (var i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n\n  return outputBuffer;\n}\n\nfunction getEntries(container) {\n  var hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}","map":{"version":3,"sources":["../../../src/lib/draco-builder.ts"],"names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","constructor","destroy","destroyEncodedObject","encodeSync","options","_getAttributesFromMesh","attributes","mesh","_encodePointCloud","dracoPointCloud","dracoData","encodedLen","dracoInt8ArrayToArrayBuffer","_encodeMesh","dracoMesh","_setOptions","dracoMethod","bits","dracoPosition","_createDracoMesh","optionalMetadata","positions","vertexCount","attribute","attributeName","uniqueId","name","_createDracoPointCloud","_addAttributeToMesh","ArrayBuffer","type","size","numFaces","builder","buffer","_getDracoAttributeType","_getPositionAttribute","dracoType","_addGeometryMetadata","dracoMetadata","_addAttributeMetadata","dracoAttributeMetadata","_populateDracoMetadata","getEntries","Math","value","byteLength","outputBuffer","outputData","i","hasEntriesFunc","container","Object"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray, DracoMeshData} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMeshData, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMeshData) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMeshData, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMeshData, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMeshData` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"]},"metadata":{},"sourceType":"module"}