{"ast":null,"code":"import _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _Symbol$asyncIterator;\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\n\nvar AsyncQueue = /*#__PURE__*/function (_Symbol$asyncIterator2) {\n  function AsyncQueue() {\n    _classCallCheck(this, AsyncQueue);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_settlers\", void 0);\n\n    _defineProperty(this, \"_closed\", void 0);\n\n    this._values = [];\n    this._settlers = [];\n    this._closed = false;\n  }\n\n  _createClass(AsyncQueue, [{\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      return this.enqueue(value);\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue(value) {\n      if (this._closed) {\n        throw new Error('Closed');\n      }\n\n      if (this._settlers.length > 0) {\n        if (this._values.length > 0) {\n          throw new Error('Illegal internal state');\n        }\n\n        var settler = this._settlers.shift();\n\n        if (value instanceof Error) {\n          settler.reject(value);\n        } else {\n          settler.resolve({\n            value: value\n          });\n        }\n      } else {\n        this._values.push(value);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      while (this._settlers.length > 0) {\n        var settler = this._settlers.shift();\n\n        settler.resolve({\n          done: true\n        });\n      }\n\n      this._closed = true;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var _this = this;\n\n      if (this._values.length > 0) {\n        var value = this._values.shift();\n\n        if (value instanceof Error) {\n          return Promise.reject(value);\n        }\n\n        return Promise.resolve({\n          done: false,\n          value: value\n        });\n      }\n\n      if (this._closed) {\n        if (this._settlers.length > 0) {\n          throw new Error('Illegal internal state');\n        }\n\n        return Promise.resolve({\n          done: true,\n          value: undefined\n        });\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this._settlers.push({\n          resolve: resolve,\n          reject: reject\n        });\n      });\n    }\n  }]);\n\n  return AsyncQueue;\n}(_Symbol$asyncIterator);\n\nexport { AsyncQueue as default };","map":{"version":3,"sources":["../../../../src/lib/async-queue/async-queue.ts"],"names":["constructor","Symbol","asyncIterator","push","enqueue","settler","value","close","done","next","Promise","undefined","resolve","reject"],"mappings":";;;;;;wBA2BGC,MAAM,CAACC,a;;IAZK,U;AAKbF,wBAAc;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AACZ,SAAA,OAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,EAAA;AACA,SAAA,OAAA,GAAA,KAAA;AACD;;;;WAGD,iBAA2C;AACzC,aAAA,IAAA;AACD;;;WAGDG,cAAI,KAAJA,EAAqB;AACnB,aAAO,KAAA,OAAA,CAAP,KAAO,CAAP;AACD;;;WAMDC,iBAAO,KAAPA,EAAgC;AAC9B,UAAI,KAAJ,OAAA,EAAkB;AAChB,cAAM,IAAA,KAAA,CAAN,QAAM,CAAN;AACD;;AAED,UAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,YAAI,KAAA,OAAA,CAAA,MAAA,GAAJ,CAAA,EAA6B;AAC3B,gBAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AACD;;AACD,YAAMC,OAAO,GAAG,KAAA,SAAA,CAAhB,KAAgB,EAAhB;;AACA,YAAIC,KAAK,YAAT,KAAA,EAA4B;AAC1BD,UAAAA,OAAO,CAAPA,MAAAA,CAAAA,KAAAA;AADF,SAAA,MAEO;AACLA,UAAAA,OAAO,CAAPA,OAAAA,CAAgB;AAACC,YAAAA,KAAAA,EAAAA;AAAD,WAAhBD;AACD;AATH,OAAA,MAUO;AACL,aAAA,OAAA,CAAA,IAAA,CAAA,KAAA;AACD;AACF;;;WAGDE,iBAAc;AACZ,aAAO,KAAA,SAAA,CAAA,MAAA,GAAP,CAAA,EAAkC;AAChC,YAAMF,OAAO,GAAG,KAAA,SAAA,CAAhB,KAAgB,EAAhB;;AACAA,QAAAA,OAAO,CAAPA,OAAAA,CAAgB;AAACG,UAAAA,IAAI,EAAE;AAAP,SAAhBH;AACD;;AACD,WAAA,OAAA,GAAA,IAAA;AACD;;;WAKDI,gBAAwC;AAAA;;AAEtC,UAAI,KAAA,OAAA,CAAA,MAAA,GAAJ,CAAA,EAA6B;AAC3B,YAAMH,KAAK,GAAG,KAAA,OAAA,CAAd,KAAc,EAAd;;AACA,YAAIA,KAAK,YAAT,KAAA,EAA4B;AAC1B,iBAAOI,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AACD,eAAO,OAAO,CAAP,OAAA,CAAgB;AAACF,UAAAA,IAAI,EAAL,KAAA;AAAcF,UAAAA,KAAAA,EAAAA;AAAd,SAAhB,CAAP;AACD;;AAGD,UAAI,KAAJ,OAAA,EAAkB;AAChB,YAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,gBAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AACD;;AACD,eAAO,OAAO,CAAP,OAAA,CAAgB;AAACE,UAAAA,IAAI,EAAL,IAAA;AAAaF,UAAAA,KAAK,EAAEK;AAApB,SAAhB,CAAP;AACD;;AAGD,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAoB;AAACC,UAAAA,OAAD,EAACA,OAAD;AAAUC,UAAAA,MAAAA,EAAAA;AAAV,SAApB;AADF,OAAO,CAAP;AAGD;;;;EAnED,qB;;SAZa,U","sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({done: false, value});\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true, value: undefined});\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({resolve, reject});\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}