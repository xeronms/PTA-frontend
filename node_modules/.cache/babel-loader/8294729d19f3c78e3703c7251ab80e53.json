{"ast":null,"code":"import _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Model, Geometry } from '@luma.gl/core';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nvar TriangleLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(TriangleLayer, _Layer);\n\n  var _super = _createSuper(TriangleLayer);\n\n  function TriangleLayer() {\n    _classCallCheck(this, TriangleLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TriangleLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        vs: vs,\n        fs: fs,\n        modules: [project32]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          noAlloc: true\n        },\n        texCoords: {\n          size: 2,\n          noAlloc: true\n        }\n      });\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var vertexCount = this.props.vertexCount;\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: vertexCount\n        })\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var model = this.state.model;\n      var _this$props = this.props,\n          texture = _this$props.texture,\n          maxTexture = _this$props.maxTexture,\n          colorTexture = _this$props.colorTexture,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold,\n          aggregationMode = _this$props.aggregationMode,\n          colorDomain = _this$props.colorDomain;\n      model.setUniforms(_objectSpread(_objectSpread({}, uniforms), {}, {\n        texture: texture,\n        maxTexture: maxTexture,\n        colorTexture: colorTexture,\n        intensity: intensity,\n        threshold: threshold,\n        aggregationMode: aggregationMode,\n        colorDomain: colorDomain\n      })).draw();\n    }\n  }]);\n\n  return TriangleLayer;\n}(Layer);\n\nexport { TriangleLayer as default };\nTriangleLayer.layerName = 'TriangleLayer';","map":{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["getShaders","vs","fs","modules","initializeState","gl","attributeManager","positions","size","noAlloc","texCoords","model","_getModel","vertexCount","id","geometry","drawMode","draw","uniforms","colorDomain","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","TriangleLayer"],"mappings":";;;;;AAqBA,SAAA,KAAA,EAAA,QAAA,QAAA,eAAA;AACA,SAAA,KAAA,EAAA,SAAA,QAAA,eAAA;AACA,OAAA,EAAA,MAAA,8BAAA;AACA,OAAA,EAAA,MAAA,gCAAA;;IAEe,a;;;;;;;;;;;;;WACbA,sBAAa;AACX,aAAO;AAACC,QAAAA,EAAD,EAACA,EAAD;AAAKC,QAAAA,EAAL,EAAKA,EAAL;AAASC,QAAAA,OAAO,EAAE,CAAA,SAAA;AAAlB,OAAP;AACD;;;WAEDC,2BAAkB;AAChB,UAAOC,EAAP,GAAa,KAAb,OAAA,CAAOA,EAAP;AACA,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AACAA,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AAACC,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,OAAO,EAAE;AAAnB,SADQ;AAEnBC,QAAAA,SAAS,EAAE;AAACF,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,OAAO,EAAE;AAAnB;AAFQ,OAArBH;AAIA,WAAA,QAAA,CAAc;AACZK,QAAAA,KAAK,EAAE,KAAA,SAAA,CAAA,EAAA;AADK,OAAd;AAGD;;;WAEDC,mBAAS,EAATA,EAAc;AACZ,UAAOC,WAAP,GAAsB,KAAtB,KAAA,CAAOA,WAAP;AAEA,aAAO,IAAA,KAAA,CAAA,EAAA,kCACF,KADgB,UAChB,EADE;AAELC,QAAAA,EAAE,EAAE,KAAA,KAAA,CAFe,EAAd;AAGLC,QAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,UAAAA,QAAQ,EADa,CAAA;AAErBH,UAAAA,WAAAA,EAAAA;AAFqB,SAAb;AAHL,SAAP;AAQD;;;WAEDI,oBAAiB;AAAA,UAAXC,QAAW,QAAXA,QAAW;AACf,UAAOP,KAAP,GAAgB,KAAhB,KAAA,CAAOA,KAAP;AAEA,wBAQI,KARJ,KAAA;AAAA,UAAM,OAAN,eAAM,OAAN;AAAA,UAAM,UAAN,eAAM,UAAN;AAAA,UAAM,YAAN,eAAM,YAAN;AAAA,UAAM,SAAN,eAAM,SAAN;AAAA,UAAM,SAAN,eAAM,SAAN;AAAA,UAAM,eAAN,eAAM,eAAN;AAAA,UAOEQ,WAPF,eAOEA,WAPF;AAUAR,MAAAA,KAAK,CAALA,WAAAA,iCACe,QADfA;AAGIS,QAAAA,OAFW,EAEXA,OAHJT;AAIIU,QAAAA,UAHW,EAGXA,UAJJV;AAKIW,QAAAA,YAJW,EAIXA,YALJX;AAMIY,QAAAA,SALW,EAKXA,SANJZ;AAOIa,QAAAA,SANW,EAMXA,SAPJb;AAQIc,QAAAA,eAPW,EAOXA,eARJd;AASIQ,QAAAA,WAAAA,EAAAA;AATJR,UAAAA,IAAAA;AAYD;;;;EAvDY,K;;SAAA,a;AA0Dfe,aAAa,CAAbA,SAAAA,GAAAA,eAAAA","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    } = this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\n"]},"metadata":{},"sourceType":"module"}