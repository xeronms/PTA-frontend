{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { DracoLoader as DracoWorkerLoader } from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nexport { DracoWriter } from './draco-writer';\nexport { DracoWorkerLoader };\nexport var DracoLoader = _objectSpread(_objectSpread({}, DracoWorkerLoader), {}, {\n  parse: parse\n});\n\nfunction parse(_x, _x2) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n    var _yield$loadDracoDecod, draco, dracoParser;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadDracoDecoderModule(options);\n\n          case 2:\n            _yield$loadDracoDecod = _context.sent;\n            draco = _yield$loadDracoDecod.draco;\n            dracoParser = new DracoParser(draco);\n            _context.prev = 5;\n            return _context.abrupt(\"return\", dracoParser.parseSync(arrayBuffer, options === null || options === void 0 ? void 0 : options.draco));\n\n          case 7:\n            _context.prev = 7;\n            dracoParser.destroy();\n            return _context.finish(7);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5,, 7, 10]]);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nexport var _TypecheckDracoLoader = DracoLoader;","map":{"version":3,"sources":["../../src/index.ts"],"names":["DracoLoader","parse","draco","loadDracoDecoderModule","dracoParser","options","_TypecheckDracoLoader"],"mappings":";;;AAGA,SAAQA,WAAW,IAAnB,iBAAA,QAAA,gBAAA;AACA,OAAA,WAAA,MAAA,oBAAA;AACA,SAAA,sBAAA,QAAA,2BAAA;AASA,SAAA,WAAA,QAAA,gBAAA;AAKA,SAAA,iBAAA;AAKA,OAAO,IAAMA,WAAW,mCAAG,iBAAH;AAEtBC,EAAAA,KAAAA,EAAAA;AAFsB,EAAjB;;SAKP,K;;;;;oEAAA,iBAAA,WAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIwBE,sBAAsB,CAA5C,OAA4C,CAJ9C;;AAAA;AAAA;AAISD,YAAAA,KAJT,yBAISA,KAJT;AAKQE,YAAAA,WALR,GAKsB,IAAA,WAAA,CAApB,KAAoB,CALtB;AAAA;AAAA,6CAOWA,WAAW,CAAXA,SAAAA,CAAAA,WAAAA,EAAmCC,OAAnCD,KAAAA,IAAmCC,IAAAA,OAAnCD,KAAAA,KAAAA,CAAmCC,GAAnCD,KAAAA,CAAmCC,GAAAA,OAAO,CAAjD,KAAOD,CAPX;;AAAA;AAAA;AASIA,YAAAA,WAAW,CAAXA,OAAAA;AATJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcA,OAAO,IAAME,qBAAuC,GAA7C,WAAA","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMeshData, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMeshData, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(\n  arrayBuffer: ArrayBuffer,\n  options?: DracoLoaderOptions\n): Promise<DracoMeshData> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"]},"metadata":{},"sourceType":"module"}