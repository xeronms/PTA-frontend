{"ast":null,"code":"import _slicedToArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\n\nvar OrthographicState = /*#__PURE__*/function (_OrbitState) {\n  _inherits(OrthographicState, _OrbitState);\n\n  var _super = _createSuper(OrthographicState);\n\n  function OrthographicState(props) {\n    var _this;\n\n    _classCallCheck(this, OrthographicState);\n\n    _this = _super.call(this, props);\n    _this.zoomAxis = props.zoomAxis || 'all';\n    return _this;\n  }\n\n  _createClass(OrthographicState, [{\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n      return props;\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref) {\n      var scale = _ref.scale,\n          startZoom = _ref.startZoom;\n      var _this$_viewportProps = this._viewportProps,\n          maxZoom = _this$_viewportProps.maxZoom,\n          minZoom = _this$_viewportProps.minZoom;\n\n      if (!startZoom && startZoom !== 0) {\n        startZoom = this._viewportProps.zoom;\n      }\n\n      var deltaZoom = Math.log2(scale);\n\n      if (Array.isArray(startZoom)) {\n        var _startZoom = startZoom,\n            _startZoom2 = _slicedToArray(_startZoom, 2),\n            newZoomX = _startZoom2[0],\n            newZoomY = _startZoom2[1];\n\n        switch (this.zoomAxis) {\n          case 'X':\n            newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n            break;\n\n          case 'Y':\n            newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n            break;\n\n          default:\n            var z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n            if (z < minZoom) {\n              deltaZoom += minZoom - z;\n            }\n\n            z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n            if (z > maxZoom) {\n              deltaZoom += maxZoom - z;\n            }\n\n            newZoomX += deltaZoom;\n            newZoomY += deltaZoom;\n        }\n\n        return [newZoomX, newZoomY];\n      }\n\n      return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n    }\n  }]);\n\n  return OrthographicState;\n}(OrbitState);\n\nvar OrthographicController = /*#__PURE__*/function (_Controller) {\n  _inherits(OrthographicController, _Controller);\n\n  var _super2 = _createSuper(OrthographicController);\n\n  function OrthographicController(props) {\n    _classCallCheck(this, OrthographicController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, OrthographicState, props);\n  }\n\n  _createClass(OrthographicController, [{\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      return false;\n    }\n  }, {\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['target', 'zoom'];\n    }\n  }]);\n\n  return OrthographicController;\n}(Controller);\n\nexport { OrthographicController as default };","map":{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["constructor","props","_applyConstraints","zoom","Array","clamp","_calculateNewZoom","startZoom","minZoom","deltaZoom","Math","newZoomX","newZoomY","z","maxZoom","_onPanRotate"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    // No rotation in orthographic view\n    return false;\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}