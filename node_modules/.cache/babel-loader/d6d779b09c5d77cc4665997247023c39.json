{"ast":null,"code":"import _get from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nexport var MapState = /*#__PURE__*/function (_ViewState) {\n  _inherits(MapState, _ViewState);\n\n  var _super = _createSuper(MapState);\n\n  function MapState() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom,\n        normalize = _ref.normalize;\n\n    _classCallCheck(this, MapState);\n\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      normalize: normalize\n    });\n    _this._state = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(MapState, [{\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var viewport = this.makeViewport(this._viewportProps);\n      var newProps = viewport.panByPosition(startPanLngLat, pos);\n      return this._getUpdatedState(newProps);\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n\n      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        newRotation = this._calculateNewPitchAndBearing(_objectSpread(_objectSpread({}, this._getRotationParams(pos, startRotatePos)), {}, {\n          startBearing: startBearing,\n          startPitch: startPitch\n        }));\n      } else {\n        newRotation = {\n          bearing: startBearing + deltaAngleX,\n          pitch: startPitch + deltaAngleY\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomLngLat = _this$_state2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread(_objectSpread({}, this._viewportProps), {}, {\n        zoom: zoom\n      }));\n      return this._getUpdatedState(_objectSpread({\n        zoom: zoom\n      }, zoomedViewport.panByPosition(startZoomLngLat, pos)));\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(speed);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(1 / speed);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - speed\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_zoomFromCenter\",\n    value: function _zoomFromCenter(scale) {\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n      return this.zoom({\n        pos: [width / 2, height / 2],\n        scale: scale\n      });\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps2 = this._viewportProps,\n          width = _this$_viewportProps2.width,\n          height = _this$_viewportProps2.height;\n      return this.pan({\n        startPos: [width / 2, height / 2],\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this._viewportProps), this._state), newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      var _props$normalize = props.normalize,\n          normalize = _props$normalize === void 0 ? true : _props$normalize;\n\n      if (normalize) {\n        Object.assign(props, normalizeViewportProps(props));\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n          startZoom = _ref8.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          minZoom = _this$_viewportProps3.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref9) {\n      var deltaScaleX = _ref9.deltaScaleX,\n          deltaScaleY = _ref9.deltaScaleY,\n          startBearing = _ref9.startBearing,\n          startPitch = _ref9.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps4 = this._viewportProps,\n          minPitch = _this$_viewportProps4.minPitch,\n          maxPitch = _this$_viewportProps4.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"_getRotationParams\",\n    value: function _getRotationParams(pos, startPos) {\n      var deltaX = pos[0] - startPos[0];\n      var deltaY = pos[1] - startPos[1];\n      var centerY = pos[1];\n      var startY = startPos[1];\n      var _this$_viewportProps5 = this._viewportProps,\n          width = _this$_viewportProps5.width,\n          height = _this$_viewportProps5.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      return {\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      };\n    }\n  }]);\n\n  return MapState;\n}(ViewState);\n\nvar MapController = /*#__PURE__*/function (_Controller) {\n  _inherits(MapController, _Controller);\n\n  var _super2 = _createSuper(MapController);\n\n  function MapController(props) {\n    _classCallCheck(this, MapController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, MapState, props);\n  }\n\n  _createClass(MapController, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      var oldProps = this.controllerStateProps;\n\n      _get(_getPrototypeOf(MapController.prototype), \"setProps\", this).call(this, props);\n\n      var dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n      if (dimensionChanged) {\n        this.updateViewport(new this.ControllerState(_objectSpread(_objectSpread({\n          makeViewport: this.makeViewport\n        }, this.controllerStateProps), this._state)));\n      }\n    }\n  }, {\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n    }\n  }]);\n\n  return MapController;\n}(Controller);\n\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","constructor","normalize","assert","Number","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","panStart","pos","pan","startPos","viewport","newProps","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","newRotation","rotateEnd","zoomStart","scale","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","fromProps","viewState","props","_viewportProps","Math","_zoomFromCenter","_panFromCenter","offset","_getUpdatedState","makeViewport","_applyConstraints","clamp","Object","normalizeViewportProps","_unproject","_calculateNewZoom","_calculateNewPitchAndBearing","deltaScaleY","_getRotationParams","deltaX","deltaY","centerY","startY","deltaScaleX","setProps","oldProps","dimensionChanged","_state"],"mappings":";;;;;;;AAAA,SAAA,KAAA,QAAA,SAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,SAAA,MAAA,cAAA;AACA,SAAA,sBAAA,QAAA,uBAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AAEA,IAAMA,qBAAqB,GAA3B,CAAA;AACA,IAAMC,WAAW,GAAjB,GAAA;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EADe,CAAA;AAEpBC,EAAAA,OAAO,EAFa,CAAA;AAGpBC,EAAAA,QAAQ,EAHY,GAAA;AAIpBC,EAAAA,OAAO,EAJa,CAAA;AAKpBC,EAAAA,OAAO,EALa,EAAA;AAMpBC,EAAAA,QAAQ,EANY,CAAA;AAOpBC,EAAAA,QAAQ,EAAE;AAPU,CAAtB;AAYA,WAAO,QAAP;AAAA;;AAAA;;AACEC,sBA+CQ;AAAA;;AAAA,mFA/CG,EA+CH;AAAA,QA/CI,YA+CJ,QA/CI,YA+CJ;AAAA,QA/CI,KA+CJ,QA/CI,KA+CJ;AAAA,QA/CI,MA+CJ,QA/CI,MA+CJ;AAAA,QA/CI,QA+CJ,QA/CI,QA+CJ;AAAA,QA/CI,SA+CJ,QA/CI,SA+CJ;AAAA,QA/CI,IA+CJ,QA/CI,IA+CJ;AAAA,4BAhCNN,OAgCM;AAAA,QAhCNA,OAgCM,6BAhCIF,aAAa,CAfb,OA+CJ;AAAA,0BA9BNC,KA8BM;AAAA,QA9BNA,KA8BM,2BA9BED,aAAa,CAjBX,KA+CJ;AAAA,6BAxBNG,QAwBM;AAAA,QAxBNA,QAwBM,8BAxBKH,aAAa,CAvBd,QA+CJ;AAAA,4BArBNK,OAqBM;AAAA,QArBNA,OAqBM,6BArBIL,aAAa,CA1Bb,OA+CJ;AAAA,4BApBNI,OAoBM;AAAA,QApBNA,OAoBM,6BApBIJ,aAAa,CA3Bb,OA+CJ;AAAA,6BAnBNO,QAmBM;AAAA,QAnBNA,QAmBM,8BAnBKP,aAAa,CA5Bd,QA+CJ;AAAA,6BAlBNM,QAkBM;AAAA,QAlBNA,QAkBM,8BAlBKN,aAAa,CA7Bd,QA+CJ;AAAA,QA/CI,cA+CJ,QA/CI,cA+CJ;AAAA,QA/CI,eA+CJ,QA/CI,eA+CJ;AAAA,QA/CI,cA+CJ,QA/CI,cA+CJ;AAAA,QA/CI,YA+CJ,QA/CI,YA+CJ;AAAA,QA/CI,UA+CJ,QA/CI,UA+CJ;AAAA,QA/CI,SA+CJ,QA/CI,SA+CJ;AAAA,QADNS,SACM,QADNA,SACM;;AAAA;;AACNC,IAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAPD,SAAOC,CAAD,CAAND;AACAA,IAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAPD,QAAOC,CAAD,CAAND;AACAA,IAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAPD,IAAOC,CAAD,CAAND;AAEA,8BAAM;AACJE,MAAAA,KADI,EACJA,KADI;AAEJC,MAAAA,MAFI,EAEJA,MAFI;AAGJC,MAAAA,QAHI,EAGJA,QAHI;AAIJC,MAAAA,SAJI,EAIJA,SAJI;AAKJC,MAAAA,IALI,EAKJA,IALI;AAMJd,MAAAA,OANI,EAMJA,OANI;AAOJD,MAAAA,KAPI,EAOJA,KAPI;AAQJE,MAAAA,QARI,EAQJA,QARI;AASJE,MAAAA,OATI,EASJA,OATI;AAUJD,MAAAA,OAVI,EAUJA,OAVI;AAWJG,MAAAA,QAXI,EAWJA,QAXI;AAYJD,MAAAA,QAZI,EAYJA,QAZI;AAaJG,MAAAA,SAAAA,EAAAA;AAbI,KAAN;AAgBA,UAAA,MAAA,GAAc;AACZQ,MAAAA,cADY,EACZA,cADY;AAEZC,MAAAA,eAFY,EAEZA,eAFY;AAGZC,MAAAA,cAHY,EAGZA,cAHY;AAIZC,MAAAA,YAJY,EAIZA,YAJY;AAKZC,MAAAA,UALY,EAKZA,UALY;AAMZC,MAAAA,SAAAA,EAAAA;AANY,KAAd;AASA,UAAA,YAAA,GAAA,YAAA;AA9BM;AA+BP;;AA/EH;AAAA;AAAA,WAqFEC,yBAAgB;AAAA,UAANC,GAAM,SAANA,GAAM;AACd,aAAO,KAAA,gBAAA,CAAsB;AAC3BP,QAAAA,cAAc,EAAE,KAAA,UAAA,CAAA,GAAA;AADW,OAAtB,CAAP;AAGD;AAzFH;AAAA;AAAA,WAiGEQ,oBAAqB;AAAA,UAAjB,GAAiB,SAAjB,GAAiB;AAAA,UAAXC,QAAW,SAAXA,QAAW;;AACnB,UAAMT,cAAc,GAAG,KAAA,MAAA,CAAA,cAAA,IAA8B,KAAA,UAAA,CAArD,QAAqD,CAArD;;AAEA,UAAI,CAAJ,cAAA,EAAqB;AACnB,eAAA,IAAA;AACD;;AAED,UAAMU,QAAQ,GAAG,KAAA,YAAA,CAAkB,KAAnC,cAAiB,CAAjB;AACA,UAAMC,QAAQ,GAAGD,QAAQ,CAARA,aAAAA,CAAAA,cAAAA,EAAjB,GAAiBA,CAAjB;AAEA,aAAO,KAAA,gBAAA,CAAP,QAAO,CAAP;AACD;AA5GH;AAAA;AAAA,WAkHEE,kBAAS;AACP,aAAO,KAAA,gBAAA,CAAsB;AAC3BZ,QAAAA,cAAc,EAAE;AADW,OAAtB,CAAP;AAGD;AAtHH;AAAA;AAAA,WA4HEa,4BAAmB;AAAA,UAANN,GAAM,SAANA,GAAM;AACjB,aAAO,KAAA,gBAAA,CAAsB;AAC3BL,QAAAA,cAAc,EADa,GAAA;AAE3BC,QAAAA,YAAY,EAAE,KAAA,cAAA,CAFa,OAAA;AAG3BC,QAAAA,UAAU,EAAE,KAAA,cAAA,CAAoBpB;AAHL,OAAtB,CAAP;AAKD;AAlIH;AAAA;AAAA,WAwIE8B,uBAAgD;AAAA,UAAzC,GAAyC,SAAzC,GAAyC;AAAA,oCAAnCC,WAAmC;AAAA,UAAnCA,WAAmC,kCAAzC,CAAyC;AAAA,oCAAlBC,WAAkB;AAAA,UAAlBA,WAAkB,kCAAJ,CAAI;AAC9C,yBAAmD,KAAnD,MAAA;AAAA,UAAM,cAAN,gBAAM,cAAN;AAAA,UAAM,YAAN,gBAAM,YAAN;AAAA,UAAqCZ,UAArC,gBAAqCA,UAArC;;AAEA,UAAI,CAAA,cAAA,IAAmB,CAACV,MAAM,CAANA,QAAAA,CAApB,YAAoBA,CAApB,IAAqD,CAACA,MAAM,CAANA,QAAAA,CAA1D,UAA0DA,CAA1D,EAAuF;AACrF,eAAA,IAAA;AACD;;AACD,UAAA,WAAA;;AACA,UAAA,GAAA,EAAS;AACPuB,QAAAA,WAAW,GAAG,KAAA,4BAAA,iCACT,KAAA,kBAAA,CAAA,GAAA,EAD2C,cAC3C,CADS;AAEZd,UAAAA,YAF8C,EAE9CA,YAFY;AAGZC,UAAAA,UAAAA,EAAAA;AAHY,WAAda;AADF,OAAA,MAMO;AACLA,QAAAA,WAAW,GAAG;AACZhC,UAAAA,OAAO,EAAEkB,YAAY,GADT,WAAA;AAEZnB,UAAAA,KAAK,EAAEoB,UAAU,GAAGY;AAFR,SAAdC;AAID;;AACD,aAAO,KAAA,gBAAA,CAAP,WAAO,CAAP;AACD;AA5JH;AAAA;AAAA,WAkKEC,qBAAY;AACV,aAAO,KAAA,gBAAA,CAAsB;AAC3Bf,QAAAA,YAAY,EADe,IAAA;AAE3BC,QAAAA,UAAU,EAAE;AAFe,OAAtB,CAAP;AAID;AAvKH;AAAA;AAAA,WA6KEe,0BAAiB;AAAA,UAANZ,GAAM,SAANA,GAAM;AACf,aAAO,KAAA,gBAAA,CAAsB;AAC3BN,QAAAA,eAAe,EAAE,KAAA,UAAA,CADU,GACV,CADU;AAE3BI,QAAAA,SAAS,EAAE,KAAA,cAAA,CAAoBN;AAFJ,OAAtB,CAAP;AAID;AAlLH;AAAA;AAAA,WA4LEA,qBAA6B;AAAA,UAAxB,GAAwB,SAAxB,GAAwB;AAAA,UAAxB,QAAwB,SAAxB,QAAwB;AAAA,UAARqB,KAAQ,SAARA,KAAQ;AAE3B,0BAAmC,KAAnC,MAAA;AAAA,UAAI,SAAJ,iBAAI,SAAJ;AAAA,UAAgBnB,eAAhB,iBAAgBA,eAAhB;;AAEA,UAAI,CAACP,MAAM,CAANA,QAAAA,CAAL,SAAKA,CAAL,EAAiC;AAO/BW,QAAAA,SAAS,GAAG,KAAA,cAAA,CAAZA,IAAAA;AACAJ,QAAAA,eAAe,GAAG,KAAA,UAAA,CAAA,QAAA,KAA6B,KAAA,UAAA,CAA/CA,GAA+C,CAA/CA;AACD;;AAED,UAAMF,IAAI,GAAG,KAAA,iBAAA,CAAuB;AAACqB,QAAAA,KAAD,EAACA,KAAD;AAAQf,QAAAA,SAAAA,EAAAA;AAAR,OAAvB,CAAb;;AAEA,UAAMgB,cAAc,GAAG,KAAA,YAAA,iCAAsB,KAAJ,cAAlB;AAA2CtB,QAAAA,IAAAA,EAAAA;AAA3C,SAAvB;AAEA,aAAO,KAAA,gBAAA;AACLA,QAAAA,IAD2B,EAC3BA;AADK,SAEFsB,cAAc,CAAdA,aAAAA,CAAAA,eAAAA,EAAAA,GAAAA,CAFE,EAAP;AAID;AAnNH;AAAA;AAAA,WAyNEC,mBAAU;AACR,aAAO,KAAA,gBAAA,CAAsB;AAC3BrB,QAAAA,eAAe,EADY,IAAA;AAE3BI,QAAAA,SAAS,EAAE;AAFgB,OAAtB,CAAP;AAID;AA9NH;AAAA;AAAA,WAgOEkB,kBAAkB;AAAA,UAAXC,KAAW,uEAAZ,CAAY;AAChB,aAAO,KAAA,eAAA,CAAP,KAAO,CAAP;AACD;AAlOH;AAAA;AAAA,WAoOEC,mBAAmB;AAAA,UAAXD,KAAW,uEAAZ,CAAY;AACjB,aAAO,KAAA,eAAA,CAAqB,IAA5B,KAAO,CAAP;AACD;AAtOH;AAAA;AAAA,WAwOEE,oBAAsB;AAAA,UAAbF,KAAa,uEAAd,GAAc;AACpB,aAAO,KAAA,cAAA,CAAoB,CAAA,KAAA,EAA3B,CAA2B,CAApB,CAAP;AACD;AA1OH;AAAA;AAAA,WA4OEG,qBAAuB;AAAA,UAAbH,KAAa,uEAAd,GAAc;AACrB,aAAO,KAAA,cAAA,CAAoB,CAAC,CAAD,KAAA,EAA3B,CAA2B,CAApB,CAAP;AACD;AA9OH;AAAA;AAAA,WAgPEI,kBAAoB;AAAA,UAAbJ,KAAa,uEAAd,GAAc;AAClB,aAAO,KAAA,cAAA,CAAoB,CAAA,CAAA,EAA3B,KAA2B,CAApB,CAAP;AACD;AAlPH;AAAA;AAAA,WAoPEK,oBAAsB;AAAA,UAAbL,KAAa,uEAAd,GAAc;AACpB,aAAO,KAAA,cAAA,CAAoB,CAAA,CAAA,EAAI,CAA/B,KAA2B,CAApB,CAAP;AACD;AAtPH;AAAA;AAAA,WAwPEM,sBAAuB;AAAA,UAAZN,KAAY,uEAAb,EAAa;AACrB,aAAO,KAAA,gBAAA,CAAsB;AAC3BvC,QAAAA,OAAO,EAAE,KAAA,cAAA,CAAA,OAAA,GAA8BuC;AADZ,OAAtB,CAAP;AAGD;AA5PH;AAAA;AAAA,WA8PEO,uBAAwB;AAAA,UAAZP,KAAY,uEAAb,EAAa;AACtB,aAAO,KAAA,gBAAA,CAAsB;AAC3BvC,QAAAA,OAAO,EAAE,KAAA,cAAA,CAAA,OAAA,GAA8BuC;AADZ,OAAtB,CAAP;AAGD;AAlQH;AAAA;AAAA,WAoQEQ,oBAAqB;AAAA,UAAZR,KAAY,uEAAb,EAAa;AACnB,aAAO,KAAA,gBAAA,CAAsB;AAC3BxC,QAAAA,KAAK,EAAE,KAAA,cAAA,CAAA,KAAA,GAA4BwC;AADR,OAAtB,CAAP;AAGD;AAxQH;AAAA;AAAA,WA0QES,sBAAuB;AAAA,UAAZT,KAAY,uEAAb,EAAa;AACrB,aAAO,KAAA,gBAAA,CAAsB;AAC3BxC,QAAAA,KAAK,EAAE,KAAA,cAAA,CAAA,KAAA,GAA4BwC;AADR,OAAtB,CAAP;AAGD;AA9QH;AAAA;AAAA,WAgREU,0BAAgB,SAAhBA,EAA4B;AAE1B,UAAMC,SAAS,GAAGC,SAAS,CAA3B,gBAAkBA,EAAlB;;AACA,UAAMC,KAAK,qBAAO,KAAKC,cAAZ,CAAX;;AACA,UAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,UAAgBxC,SAAhB,GAAA,KAAA,CAAgBA,SAAhB;;AAEA,UAAIyC,IAAI,CAAJA,GAAAA,CAAStD,OAAO,GAAGkD,SAAS,CAA5BI,OAAAA,IAAJ,GAAA,EAAiD;AAC/CF,QAAAA,KAAK,CAALA,OAAAA,GAAgBpD,OAAO,GAAPA,CAAAA,GAAcA,OAAO,GAArBA,GAAAA,GAA8BA,OAAO,GAArDoD,GAAAA;AACD;;AACD,UAAIE,IAAI,CAAJA,GAAAA,CAASzC,SAAS,GAAGqC,SAAS,CAA9BI,SAAAA,IAAJ,GAAA,EAAqD;AACnDF,QAAAA,KAAK,CAALA,SAAAA,GAAkBvC,SAAS,GAATA,CAAAA,GAAgBA,SAAS,GAAzBA,GAAAA,GAAkCA,SAAS,GAA7DuC,GAAAA;AACD;;AACD,aAAA,KAAA;AACD;AA7RH;AAAA;AAAA,WAiSEG,yBAAe,KAAfA,EAAuB;AACrB,iCAAwB,KAAxB,cAAA;AAAA,UAAM,KAAN,wBAAM,KAAN;AAAA,UAAc5C,MAAd,wBAAcA,MAAd;AACA,aAAO,KAAA,IAAA,CAAU;AACfW,QAAAA,GAAG,EAAE,CAACZ,KAAK,GAAN,CAAA,EAAYC,MAAM,GADR,CACV,CADU;AAEfwB,QAAAA,KAAAA,EAAAA;AAFe,OAAV,CAAP;AAID;AAvSH;AAAA;AAAA,WAySEqB,wBAAc,MAAdA,EAAuB;AACrB,kCAAwB,KAAxB,cAAA;AAAA,UAAM,KAAN,yBAAM,KAAN;AAAA,UAAc7C,MAAd,yBAAcA,MAAd;AACA,aAAO,KAAA,GAAA,CAAS;AACda,QAAAA,QAAQ,EAAE,CAACd,KAAK,GAAN,CAAA,EAAYC,MAAM,GADd,CACJ,CADI;AAEdW,QAAAA,GAAG,EAAE,CAACZ,KAAK,GAALA,CAAAA,GAAY+C,MAAM,CAAnB,CAAmB,CAAnB,EAAwB9C,MAAM,GAANA,CAAAA,GAAa8C,MAAM,CAA3C,CAA2C,CAA3C;AAFS,OAAT,CAAP;AAID;AA/SH;AAAA;AAAA,WAiTEC,0BAAgB,QAAhBA,EAA2B;AAEzB,aAAO,IAAI,KAAJ,WAAA;AACLC,QAAAA,YAAY,EAAE,KADY;AAArB,SAEF,KAFuB,cAArB,GAGF,KAHuB,MAArB,GAIFjC,QAJE,EAAP;AAMD;AAzTH;AAAA;AAAA,WA4TEkC,2BAAiB,KAAjBA,EAAyB;AAEvB,UAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,UAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,UAAyB9C,IAAzB,GAAA,KAAA,CAAyBA,IAAzB;AACAsC,MAAAA,KAAK,CAALA,IAAAA,GAAaS,KAAK,CAAA,IAAA,EAAA,OAAA,EAAlBT,OAAkB,CAAlBA;AAGA,UAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,UAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,UAA2BrD,KAA3B,GAAA,KAAA,CAA2BA,KAA3B;AACAqD,MAAAA,KAAK,CAALA,KAAAA,GAAcS,KAAK,CAAA,KAAA,EAAA,QAAA,EAAnBT,QAAmB,CAAnBA;AAGA,6BAAA,KAAA,CAAO7C,SAAP;AAAA,UAAOA,SAAP,iCAAmB,IAAnB;;AACA,UAAA,SAAA,EAAe;AACbuD,QAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqBC,sBAAsB,CAA3CD,KAA2C,CAA3CA;AACD;;AAED,aAAA,KAAA;AACD;AA5UH;AAAA;AAAA,WA8UEE,oBAAU,GAAVA,EAAgB;AACd,UAAMvC,QAAQ,GAAG,KAAA,YAAA,CAAkB,KAAnC,cAAiB,CAAjB;AACA,aAAOH,GAAG,IAAIG,QAAQ,CAARA,SAAAA,CAAd,GAAcA,CAAd;AACD;AAjVH;AAAA;AAAA,WAoVEwC,kCAAsC;AAAA,UAApB,KAAoB,SAApB,KAAoB;AAAA,UAAZ7C,SAAY,SAAZA,SAAY;AACpC,kCAA2B,KAA3B,cAAA;AAAA,UAAM,OAAN,yBAAM,OAAN;AAAA,UAAgBlB,OAAhB,yBAAgBA,OAAhB;AACA,UAAMY,IAAI,GAAGM,SAAS,GAAGkC,IAAI,CAAJA,IAAAA,CAAzB,KAAyBA,CAAzB;AACA,aAAOO,KAAK,CAAA,IAAA,EAAA,OAAA,EAAZ,OAAY,CAAZ;AACD;AAxVH;AAAA;AAAA,WA2VEK,6CAAmF;AAAA,UAAtD,WAAsD,SAAtD,WAAsD;AAAA,UAAtD,WAAsD,SAAtD,WAAsD;AAAA,UAAtD,YAAsD,SAAtD,YAAsD;AAAA,UAAb/C,UAAa,SAAbA,UAAa;AAGjFgD,MAAAA,WAAW,GAAGN,KAAK,CAAA,WAAA,EAAc,CAAd,CAAA,EAAnBM,CAAmB,CAAnBA;AAEA,kCAA6B,KAA7B,cAAA;AAAA,UAAM,QAAN,yBAAM,QAAN;AAAA,UAAiB9D,QAAjB,yBAAiBA,QAAjB;AAEA,UAAML,OAAO,GAAGkB,YAAY,GAAG,MAA/B,WAAA;AACA,UAAInB,KAAK,GAAT,UAAA;;AACA,UAAIoE,WAAW,GAAf,CAAA,EAAqB;AAEnBpE,QAAAA,KAAK,GAAGoB,UAAU,GAAGgD,WAAW,IAAI9D,QAAQ,GAA5CN,UAAgC,CAAhCA;AAFF,OAAA,MAGO,IAAIoE,WAAW,GAAf,CAAA,EAAqB;AAE1BpE,QAAAA,KAAK,GAAGoB,UAAU,GAAGgD,WAAW,IAAI/D,QAAQ,GAA5CL,UAAgC,CAAhCA;AACD;;AAED,aAAO;AACLA,QAAAA,KADK,EACLA,KADK;AAELC,QAAAA,OAAAA,EAAAA;AAFK,OAAP;AAID;AAhXH;AAAA;AAAA,WAkXEoE,4BAAkB,GAAlBA,EAAkB,QAAlBA,EAAkC;AAChC,UAAMC,MAAM,GAAG/C,GAAG,CAAHA,CAAG,CAAHA,GAASE,QAAQ,CAAhC,CAAgC,CAAhC;AACA,UAAM8C,MAAM,GAAGhD,GAAG,CAAHA,CAAG,CAAHA,GAASE,QAAQ,CAAhC,CAAgC,CAAhC;AACA,UAAM+C,OAAO,GAAGjD,GAAG,CAAnB,CAAmB,CAAnB;AACA,UAAMkD,MAAM,GAAGhD,QAAQ,CAAvB,CAAuB,CAAvB;AACA,kCAAwB,KAAxB,cAAA;AAAA,UAAM,KAAN,yBAAM,KAAN;AAAA,UAAcb,MAAd,yBAAcA,MAAd;AAEA,UAAM8D,WAAW,GAAGJ,MAAM,GAA1B,KAAA;AACA,UAAIF,WAAW,GAAf,CAAA;;AAEA,UAAIG,MAAM,GAAV,CAAA,EAAgB;AACd,YAAIhB,IAAI,CAAJA,GAAAA,CAAS3C,MAAM,GAAf2C,MAAAA,IAAJ,qBAAA,EAAuD;AAErDa,UAAAA,WAAW,GAAIG,MAAM,IAAIE,MAAM,GAAjB,MAAO,CAANF,GAAfH,WAAAA;AACD;AAJH,OAAA,MAKO,IAAIG,MAAM,GAAV,CAAA,EAAgB;AACrB,YAAIE,MAAM,GAAV,qBAAA,EAAoC;AAElCL,UAAAA,WAAW,GAAG,IAAII,OAAO,GAAzBJ,MAAAA;AACD;AACF;;AACDA,MAAAA,WAAW,GAAGb,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYA,IAAI,CAAJA,GAAAA,CAAS,CAATA,CAAAA,EAA1Ba,WAA0Bb,CAAZA,CAAda;AACA,aAAO;AAACM,QAAAA,WAAD,EAACA,WAAD;AAAcN,QAAAA,WAAAA,EAAAA;AAAd,OAAP;AACD;AAzYH;;AAAA;AAAA,EAAO,SAAP;;IA4Ye,a;;;;;AACb7D,yBAAW,KAAXA,EAAmB;AAAA;;AACjB8C,IAAAA,KAAK,CAALA,QAAAA,GAAiBA,KAAK,CAALA,QAAAA,IAAjBA,KAAAA;AADiB,8BAEjB,QAFiB,EAEjB,KAFiB;AAGlB;;;;WAEDsB,kBAAQ,KAARA,EAAgB;AACd,UAAMC,QAAQ,GAAG,KAAjB,oBAAA;;AAEA,kFAAA,KAAA;;AAEA,UAAMC,gBAAgB,GAAG,CAAA,QAAA,IAAaD,QAAQ,CAARA,MAAAA,KAAoBvB,KAAK,CAA/D,MAAA;;AACA,UAAA,gBAAA,EAAsB;AAEpB,aAAA,cAAA,CACE,IAAI,KAAJ,eAAA;AACEO,UAAAA,YAAY,EAAE,KADS;AAAzB,WAEK,KAFoB,oBAAzB,GAGK,KAAKkB,MAHV,EADF;AAOD;AACF;;;SAED,eAA4B;AAC1B,aAAO,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAP,OAAO,CAAP;AACD;;;;EA1BY,U;;SAAA,a","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = DEFAULT_STATE.maxZoom,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Pointer position when rotation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom,\n\n    /** Normalize viewport props to fit map height into viewport. Default `true` */\n    normalize\n  } = {}) {\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}