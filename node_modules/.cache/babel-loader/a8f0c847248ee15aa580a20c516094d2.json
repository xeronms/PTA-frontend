{"ast":null,"code":"import _slicedToArray from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ESG-dell/Documents/Dev/Hachathon-miasta/PTA-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix(_ref) {\n  var height = _ref.height,\n      focalDistance = _ref.focalDistance,\n      orbitAxis = _ref.orbitAxis,\n      rotationX = _ref.rotationX,\n      rotationOrbit = _ref.rotationOrbit,\n      zoom = _ref.zoom;\n  var up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  var eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n  var viewMatrix = new Matrix4().lookAt({\n    eye: eye,\n    up: up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  var projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\n\nvar OrbitViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(OrbitViewport, _Viewport);\n\n  var _super = _createSuper(OrbitViewport);\n\n  function OrbitViewport(props) {\n    var _this;\n\n    _classCallCheck(this, OrbitViewport);\n\n    var height = props.height,\n        projectionMatrix = props.projectionMatrix,\n        _props$fovy = props.fovy,\n        fovy = _props$fovy === void 0 ? 50 : _props$fovy,\n        orbitAxis = props.orbitAxis,\n        _props$target = props.target,\n        target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n        _props$rotationX = props.rotationX,\n        rotationX = _props$rotationX === void 0 ? 0 : _props$rotationX,\n        _props$rotationOrbit = props.rotationOrbit,\n        rotationOrbit = _props$rotationOrbit === void 0 ? 0 : _props$rotationOrbit,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom;\n    var focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n    _this = _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height: height,\n        focalDistance: focalDistance,\n        orbitAxis: orbitAxis,\n        rotationX: rotationX,\n        rotationOrbit: rotationOrbit,\n        zoom: zoom\n      }),\n      fovy: fovy,\n      focalDistance: focalDistance,\n      position: target,\n      zoom: zoom\n    }));\n    _this.projectedCenter = _this.project(_this.center);\n    return _this;\n  }\n\n  _createClass(OrbitViewport, [{\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          _xyz$ = _xyz[2],\n          z = _xyz$ === void 0 ? this.projectedCenter[2] : _xyz$;\n\n      var y2 = topLeft ? y : this.height - y;\n\n      var _pixelsToWorld = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix),\n          _pixelsToWorld2 = _slicedToArray(_pixelsToWorld, 3),\n          X = _pixelsToWorld2[0],\n          Y = _pixelsToWorld2[1],\n          Z = _pixelsToWorld2[2];\n\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var p0 = this.project(coords);\n      var nextCenter = [this.width / 2 + p0[0] - pixel[0], this.height / 2 + p0[1] - pixel[1], this.projectedCenter[2]];\n      return {\n        target: this.unproject(nextCenter)\n      };\n    }\n  }]);\n\n  return OrbitViewport;\n}(Viewport);\n\nvar OrbitView = /*#__PURE__*/function (_View) {\n  _inherits(OrbitView, _View);\n\n  var _super2 = _createSuper(OrbitView);\n\n  function OrbitView() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OrbitView);\n\n    var _props$orbitAxis = props.orbitAxis,\n        orbitAxis = _props$orbitAxis === void 0 ? 'Z' : _props$orbitAxis;\n    return _super2.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      orbitAxis: orbitAxis,\n      type: OrbitViewport\n    }));\n  }\n\n  _createClass(OrbitView, [{\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrbitController\n      });\n    }\n  }]);\n\n  return OrbitView;\n}(View);\n\nexport { OrbitView as default };\nOrbitView.displayName = 'OrbitView';","map":{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["DEGREES_TO_RADIANS","Math","zoom","up","orbitAxis","eye","viewMatrix","rotationX","rotationOrbit","projectionScale","height","constructor","fovy","target","focalDistance","projectionMatrix","fovyToAltitude","longitude","getViewMatrix","position","unproject","topLeft","z","y2","pixelsToWorld","panByPosition","p0","nextCenter","pixel","props","type","OrbitViewport","OrbitController","OrbitView"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"]},"metadata":{},"sourceType":"module"}