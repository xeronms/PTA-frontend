{"version":3,"sources":["../../src/deck-renderer.js"],"names":["arcgisFOVToDeckAltitude","fov","aspectRatio","D","Math","sqrt","halfFOV","PI","tan","createDeckRenderer","DeckProps","externalRenderers","DeckRenderer","constructor","view","props","deck","setup","context","gl","initializeResources","call","on","deckInstance","setProps","toJSON","dispose","finalizeResources","redraw","requestRender","render","width","height","size","viewState","latitude","center","longitude","altitude","camera","zoom","bearing","heading","pitch","tilt"],"mappings":";;;;;;;AAEA;;AAGA,SAASA,uBAAT,CAAiCC,GAAjC,EAAsCC,WAAtC,EAAmD;AACjD,QAAMC,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAU,IAAIH,WAAW,IAAI,CAA7B,CAAV;AACA,QAAMI,OAAO,GAAIL,GAAG,GAAG,CAAN,GAAU,GAAX,GAAkBG,IAAI,CAACG,EAAvC;AACA,SAAOJ,CAAC,GAAG,CAAJ,GAAQC,IAAI,CAACI,GAAL,CAASF,OAAT,CAAf;AACD;;AAEc,SAASG,kBAAT,CAA4BC,SAA5B,EAAuCC,iBAAvC,EAA0D;AACvE,QAAMC,YAAN,CAAmB;AACjBC,IAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACvB,WAAKD,IAAL,GAAYA,IAAZ;AACA,WAAKE,IAAL,GAAY,IAAIN,SAAJ,CAAcK,KAAd,CAAZ;AACD;;AAEDE,IAAAA,KAAK,CAACC,OAAD,EAAU;AACb,YAAMC,EAAE,GAAGD,OAAO,CAACC,EAAnB;;AACAC,mCAAoBC,IAApB,CAAyB,IAAzB,EAA+BF,EAA/B;;AAEA,WAAKH,IAAL,CAAUM,EAAV,CAAa,QAAb,EAAuBP,KAAK,IAAI,KAAKQ,YAAL,CAAkBC,QAAlB,CAA2BT,KAA3B,CAAhC;AAEA,WAAKQ,YAAL,CAAkBC,QAAlB,CAA2B,KAAKR,IAAL,CAAUS,MAAV,EAA3B;AACD;;AAEDC,IAAAA,OAAO,GAAG;AACRC,iCAAkBN,IAAlB,CAAuB,IAAvB;AACD;;AAEDO,IAAAA,MAAM,GAAG;AACPjB,MAAAA,iBAAiB,CAACkB,aAAlB,CAAgC,KAAKf,IAArC;AACD;;AAEDgB,IAAAA,MAAM,CAACZ,OAAD,EAAU;AACd,YAAM,CAACa,KAAD,EAAQC,MAAR,IAAkB,KAAKlB,IAAL,CAAUmB,IAAlC;;AAEAH,sBAAOT,IAAP,CAAY,IAAZ,EAAkB;AAChBF,QAAAA,EAAE,EAAED,OAAO,CAACC,EADI;AAEhBY,QAAAA,KAFgB;AAGhBC,QAAAA,MAHgB;AAIhBE,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAE,KAAKrB,IAAL,CAAUsB,MAAV,CAAiBD,QADlB;AAETE,UAAAA,SAAS,EAAE,KAAKvB,IAAL,CAAUsB,MAAV,CAAiBC,SAFnB;AAGTC,UAAAA,QAAQ,EAAEtC,uBAAuB,CAAC,KAAKc,IAAL,CAAUyB,MAAV,CAAiBtC,GAAlB,EAAuB8B,KAAK,GAAGC,MAA/B,CAHxB;AAITQ,UAAAA,IAAI,EAAE,KAAK1B,IAAL,CAAU0B,IAJP;AAKTC,UAAAA,OAAO,EAAE,KAAK3B,IAAL,CAAUyB,MAAV,CAAiBG,OALjB;AAMTC,UAAAA,KAAK,EAAE,KAAK7B,IAAL,CAAUyB,MAAV,CAAiBK;AANf;AAJK,OAAlB;AAaD;;AAvCgB;;AA0CnB,SAAOhC,YAAP;AACD","sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport {initializeResources, render, finalizeResources} from './commons';\n\n// ArcGIS fov is corner-to-corner\nfunction arcgisFOVToDeckAltitude(fov, aspectRatio) {\n  const D = Math.sqrt(1 + aspectRatio ** 2);\n  const halfFOV = (fov / 2 / 180) * Math.PI;\n  return D / 2 / Math.tan(halfFOV);\n}\n\nexport default function createDeckRenderer(DeckProps, externalRenderers) {\n  class DeckRenderer {\n    constructor(view, props) {\n      this.view = view;\n      this.deck = new DeckProps(props);\n    }\n\n    setup(context) {\n      const gl = context.gl;\n      initializeResources.call(this, gl);\n\n      this.deck.on('change', props => this.deckInstance.setProps(props));\n\n      this.deckInstance.setProps(this.deck.toJSON());\n    }\n\n    dispose() {\n      finalizeResources.call(this);\n    }\n\n    redraw() {\n      externalRenderers.requestRender(this.view);\n    }\n\n    render(context) {\n      const [width, height] = this.view.size;\n\n      render.call(this, {\n        gl: context.gl,\n        width,\n        height,\n        viewState: {\n          latitude: this.view.center.latitude,\n          longitude: this.view.center.longitude,\n          altitude: arcgisFOVToDeckAltitude(this.view.camera.fov, width / height),\n          zoom: this.view.zoom,\n          bearing: this.view.camera.heading,\n          pitch: this.view.camera.tilt\n        }\n      });\n    }\n  }\n\n  return DeckRenderer;\n}\n"],"file":"deck-renderer.js"}