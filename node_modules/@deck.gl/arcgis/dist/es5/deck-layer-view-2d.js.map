{"version":3,"sources":["../../src/deck-layer-view-2d.js"],"names":["createDeckLayerView2D","BaseLayerViewGL2D","createSubclass","properties","deckgl","deckFbo","model","buffer","attach","gl","context","initializeResources","call","layer","deck","on","props","deckInstance","setProps","toJSON","redraw","requestRender","detach","finalizeResources","render","renderParameters","width","height","view","state","size","viewState","latitude","center","longitude","zoom","featuresTilingScheme","scaleToLevel","scale","bearing","rotation","pitch"],"mappings":";;;;;;;AAAA;;AAEe,SAASA,qBAAT,CAA+BC,iBAA/B,EAAkD;AAC/D,SAAOA,iBAAiB,CAACC,cAAlB,CAAiC;AACtCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,MAAM,EAAE,EADE;AAEVC,MAAAA,OAAO,EAAE,EAFC;AAGVC,MAAAA,KAAK,EAAE,EAHG;AAIVC,MAAAA,MAAM,EAAE;AAJE,KAD0B;;AAStCC,IAAAA,MAAM,GAAG;AAGP,YAAMC,EAAE,GAAG,KAAKC,OAAhB;;AACAC,mCAAoBC,IAApB,CAAyB,IAAzB,EAA+BH,EAA/B;;AAGA,WAAKI,KAAL,CAAWC,IAAX,CAAgBC,EAAhB,CAAmB,QAAnB,EAA6BC,KAAK,IAAI,KAAKC,YAAL,CAAkBC,QAAlB,CAA2BF,KAA3B,CAAtC;AAGA,WAAKC,YAAL,CAAkBC,QAAlB,CAA2B,KAAKL,KAAL,CAAWC,IAAX,CAAgBK,MAAhB,EAA3B;AACD,KApBqC;;AAsBtCC,IAAAA,MAAM,GAAG;AACP,WAAKC,aAAL;AACD,KAxBqC;;AA2BtCC,IAAAA,MAAM,GAAG;AACPC,iCAAkBX,IAAlB,CAAuB,IAAvB;AACD,KA7BqC;;AAgCtCY,IAAAA,MAAM,CAACC,gBAAD,EAAmB;AACvB,YAAM,CAACC,KAAD,EAAQC,MAAR,IAAkB,KAAKC,IAAL,CAAUC,KAAV,CAAgBC,IAAxC;AAEA,YAAMD,KAAK,GAAGJ,gBAAgB,CAACI,KAA/B;;AAEAL,sBAAOZ,IAAP,CAAY,IAAZ,EAAkB;AAChBH,QAAAA,EAAE,EAAEgB,gBAAgB,CAACf,OADL;AAEhBgB,QAAAA,KAFgB;AAGhBC,QAAAA,MAHgB;AAIhBI,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAE,KAAKJ,IAAL,CAAUK,MAAV,CAAiBD,QADlB;AAETE,UAAAA,SAAS,EAAE,KAAKN,IAAL,CAAUK,MAAV,CAAiBC,SAFnB;AAGTC,UAAAA,IAAI,EAAE,KAAKP,IAAL,CAAUQ,oBAAV,CAA+BC,YAA/B,CAA4CR,KAAK,CAACS,KAAlD,CAHG;AAITC,UAAAA,OAAO,EAAE,CAACV,KAAK,CAACW,QAJP;AAKTC,UAAAA,KAAK,EAAE;AALE;AAJK,OAAlB;AAYD;;AAjDqC,GAAjC,CAAP;AAmDD","sourcesContent":["import {initializeResources, render, finalizeResources} from './commons';\n\nexport default function createDeckLayerView2D(BaseLayerViewGL2D) {\n  return BaseLayerViewGL2D.createSubclass({\n    properties: {\n      deckgl: {},\n      deckFbo: {},\n      model: {},\n      buffer: {}\n    },\n\n    // Attach is called as soon as the layer view is ready to start rendering.\n    attach() {\n      // We use a full-screen quad and shaders to composite the frame rendered\n      // with deck.gl on top of the MapView. Composition uses the MapView context.\n      const gl = this.context;\n      initializeResources.call(this, gl);\n\n      // Update deck props\n      this.layer.deck.on('change', props => this.deckInstance.setProps(props));\n\n      // We need to start drawing the deck.gl layer immediately.\n      this.deckInstance.setProps(this.layer.deck.toJSON());\n    },\n\n    redraw() {\n      this.requestRender();\n    },\n\n    // Called when the layer must be destroyed.\n    detach() {\n      finalizeResources.call(this);\n    },\n\n    // Called every time that the layer view must be rendered.\n    render(renderParameters) {\n      const [width, height] = this.view.state.size;\n      // The view state must be kept in-sync with the MapView of the ArcGIS API.\n      const state = renderParameters.state;\n\n      render.call(this, {\n        gl: renderParameters.context,\n        width,\n        height,\n        viewState: {\n          latitude: this.view.center.latitude,\n          longitude: this.view.center.longitude,\n          zoom: this.view.featuresTilingScheme.scaleToLevel(state.scale),\n          bearing: -state.rotation,\n          pitch: 0\n        }\n      });\n    }\n  });\n}\n"],"file":"deck-layer-view-2d.js"}