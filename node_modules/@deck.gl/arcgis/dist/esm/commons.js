import { Deck } from '@deck.gl/core';
import { Model, Buffer, Framebuffer, instrumentGLContext, withParameters } from '@luma.gl/core';
export function initializeResources(gl) {
  instrumentGLContext(gl);
  this.buffer = new Buffer(gl, new Int8Array([-1, -1, 1, -1, -1, 1, 1, 1]));
  this.model = new Model(gl, {
    vs: "\n      attribute vec2 a_pos;\n      varying vec2 v_texcoord;\n      void main(void) {\n          gl_Position = vec4(a_pos, 0.0, 1.0);\n          v_texcoord = (a_pos + 1.0) / 2.0;\n      }\n    ",
    fs: "\n      precision mediump float;\n      uniform sampler2D u_texture;\n      varying vec2 v_texcoord;\n      void main(void) {\n          vec4 rgba = texture2D(u_texture, v_texcoord);\n          rgba.rgb *= rgba.a;\n          gl_FragColor = rgba;\n      }\n    ",
    attributes: {
      a_pos: this.buffer
    },
    vertexCount: 4,
    drawMode: 5
  });
  this.deckFbo = new Framebuffer(gl, {
    width: 1,
    height: 1
  });
  this.deckInstance = new Deck({
    viewState: {},
    controller: false,
    gl,
    parameters: {
      depthTest: true
    },
    _framebuffer: this.deckFbo,
    width: null,
    height: null,
    _customRender: redrawReason => {
      if (redrawReason === 'arcgis') {
        this.deckInstance._drawLayers(redrawReason);
      } else {
        this.redraw();
      }
    }
  });
}
export function render({
  gl,
  width,
  height,
  viewState
}) {
  const screenFbo = gl.getParameter(36006);
  const dpr = window.devicePixelRatio;
  width = Math.round(width * dpr);
  height = Math.round(height * dpr);
  this.deckFbo.resize({
    width,
    height
  });
  this.deckInstance.setProps({
    viewState
  });
  this.deckInstance.redraw('arcgis');
  withParameters(gl, {
    blend: true,
    blendFunc: [1, 771],
    framebuffer: screenFbo,
    viewport: [0, 0, width, height]
  }, () => {
    this.model.setUniforms({
      u_texture: this.deckFbo
    }).draw();
  });
}
export function finalizeResources() {
  var _this$deckInstance, _this$model, _this$buffer, _this$deckFbo;

  (_this$deckInstance = this.deckInstance) === null || _this$deckInstance === void 0 ? void 0 : _this$deckInstance.finalize();
  this.deckInstance = null;
  (_this$model = this.model) === null || _this$model === void 0 ? void 0 : _this$model.delete();
  (_this$buffer = this.buffer) === null || _this$buffer === void 0 ? void 0 : _this$buffer.delete();
  (_this$deckFbo = this.deckFbo) === null || _this$deckFbo === void 0 ? void 0 : _this$deckFbo.delete();
}
//# sourceMappingURL=commons.js.map